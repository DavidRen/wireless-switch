###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  13:36:07 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\Source\SampleApp.c   #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ         #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wConfig.cfg" (-DSECURE=0           #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\Source\SampleApp.c" #
#                           -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\" #
#                           -lA "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\Coord #
#                          inatorEB-Pro\List\" --diag_suppress Pe001,Pa010    #
#                          -o "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\Coordin #
#                          atorEB-Pro\Obj\" -e --no_unroll --no_inline        #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Om            #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\Coordinator #
#                          EB-Pro\List\SampleApp.lst                          #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\Coordinator #
#                          EB-Pro\Obj\SampleApp.r51                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          #include "Hal_flash.h"
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "OSAL_Nv.h"
     78          #include <string.h>
     79          #include "zigbee_wrt_protocol.h"

  };
   ^
"D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\zigbee_wrt_protocol.h",19  Warning[Pe375]: 
          declaration requires a typedef name

  };
   ^
"D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\zigbee_wrt_protocol.h",36  Warning[Pe375]: 
          declaration requires a typedef name
     80          #define TEST_NV 0x0202
     81          
     82          /*********************************************************************
     83           * MACROS
     84           */
     85          
     86          /*********************************************************************
     87           * CONSTANTS
     88           */
     89          
     90          /*********************************************************************
     91           * TYPEDEFS
     92           */
     93          
     94          /*********************************************************************
     95           * GLOBAL VARIABLES
     96           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          uint8 globa_run_num = 0;
   \                     globa_run_num:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          uint8 Calc_CRC8(uint8 *PData, uint32 Len);
     99          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    100          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    101          {
    102            SAMPLEAPP_PERIODIC_CLUSTERID,
    103            SAMPLEAPP_FLASH_CLUSTERID
    104          };
    105          

   \                                 In  segment XDATA_ROM_C, align 1
    106          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    107          {
    108            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    109            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    110            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    111            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    112            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    115            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    116            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    117          };
    118          
    119          // This is the Endpoint/Interface description.  It is defined here, but
    120          // filled-in in SampleApp_Init().  Another way to go would be to fill
    121          // in the structure here and make it a "const" (in code space).  The
    122          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * EXTERNAL VARIABLES
    127           */
    128          
    129          /*********************************************************************
    130           * EXTERNAL FUNCTIONS
    131           */
    132          
    133          /*********************************************************************
    134           * LOCAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137                                    // This variable will be received when
    138                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          
    151          /*********************************************************************
    152           * LOCAL FUNCTIONS
    153           */
    154          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    155          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    156          void SampleApp_SendPeriodicMessage( void );
    157          void SampleApp_SendFlashMessage( uint16 flashTime );
    158          
    159          /*********************************************************************
    160           * NETWORK LAYER CALLBACKS
    161           */
    162          
    163          /*********************************************************************
    164           * PUBLIC FUNCTIONS
    165           */
    166          
    167          
    168          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    170          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    171            (void)port;
    172          
    173            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)))
   \   00000C   7407         MOV     A,#0x7
   \   00000E   5E           ANL     A,R6
   \   00000F   7003         JNZ     $+5
   \   000011   02....       LJMP    ??SerialApp_CallBack_0 & 0xFFFF
    174             {
    175                 // HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
    176                  //                                            SERIAL_APP_TX_MAX-SerialApp_TxLen);
    177          
    178          	  uint8 uart_data_buffer[20];
    179                    HalUARTRead(0, uart_data_buffer,sizeof(uart_data_buffer));
   \   000014                ; Setup parameters for call to function HalUARTRead
   \   000014   7C14         MOV     R4,#0x14
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??HalUARTRead?relay
    180          	  uint8 command = uart_data_buffer[0];
    181          	  uint8 value = uart_data_buffer[1];
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C0E0         PUSH    A
   \   00002E   7401         MOV     A,#0x1
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
    182          	  switch(command)
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   14           DEC     A
   \   00003D   6006         JZ      ??SerialApp_CallBack_1
   \   00003F   14           DEC     A
   \   000040   6054         JZ      ??SerialApp_CallBack_2
   \   000042   02....       LJMP    ??SerialApp_CallBack_0 & 0xFFFF
    183          	  {
    184          
    185          		case 01: //write 
    186          			osal_nv_item_init(TEST_NV,7,NULL);//NULL±íÊ¾³õÊ¼»¯µÄÊ±ºò£¬itemÊý¾Ý²¿·ÖÎª¿Õ
   \                     ??SerialApp_CallBack_1:
   \   000045                ; Setup parameters for call to function osal_nv_item_init
   \   000045   E4           CLR     A
   \   000046   F5..         MOV     ?V0 + 0,A
   \   000048   F5..         MOV     ?V0 + 1,A
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C07         MOV     R4,#0x7
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A02         MOV     R2,#0x2
   \   000055   7B02         MOV     R3,#0x2
   \   000057   12....       LCALL   ??osal_nv_item_init?relay
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
    187          			osal_nv_write(TEST_NV,0,2,&value);
   \   00005F                ; Setup parameters for call to function osal_nv_write
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   8582..       MOV     ?V0 + 0,DPL
   \   000067   8583..       MOV     ?V0 + 1,DPH
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..02       MOV     ?V0 + 0,#0x2
   \   000072   75..00       MOV     ?V0 + 1,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7C00         MOV     R4,#0x0
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   7A02         MOV     R2,#0x2
   \   000080   7B02         MOV     R3,#0x2
   \   000082   12....       LCALL   ??osal_nv_write?relay
   \   000085   7404         MOV     A,#0x4
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    188          			HalLedBlink(HAL_LED_1,5,60,500);
   \   00008A                ; Setup parameters for call to function HalLedBlink
   \   00008A   7CF4         MOV     R4,#-0xc
   \   00008C   7D01         MOV     R5,#0x1
   \   00008E   7B3C         MOV     R3,#0x3c
   \   000090   7A05         MOV     R2,#0x5
   \   000092   7901         MOV     R1,#0x1
   \   000094   8049         SJMP    ??SerialApp_CallBack_3
    189          			break;
    190          	        case 02:
    191          			uint8 value_read;
                 			^
Warning[Pe1072]: a declaration cannot have a label
    192          			osal_nv_read(TEST_NV,0,1,&value_read);
   \                     ??SerialApp_CallBack_2:
   \   000096                ; Setup parameters for call to function osal_nv_read
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   8582..       MOV     ?V0 + 0,DPL
   \   00009F   8583..       MOV     ?V0 + 1,DPH
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   75..01       MOV     ?V0 + 0,#0x1
   \   0000AA   75..00       MOV     ?V0 + 1,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   7C00         MOV     R4,#0x0
   \   0000B4   7D00         MOV     R5,#0x0
   \   0000B6   7A02         MOV     R2,#0x2
   \   0000B8   7B02         MOV     R3,#0x2
   \   0000BA   12....       LCALL   ??osal_nv_read?relay
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
    193          			HalUARTWrite(0,(uint8 *)&value_read,sizeof(value_read));
   \   0000C2                ; Setup parameters for call to function HalUARTWrite
   \   0000C2   7C01         MOV     R4,#0x1
   \   0000C4   7D00         MOV     R5,#0x0
   \   0000C6   85..82       MOV     DPL,?XSP + 0
   \   0000C9   85..83       MOV     DPH,?XSP + 1
   \   0000CC   AA82         MOV     R2,DPL
   \   0000CE   AB83         MOV     R3,DPH
   \   0000D0   7900         MOV     R1,#0x0
   \   0000D2   12....       LCALL   ??HalUARTWrite?relay
    194          			HalLedBlink(HAL_LED_3 ,5,50,1000);
   \   0000D5                ; Setup parameters for call to function HalLedBlink
   \   0000D5   7CE8         MOV     R4,#-0x18
   \   0000D7   7D03         MOV     R5,#0x3
   \   0000D9   7B32         MOV     R3,#0x32
   \   0000DB   7A05         MOV     R2,#0x5
   \   0000DD   7904         MOV     R1,#0x4
   \                     ??SerialApp_CallBack_3:
   \   0000DF   12....       LCALL   ??HalLedBlink?relay
    195          			break;
    196          		default:
    197          			break;
    198          	  }
    199                  
    200                 // HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen);
    201             }
    202          
    203          }
   \                     ??SerialApp_CallBack_0:
   \   0000E2   7416         MOV     A,#0x16
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F02         MOV     R7,#0x2
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
    204          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          int  pack_msg_transfer(Msg_Zg_WRT_transfer *pdata, char *pout)
   \                     pack_msg_transfer:
    206          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    207              char *pt;
    208              pt = pout;
    209          	Zg_Header_Struct hd;
    210          	hd.head = 0x7e7e;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   747E         MOV     A,#0x7e
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
    211          	hd.msg_serial_num = globa_run_num++;
   \   00001D   90....       MOV     DPTR,#globa_run_num
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C0E0         PUSH    A
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   90....       MOV     DPTR,#globa_run_num
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   04           INC     A
   \   000030   F0           MOVX    @DPTR,A
    212          	hd.msg_cmd = ZGB_WRT_DATA_CMD;
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   7402         MOV     A,#0x2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    213          	hd.msg_len = sizeof(Msg_Zg_WRT_transfer);
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   740F         MOV     A,#0xf
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
    214          	hd.crc8 = Calc_CRC8((char *)pdata, sizeof(Msg_Zg_WRT_transfer));
                 	                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000047                ; Setup parameters for call to function Calc_CRC8
   \   000047   90....       MOV     DPTR,#__Constant_f
   \   00004A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004D   12....       LCALL   ??Calc_CRC8?relay
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   \   000056   C0E0         PUSH    A
   \   000058   7407         MOV     A,#0x7
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
    215          	osal_memcpy(pt,(char *)&hd, sizeof(Zg_Header_Struct));	
   \   000060                ; Setup parameters for call to function osal_memcpy
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   A982         MOV     R1,DPL
   \   000068   AA83         MOV     R2,DPH
   \   00006A   89..         MOV     ?V0 + 4,R1
   \   00006C   8A..         MOV     ?V0 + 5,R2
   \   00006E   75..00       MOV     ?V0 + 6,#0x0
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000076   7C08         MOV     R4,#0x8
   \   000078   7D00         MOV     R5,#0x0
   \   00007A   EE           MOV     A,R6
   \   00007B   FA           MOV     R2,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   ??osal_memcpy?relay
   \   000081   7403         MOV     A,#0x3
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
    216          	pt += sizeof(Zg_Header_Struct);
    217                  
    218          	osal_memcpy(pt,(char *)pdata, sizeof(Msg_Zg_WRT_transfer));	
   \   000086                ; Setup parameters for call to function osal_memcpy
   \   000086   75..00       MOV     ?V0 + 2,#0x0
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   7C0F         MOV     R4,#0xf
   \   000090   7D00         MOV     R5,#0x0
   \   000092   EE           MOV     A,R6
   \   000093   2408         ADD     A,#0x8
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   3400         ADDC    A,#0x0
   \   000099   FB           MOV     R3,A
   \   00009A   12....       LCALL   ??osal_memcpy?relay
   \   00009D   7403         MOV     A,#0x3
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
    219          	pt += sizeof(Msg_Zg_WRT_transfer);
    220          	return sizeof(Msg_Zg_WRT_transfer) + sizeof(Zg_Header_Struct);
   \   0000A2   7A17         MOV     R2,#0x17
   \   0000A4   7B00         MOV     R3,#0x0
   \   0000A6   7408         MOV     A,#0x8
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   7F07         MOV     R7,#0x7
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    221          }
    222          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          int pack_msg(uint16 cmdid, char *pdata, int len, char *pout)
   \                     pack_msg:
    224          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0 + 2,R4
   \   00000C   8D..         MOV     ?V0 + 3,R5
   \   00000E   7417         MOV     A,#0x17
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 1,A
   \   00001A   7419         MOV     A,#0x19
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FF           MOV     R7,A
    225          	//uint16 tmp_len;
    226          	
    227          	Zg_Header_Struct hd;
    228          	hd.head = 0x7e7e;
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   747E         MOV     A,#0x7e
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    229          	hd.msg_cmd = cmdid;
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   EA           MOV     A,R2
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EB           MOV     A,R3
   \   000038   F0           MOVX    @DPTR,A
    230          	hd.msg_len = len;
   \   000039   7405         MOV     A,#0x5
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E5..         MOV     A,?V0 + 0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E5..         MOV     A,?V0 + 1
   \   000044   F0           MOVX    @DPTR,A
    231          //	hd.crc8 = Calc_CRC8(pdata, len);
    232          	osal_memcpy(pout,(char *)&hd, sizeof(hd));	
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   A982         MOV     R1,DPL
   \   00004D   AA83         MOV     R2,DPH
   \   00004F   89..         MOV     ?V0 + 4,R1
   \   000051   8A..         MOV     ?V0 + 5,R2
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C08         MOV     R4,#0x8
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   ??osal_memcpy?relay
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    233          	pout += sizeof(hd);
    234          	osal_memcpy(pout, pdata, len);
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   85....       MOV     ?V0 + 4,?V0 + 2
   \   00006E   85....       MOV     ?V0 + 5,?V0 + 3
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000076   AC..         MOV     R4,?V0 + 0
   \   000078   AD..         MOV     R5,?V0 + 1
   \   00007A   EE           MOV     A,R6
   \   00007B   2408         ADD     A,#0x8
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   3400         ADDC    A,#0x0
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??osal_memcpy?relay
   \   000085   7403         MOV     A,#0x3
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    235          	return sizeof(hd)+len;
   \   00008A   E5..         MOV     A,?V0 + 0
   \   00008C   2408         ADD     A,#0x8
   \   00008E   FA           MOV     R2,A
   \   00008F   E5..         MOV     A,?V0 + 1
   \   000091   3400         ADDC    A,#0x0
   \   000093   FB           MOV     R3,A
   \   000094   7408         MOV     A,#0x8
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   7F07         MOV     R7,#0x7
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA
    236          }
    237          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          int unpack_msg(char *pdata, int len)
   \                     unpack_msg:
    239          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    240          	Zg_Header_Struct *hd;
    241          	//uint8  crc8;
    242          	if(len < sizeof(Zg_Header_Struct))
   \   000000   C3           CLR     C
   \   000001   EC           MOV     A,R4
   \   000002   9408         SUBB    A,#0x8
   \   000004   ED           MOV     A,R5
   \   000005   9400         SUBB    A,#0x0
   \   000007   5006         JNC     ??unpack_msg_0
    243          	{
    244          		return -1;
   \   000009   7AFF         MOV     R2,#-0x1
   \   00000B   7BFF         MOV     R3,#-0x1
   \   00000D   8004         SJMP    ??unpack_msg_1
    245          	}
    246          	hd = (Zg_Header_Struct*)pdata;
    247          	if(hd->head == 0x7e7e)
    248          	{
    249          	//	crc8 = Calc_CRC8(pdata+sizeof(Zg_Header_Struct), hd->msg_len);
    250          	//	if(crc == hd->crc8)
    251          		{
    252          			switch(hd->msg_cmd)
    253          			{
    254          				//wrt -> zgb
    255          				case WRT_ZGB_ACK:
    256          				
    257          				break;
    258          				case WRT_ZGB_SET_INFO_CMD:
    259          				
    260          				break;
    261          				case WRT_ZGB_GET_INFO_CMD:
    262          				
    263          				break;
    264          				//zgb->wrt
    265          				case ZGB_WRT_ACK:
    266          				
    267          				break;
    268          				default:
    269          				break;
    270          			}
    271          		}
    272          	}
    273          return 0;
   \                     ??unpack_msg_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \                     ??unpack_msg_1:
   \   000013   02....       LJMP    ?BRET
    274          }
    275          
    276          /*********************************************************************
    277           * @fn      SampleApp_Init
    278           *
    279           * @brief   Initialization function for the Generic App Task.
    280           *          This is called during initialization and should contain
    281           *          any application specific initialization (ie. hardware
    282           *          initialization/setup, table initialization, power up
    283           *          notificaiton ... ).
    284           *
    285           * @param   task_id - the ID assigned by OSAL.  This ID should be
    286           *                    used to send messages and set timers.
    287           *
    288           * @return  none
    289           */
    290          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    292          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    293            SampleApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    294            SampleApp_NwkState = DEV_INIT;
   \   00000F   90....       MOV     DPTR,#SampleApp_NwkState
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
    295            SampleApp_TransID = 0;
   \   000015   90....       MOV     DPTR,#SampleApp_TransID
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
    296            
    297            //------------------------ÅäÖÃ´®¿Ú---------------------------------
    298            //MT_UartInit();                    //´®¿Ú³õÊ¼»¯
    299            //MT_UartRegisterTaskID(task_id);   //×¢²á´®¿ÚÈÎÎñ
    300             //HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));//´®¿Ú·¢ËÍ
    301            //-----------------------------------------------------------------
    302              
    303            
    304            halUARTCfg_t uartConfig ;
    305            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   04           INC     A
   \   000021   F0           MOVX    @DPTR,A
    306            uartConfig.baudRate             = HAL_UART_BR_115200;
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7404         MOV     A,#0x4
   \   000027   F0           MOVX    @DPTR,A
    307            uartConfig.flowControl          = TRUE;
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7401         MOV     A,#0x1
   \   00002F   F0           MOVX    @DPTR,A
    308            uartConfig.flowControlThreshold = 64; // 2x30 don't care - see uart driver.
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7440         MOV     A,#0x40
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
    309            uartConfig.rx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
   \   00003B   740A         MOV     A,#0xa
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7480         MOV     A,#-0x80
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    310            uartConfig.tx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
   \   000046   7412         MOV     A,#0x12
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7480         MOV     A,#-0x80
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E4           CLR     A
   \   000050   F0           MOVX    @DPTR,A
    311            uartConfig.idleTimeout          = 6;   // 2x30 don't care - see uart driver.
   \   000051   7405         MOV     A,#0x5
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   7406         MOV     A,#0x6
   \   000058   F0           MOVX    @DPTR,A
    312            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   000059   7416         MOV     A,#0x16
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
    313            uartConfig.callBackFunc         = SerialApp_CallBack;
   \   000061   741B         MOV     A,#0x1b
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    314            HalUARTOpen (0, &uartConfig);
   \   00006D                ; Setup parameters for call to function HalUARTOpen
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   ??HalUARTOpen?relay
    315            
    316            // Device hardware initialization can be added here or in main() (Zmain.c).
    317            // If the hardware is application specific - add it here.
    318            // If the hardware is other parts of the device add it in main().
    319          
    320           #if defined ( BUILD_ALL_DEVICES )
    321            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    322            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    323            // together - if they are - we will start up a coordinator. Otherwise,
    324            // the device will start as a router.
    325            if ( readCoordinatorJumper() )
    326              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    327            else
    328              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    329          #endif // BUILD_ALL_DEVICES
    330          
    331          #if defined ( HOLD_AUTO_START )
    332            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    333            //  from starting the device and wait for the application to
    334            //  start the device.
    335            ZDOInitDevice(0);
    336          #endif
    337          
    338            // Setup for the periodic message's destination address
    339            // Broadcast to everyone
    340            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00007C   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00007F   740F         MOV     A,#0xf
   \   000081   F0           MOVX    @DPTR,A
    341            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000082   A3           INC     DPTR
   \   000083   7414         MOV     A,#0x14
   \   000085   F0           MOVX    @DPTR,A
    342            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000086   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000089   74FF         MOV     A,#-0x1
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   F0           MOVX    @DPTR,A
    343          
    344            // Setup for the flash command's destination address - Group 1
    345            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00008E   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
    346            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000094   A3           INC     DPTR
   \   000095   7414         MOV     A,#0x14
   \   000097   F0           MOVX    @DPTR,A
    347            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000098   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00009B   7401         MOV     A,#0x1
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
    348          
    349            // Fill out the endpoint description.
    350            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000A1   90....       MOV     DPTR,#SampleApp_epDesc
   \   0000A4   7414         MOV     A,#0x14
   \   0000A6   F0           MOVX    @DPTR,A
    351            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   0000A7   A3           INC     DPTR
   \   0000A8   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   0000AE   F0           MOVX    @DPTR,A
    352            SampleApp_epDesc.simpleDesc
    353                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000AF   A3           INC     DPTR
   \   0000B0   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000B6   F0           MOVX    @DPTR,A
    354            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000B7   A3           INC     DPTR
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
    355          
    356            // Register the endpoint description with the AF
    357            afRegister( &SampleApp_epDesc );
   \   0000BA                ; Setup parameters for call to function afRegister
   \   0000BA   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000BC   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000BE   12....       LCALL   ??afRegister?relay
    358          
    359            // Register for all key events - This app will handle all key events
    360            RegisterForKeys( SampleApp_TaskID );
   \   0000C1                ; Setup parameters for call to function RegisterForKeys
   \   0000C1   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   12....       LCALL   ??RegisterForKeys?relay
    361          
    362            // By default, all devices start out in Group 1
    363            SampleApp_Group.ID = 0x0001;
   \   0000C9   90....       MOV     DPTR,#SampleApp_Group
   \   0000CC   7401         MOV     A,#0x1
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E4           CLR     A
   \   0000D1   F0           MOVX    @DPTR,A
    364            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   0000D2                ; Setup parameters for call to function osal_memcpy
   \   0000D2   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000D5   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000D8   F5..         MOV     ?V0 + 2,A
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C07         MOV     R4,#0x7
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000E5   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000E7   12....       LCALL   ??osal_memcpy?relay
   \   0000EA   7403         MOV     A,#0x3
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
    365            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000EF                ; Setup parameters for call to function aps_AddGroup
   \   0000EF   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000F1   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000F3   7914         MOV     R1,#0x14
   \   0000F5   12....       LCALL   ??aps_AddGroup?relay
    366          
    367          #if defined ( LCD_SUPPORTED )
    368            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000F8                ; Setup parameters for call to function HalLcdWriteString
   \   0000F8   7901         MOV     R1,#0x1
   \   0000FA   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000FC   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000FE   12....       LCALL   ??HalLcdWriteString?relay
    369          #endif
    370            
    371            osal_start_timerEx( SampleApp_TaskID, SYS_EVENT_MSG_USER_TM,1000);
   \   000101                ; Setup parameters for call to function osal_start_timerEx
   \   000101   7CE8         MOV     R4,#-0x18
   \   000103   7D03         MOV     R5,#0x3
   \   000105   7A04         MOV     R2,#0x4
   \   000107   7B00         MOV     R3,#0x0
   \   000109   90....       MOV     DPTR,#SampleApp_TaskID
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F9           MOV     R1,A
   \   00010E   12....       LCALL   ??osal_start_timerEx?relay
    372           // osal_set_event(SampleApp_TaskID,SYS_EVENT_MSG_USER_TM);
    373            
    374            
    375          
    376            /*
    377             flash block
    378            
    379          
    380          short int value_read = 0; 
    381          char str_read[8] ;
    382          short int value = 0x0304;
    383          char *str = "abcdefg";
    384          int temp = strlen(str);
    385          osal_nv_item_init(TEST_NV,7,NULL);//NULL±íÊ¾³õÊ¼»¯µÄÊ±ºò£¬itemÊý¾Ý²¿·ÖÎª¿Õ
    386          int len = osal_nv_item_len(TEST_NV);
    387          osal_nv_write(TEST_NV,0,1,&value);
    388          int len2 = osal_nv_item_len(TEST_NV);
    389          osal_nv_read(TEST_NV,0,2,&value_read);
    390          */
    391          
    392          
    393          }
   \   000111   741D         MOV     A,#0x1d
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116   7F03         MOV     R7,#0x3
   \   000118   02....       LJMP    ?BANKED_LEAVE_XDATA
    394          
    395          
    396          
    397          /*********************************************************************
    398           * @fn      SampleApp_ProcessEvent
    399           *
    400           * @brief   Generic Application Task event processor.  This function
    401           *          is called to process all events for the task.  Events
    402           *          include timers, messages and any other user defined events.
    403           *
    404           * @param   task_id  - The OSAL assigned task ID.
    405           * @param   events - events to process.  This is a bit map and can
    406           *                   contain more than one event.
    407           *
    408           * @return  none
    409           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    410          char  buf[64];
   \                     buf:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    411          int   buflen;
   \                     buflen:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    413          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    414            afIncomingMSGPacket_t *MSGpkt;
    415            (void)task_id;  // Intentionally unreferenced parameter
    416            Msg_Zg_WRT_transfer rpst;
    417            
    418            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   607B         JZ      ??SampleApp_ProcessEvent_0
    419            {
    420              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   802C         SJMP    ??SampleApp_ProcessEvent_1
    421              while ( MSGpkt )
    422              {
    423                switch ( MSGpkt->hdr.event )
    424                {
    425                  // Received when a key is pressed
    426                  case KEY_CHANGE:
    427                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    428                    break;
    429          
    430                  // Received when a messages is received (OTA) for this endpoint
    431                  case AF_INCOMING_MSG_CMD:
    432                    SampleApp_MessageMSGCB( MSGpkt );
    433                    break;
    434          
    435                  // Received whenever the device changes state in the network
    436                  case ZDO_STATE_CHANGE:
    437                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   90....       MOV     DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX    @DPTR,A
    438                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    439                        || (SampleApp_NwkState == DEV_ROUTER)
    440                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6409         XRL     A,#0x9
   \   00001D   600A         JZ      ??SampleApp_ProcessEvent_3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6407         XRL     A,#0x7
   \   000022   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6406         XRL     A,#0x6
   \   000027   7010         JNZ     ??SampleApp_ProcessEvent_4
    441                    {
    442                      // Start sending the periodic message in a regular interval.
    443                      osal_start_timerEx( SampleApp_TaskID,
    444                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    445                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000029                ; Setup parameters for call to function osal_start_timerEx
   \   000029   7C88         MOV     R4,#-0x78
   \   00002B   7D13         MOV     R5,#0x13
   \   00002D   7A01         MOV     R2,#0x1
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#SampleApp_TaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_start_timerEx?relay
    446                    }
    447                    else
    448                    {
    449                      // Device is no longer in the network
    450                    }
    451                    break;
    452          
    453                  default:
    454                    break;
    455                }
    456          
    457                // Release the memory
    458                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000039                ; Setup parameters for call to function osal_msg_deallocate
   \   000039   AA..         MOV     R2,?V0 + 0
   \   00003B   AB..         MOV     R3,?V0 + 1
   \   00003D   12....       LCALL   ??osal_msg_deallocate?relay
    459          
    460                // Next - if one is available
    461                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000040                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000040   90....       MOV     DPTR,#SampleApp_TaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   ??osal_msg_receive?relay
   \   000048   8A..         MOV     ?V0 + 0,R2
   \   00004A   8B..         MOV     ?V0 + 1,R3
   \   00004C   E5..         MOV     A,?V0 + 0
   \   00004E   45..         ORL     A,?V0 + 1
   \   000050   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000052   85..82       MOV     DPL,?V0 + 0
   \   000055   85..83       MOV     DPH,?V0 + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24E6         ADD     A,#-0x1a
   \   00005B   601E         JZ      ??SampleApp_ProcessEvent_6
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AF         JZ      ??SampleApp_ProcessEvent_2
   \   000065   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000067                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000079   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00007B                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00007B   AA..         MOV     R2,?V0 + 0
   \   00007D   AB..         MOV     R3,?V0 + 1
   \   00007F   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000082   80B5         SJMP    ??SampleApp_ProcessEvent_4
    462              }
    463          
    464              // return unprocessed events
    465              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000084   EE           MOV     A,R6
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000089   FB           MOV     R3,A
   \   00008A   02....       LJMP    ??SampleApp_ProcessEvent_9 & 0xFFFF
    466            }
    467          
    468            // Send a message out - This event is generated by a timer
    469            //  (setup in SampleApp_Init()).
    470            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00008D   EE           MOV     A,R6
   \   00008E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000090   5021         JNC     ??SampleApp_ProcessEvent_10
    471            {
    472              // Send the periodic message
    473              SampleApp_SendPeriodicMessage();
   \   000092                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000092   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    474          
    475              // Setup to send message again in normal period (+ a little jitter)
    476              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    477                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000095                ; Setup parameters for call to function osal_rand
   \   000095   12....       LCALL   ??osal_rand?relay
   \   000098                ; Setup parameters for call to function osal_start_timerEx
   \   000098   EA           MOV     A,R2
   \   000099   2488         ADD     A,#-0x78
   \   00009B   FC           MOV     R4,A
   \   00009C   E4           CLR     A
   \   00009D   3413         ADDC    A,#0x13
   \   00009F   FD           MOV     R5,A
   \   0000A0   7A01         MOV     R2,#0x1
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??osal_start_timerEx?relay
    478          
    479              // return unprocessed events
    480              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000AC   EE           MOV     A,R6
   \   0000AD   6401         XRL     A,#0x1
   \                     ??SampleApp_ProcessEvent_11:
   \   0000AF   FA           MOV     R2,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   80D6         SJMP    ??SampleApp_ProcessEvent_8
    481            }
    482            if ( events & SYS_EVENT_MSG_USER_TM )
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B3   5404         ANL     A,#0x4
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??SampleApp_ProcessEvent_12 & 0xFFFF
    483            {
    484            
    485          
    486                //Report_Status  rpst;
    487                osal_memset(buf, 0, sizeof(buf));
   \   0000BA                ; Setup parameters for call to function osal_memset
   \   0000BA   7C40         MOV     R4,#0x40
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   7A..         MOV     R2,#buf & 0xff
   \   0000C2   7B..         MOV     R3,#(buf >> 8) & 0xff
   \   0000C4   12....       LCALL   ??osal_memset?relay
    488                rpst.src_type = 1;//for test
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   F0           MOVX    @DPTR,A
    489                rpst.len = 6;//for test
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   7406         MOV     A,#0x6
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E4           CLR     A
   \   0000DA   F0           MOVX    @DPTR,A
    490                rpst.end_dev_addr = 11465;//for test
   \   0000DB   04           INC     A
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   74C9         MOV     A,#-0x37
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   742C         MOV     A,#0x2c
   \   0000E5   F0           MOVX    @DPTR,A
    491                osal_memcpy(rpst.pdata,"987654",6);
   \   0000E6                ; Setup parameters for call to function osal_memcpy
   \   0000E6   75....       MOV     ?V0 + 0,#`?<Constant "987654">` & 0xff
   \   0000E9   75....       MOV     ?V0 + 1,#(`?<Constant "987654">` >> 8) & 0xff
   \   0000EC   75..00       MOV     ?V0 + 2,#0x0
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F4   7C06         MOV     R4,#0x6
   \   0000F6   7D00         MOV     R5,#0x0
   \   0000F8   7408         MOV     A,#0x8
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   AA82         MOV     R2,DPL
   \   0000FF   AB83         MOV     R3,DPH
   \   000101   12....       LCALL   ??osal_memcpy?relay
   \   000104   7403         MOV     A,#0x3
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
    492                buflen = pack_msg_transfer(&rpst, buf);
   \   000109                ; Setup parameters for call to function pack_msg_transfer
   \   000109   7C..         MOV     R4,#buf & 0xff
   \   00010B   7D..         MOV     R5,#(buf >> 8) & 0xff
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   AA82         MOV     R2,DPL
   \   000115   AB83         MOV     R3,DPH
   \   000117   12....       LCALL   ??pack_msg_transfer?relay
   \   00011A   90....       MOV     DPTR,#buflen
   \   00011D   EA           MOV     A,R2
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   A3           INC     DPTR
   \   000120   EB           MOV     A,R3
   \   000121   F0           MOVX    @DPTR,A
    493                HalUARTWrite(0, (uint8*)buf, buflen);//´®¿Ú·¢ËÍ
   \   000122                ; Setup parameters for call to function HalUARTWrite
   \   000122   90....       MOV     DPTR,#buflen
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FC           MOV     R4,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FD           MOV     R5,A
   \   00012A   7A..         MOV     R2,#buf & 0xff
   \   00012C   7B..         MOV     R3,#(buf >> 8) & 0xff
   \   00012E   7900         MOV     R1,#0x0
   \   000130   12....       LCALL   ??HalUARTWrite?relay
    494                HalLedSet(HAL_LED_4,HAL_LED_MODE_TOGGLE);
   \   000133                ; Setup parameters for call to function HalLedSet
   \   000133   7A08         MOV     R2,#0x8
   \   000135   7908         MOV     R1,#0x8
   \   000137   12....       LCALL   ??HalLedSet?relay
    495                osal_start_timerEx( SampleApp_TaskID, SYS_EVENT_MSG_USER_TM,1000);
   \   00013A                ; Setup parameters for call to function osal_start_timerEx
   \   00013A   7CE8         MOV     R4,#-0x18
   \   00013C   7D03         MOV     R5,#0x3
   \   00013E   7A04         MOV     R2,#0x4
   \   000140   7B00         MOV     R3,#0x0
   \   000142   90....       MOV     DPTR,#SampleApp_TaskID
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   12....       LCALL   ??osal_start_timerEx?relay
    496                
    497                return (events ^ SYS_EVENT_MSG_USER_TM);
   \   00014A   EE           MOV     A,R6
   \   00014B   6404         XRL     A,#0x4
   \   00014D   02....       LJMP    ??SampleApp_ProcessEvent_11 & 0xFFFF
    498            }
    499           
    500            // Discard unknown events
    501            return 0;
   \                     ??SampleApp_ProcessEvent_12:
   \   000150   7A00         MOV     R2,#0x0
   \   000152   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   000154   740F         MOV     A,#0xf
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   \   000159   7F04         MOV     R7,#0x4
   \   00015B   02....       LJMP    ?BANKED_LEAVE_XDATA
    502          }
    503          
    504          /*********************************************************************
    505           * Event Generation Functions
    506           */
    507          /*********************************************************************
    508           * @fn      SampleApp_HandleKeys
    509           *
    510           * @brief   Handles all key events for this device.
    511           *
    512           * @param   shift - true if in shift/alt.
    513           * @param   keys - bit field for key events. Valid entries:
    514           *                 HAL_KEY_SW_2
    515           *                 HAL_KEY_SW_1
    516           *
    517           * @return  none
    518           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    520          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    521            (void)shift;  // Intentionally unreferenced parameter
    522            
    523            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    524            {
    525              /* This key sends the Flash Command is sent to Group 1.
    526               * This device will not receive the Flash Command from this
    527               * device (even if it belongs to group 1).
    528               */
    529              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    530            }
    531          
    532            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    533            {
    534              /* The Flashr Command is sent to Group 1.
    535               * This key toggles this device in and out of group 1.
    536               * If this device doesn't belong to group 1, this application
    537               * will not receive the Flash command sent to group 1.
    538               */
    539              aps_Group_t *grp;
    540              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    541              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    542              {
    543                // Remove from the group
    544                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    545              }
    546              else
    547              {
    548                // Add to the flash group
    549                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    550              }
    551            }
    552          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   7F02         MOV     R7,#0x2
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
    553          
    554          /*********************************************************************
    555           * LOCAL FUNCTIONS
    556           */
    557          
    558          /*********************************************************************
    559           * @fn      SampleApp_MessageMSGCB
    560           *
    561           * @brief   Data message processor callback.  This function processes
    562           *          any incoming data - probably from other devices.  So, based
    563           *          on cluster ID, perform the intended action.
    564           *
    565           * @param   none
    566           *
    567           * @return  none
    568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    570          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    571            uint16 flashTime;
    572          
    573            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   7044         JNZ     ??SampleApp_MessageMSGCB_1
    574            {
    575              case SAMPLEAPP_PERIODIC_CLUSTERID:
    576                break;
    577          
    578              case SAMPLEAPP_FLASH_CLUSTERID:
    579                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    580                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV     A,R2
   \   000017   2421         ADD     A,#0x21
   \   000019   F8           MOV     R0,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F9           MOV     R1,A
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FA           MOV     R2,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   2400         ADD     A,#0x0
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   E4           CLR     A
   \   000043   39           ADDC    A,R1
   \   000044   F5..         MOV     ?V0 + 1,A
   \   000046   7402         MOV     A,#0x2
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?US_SHR
   \   00004D   AC..         MOV     R4,?V0 + 0
   \   00004F   AD..         MOV     R5,?V0 + 1
   \   000051   7B32         MOV     R3,#0x32
   \   000053   7A04         MOV     R2,#0x4
   \   000055   7908         MOV     R1,#0x8
   \   000057   12....       LCALL   ??HalLedBlink?relay
    581                break;
    582            }
    583          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   00005A   7F02         MOV     R7,#0x2
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
    584          
    585          /*********************************************************************
    586           * @fn      SampleApp_SendPeriodicMessage
    587           *
    588           * @brief   Send the periodic message.
    589           *
    590           * @param   none
    591           *
    592           * @return  none
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    595          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    596            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    597                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    598                                 1,
    599                                 (uint8*)&SampleAppPeriodicCounter,
    600                                 &SampleApp_TransID,
    601                                 AF_DISCV_ROUTE,
    602                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    603            {
    604            }
    605            else
    606            {
    607              // Error occurred in request to send.
    608            }
    609          }
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    610          
    611          /*********************************************************************
    612           * @fn      SampleApp_SendFlashMessage
    613           *
    614           * @brief   Send the flash message to group 1.
    615           *
    616           * @param   flashTime - in milliseconds
    617           *
    618           * @return  none
    619           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    620          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    621          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    622            uint8 buffer[3];
    623            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    624            buffer[1] = LO_UINT16( flashTime );
   \   00001B   EA           MOV     A,R2
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    625            buffer[2] = HI_UINT16( flashTime );
   \   000026   EB           MOV     A,R3
   \   000027   C0E0         PUSH    A
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   D0E0         POP     A
   \   000030   F0           MOVX    @DPTR,A
    626          
    627            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    628                                 SAMPLEAPP_FLASH_CLUSTERID,
    629                                 3,
    630                                 buffer,
    631                                 &SampleApp_TransID,
    632                                 AF_DISCV_ROUTE,
    633                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000031                ; Setup parameters for call to function AF_DataRequest
   \   000031   75..1E       MOV     ?V0 + 0,#0x1e
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00003C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   8582..       MOV     ?V0 + 0,DPL
   \   00004C   8583..       MOV     ?V0 + 1,DPH
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..03       MOV     ?V0 + 0,#0x3
   \   000057   75..00       MOV     ?V0 + 1,#0x0
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..02       MOV     ?V0 + 0,#0x2
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7920         MOV     R1,#0x20
   \   000069   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00006B   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00006D   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00006F   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000071   12....       LCALL   ??AF_DataRequest?relay
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    634            {
    635            }
    636            else
    637            {
    638              // Error occurred in request to send.
    639            }
    640          }
   \   000079   7403         MOV     A,#0x3
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F02         MOV     R7,#0x2
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??pack_msg_transfer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pack_msg_transfer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??pack_msg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pack_msg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??unpack_msg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    unpack_msg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "987654">`:
   \   000000   39383736     DB "987654"
   \            353400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_f:
   \   000000   0F000000     DD 15
    641          
    642          /*********************************************************************
    643          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     37
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     43
       -> HalUARTOpen                   0      0     80
       -> afRegister                    0      0     80
       -> RegisterForKeys               0      0     80
       -> osal_memcpy                   0      0     86
       -> aps_AddGroup                  0      0     80
       -> HalLcdWriteString             0      0     80
       -> osal_start_timerEx            0      0     80
     SampleApp_MessageMSGCB             0      0     37
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     30
       -> osal_msg_receive              0      0     54
       -> osal_start_timerEx            0      0     54
       -> osal_msg_deallocate           0      0     54
       -> osal_msg_receive              0      0     54
       -> SampleApp_HandleKeys          0      0     54
       -> SampleApp_MessageMSGCB        0      0     54
       -> SampleApp_SendPeriodicMessage
                                        0      0     54
       -> osal_rand                     0      0     54
       -> osal_start_timerEx            0      0     54
       -> osal_memset                   0      0     54
       -> osal_memcpy                   0      0     60
       -> pack_msg_transfer             0      0     54
       -> HalUARTWrite                  0      0     54
       -> HalLedSet                     0      0     54
       -> osal_start_timerEx            0      0     54
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     46
       -> AF_DataRequest                0      0     38
     SerialApp_CallBack                 1      0     36
       -> HalUARTRead                   0      0     64
       -> osal_nv_item_init             0      0     68
       -> osal_nv_write                 0      0     72
       -> HalLedBlink                   0      0     64
       -> osal_nv_read                  0      0     72
       -> HalUARTWrite                  0      0     64
       -> HalLedBlink                   0      0     64
     pack_msg                           0      0     30
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
     pack_msg_transfer                  1      0     54
       -> Calc_CRC8                     0      0     54
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
     unpack_msg                         0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     globa_run_num                            1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SerialApp_CallBack                     236
     pack_msg_transfer                      176
     pack_msg                               158
     unpack_msg                              22
     SampleApp_Init                         283
     buf                                     64
     buflen                                   2
     SampleApp_ProcessEvent                 350
     SampleApp_HandleKeys                    64
     SampleApp_MessageMSGCB                  95
     SampleApp_SendPeriodicMessage           74
     SampleApp_SendFlashMessage             131
     ??SerialApp_CallBack?relay               6
     ??pack_msg_transfer?relay                6
     ??pack_msg?relay                         6
     ??unpack_msg?relay                       6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "987654">                     7
     __Constant_f                             4

 
 1 589 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    45 bytes in segment XDATA_ROM_C
   120 bytes in segment XDATA_Z
 
 1 649 bytes of CODE  memory
    41 bytes of CONST memory (+ 4 bytes shared)
   120 bytes of XDATA memory

Errors: none
Warnings: 4
