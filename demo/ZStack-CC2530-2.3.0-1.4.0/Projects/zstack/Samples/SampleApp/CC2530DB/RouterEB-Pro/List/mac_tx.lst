###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:33:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\mac\low_level\srf04\mac_tx.c                #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\mac\low_level\srf04\mac_tx.c" -D           #
#                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC    #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC          #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" -lA "D:\zigbee\4.                        #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\"      #
#                          --diag_suppress Pe001,Pa010 -o "D:\zigbee\4.       #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\Obj\" -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\mac_tx.lst                                  #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\mac_tx.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\mac\low_level\srf04\mac_tx.c
      1          /**************************************************************************************************
      2            Filename:       mac_tx.c
      3            Revised:        $Date: 2007-10-15 14:56:36 -0700 (Mon, 15 Oct 2007) $
      4            Revision:       $Revision: 15687 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_types.h"
     47          #include "hal_defs.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1
     49          #include "hal_mac_cfg.h"
     50          
     51          /* high-level */
     52          #include "mac_spec.h"
     53          #include "mac_pib.h"
     54          
     55          /* exported low-level */
     56          #include "mac_low_level.h"
     57          
     58          /* low-level specific */
     59          #include "mac_tx.h"
     60          #include "mac_backoff_timer.h"
     61          #include "mac_rx.h"
     62          #include "mac_rx_onoff.h"
     63          #include "mac_radio.h"
     64          #include "mac_sleep.h"
     65          
     66          /* target specific */
     67          #include "mac_radio_defs.h"
     68          
     69          /* debug */
     70          #include "mac_assert.h"
     71          
     72          
     73          /* ------------------------------------------------------------------------------------------------
     74           *                                            Defines
     75           * ------------------------------------------------------------------------------------------------
     76           */
     77          #define MFR_LEN                   MAC_FCS_FIELD_LEN
     78          #define PREPENDED_BYTE_LEN        1
     79          
     80          
     81          /* ------------------------------------------------------------------------------------------------
     82           *                                         Global Constants
     83           * ------------------------------------------------------------------------------------------------
     84           */
     85          
     86          /*
     87           *  This is the time, in backoffs, required to set up a slotted transmit.
     88           *  It is exported to high level so that code can schedule enough time
     89           *  for slotted transmits.
     90           *
     91           *  A default is provided if a value is not specified.  If the default
     92           *  is not appropriate, a #define should be added within hal_mac_cfg.h.
     93           */
     94          #ifndef HAL_MAC_TX_SLOTTED_DELAY
     95          #define HAL_MAC_TX_SLOTTED_DELAY    3
     96          #endif

   \                                 In  segment XDATA_ROM_C, align 1
     97          uint8 const macTxSlottedDelay = HAL_MAC_TX_SLOTTED_DELAY;
   \                     macTxSlottedDelay:
   \   000000   03           DB 3
     98          
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                         Global Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 macTxActive;
   \                     macTxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 macTxType;
   \                     macTxType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint8 macTxBe;
   \                     macTxBe:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint8 macTxCsmaBackoffDelay;
   \                     macTxCsmaBackoffDelay:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          
    109          
    110          /* ------------------------------------------------------------------------------------------------
    111           *                                         Local Variables
    112           * ------------------------------------------------------------------------------------------------
    113           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static uint8 nb;
   \                     nb:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          static uint8 txSeqn;
   \                     txSeqn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static uint8 txAckReq;
   \                     txAckReq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 txRetransmitFlag;
   \                     txRetransmitFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          
    119          
    120          /* ------------------------------------------------------------------------------------------------
    121           *                                         Local Prototypes
    122           * ------------------------------------------------------------------------------------------------
    123           */
    124          static void txCsmaPrep(void);
    125          static void txGo(void);
    126          static void txCsmaGo(void);
    127          static void txComplete(uint8 status);
    128          
    129          
    130          /**************************************************************************************************
    131           * @fn          macTxInit
    132           *
    133           * @brief       Initialize variables for tx module.
    134           *
    135           * @param       none
    136           *
    137           * @return      none
    138           **************************************************************************************************
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          MAC_INTERNAL_API void macTxInit(void)
   \                     macTxInit:
    141          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    142            macTxActive      = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   000004   02....       LJMP    ?Subroutine0 & 0xFFFF
    143            txRetransmitFlag = 0;
    144          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#macTxActive
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   90....       MOV     DPTR,#txRetransmitFlag
   \   000008   F0           MOVX    @DPTR,A
   \   000009                REQUIRE ??Subroutine3_0
   \   000009                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    145          
    146          
    147          /**************************************************************************************************
    148           * @fn          macTxHaltCleanup
    149           *
    150           * @brief       -
    151           *
    152           * @param       none
    153           *
    154           * @return      none
    155           **************************************************************************************************
    156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          MAC_INTERNAL_API void macTxHaltCleanup(void)
   \                     macTxHaltCleanup:
    158          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    159            MAC_RADIO_TX_RESET();
   \   000004                ; Setup parameters for call to function macCspTxReset
   \   000004   12....       LCALL   ??macCspTxReset?relay
    160            macTxInit();
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
    161          }
    162          
    163          
    164          /**************************************************************************************************
    165           * @fn          macTxFrame
    166           *
    167           * @brief       Transmit the frame pointed to by pMacDataTx with the specified type.
    168           *              NOTE! It is not legal to call this function from interrupt context.
    169           *
    170           * @param       txType - type of transmit
    171           *
    172           * @return      none
    173           **************************************************************************************************
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          MAC_INTERNAL_API void macTxFrame(uint8 txType)
   \                     macTxFrame:
    176          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    177            MAC_ASSERT(!macTxActive);            /* transmit on top of transmit */
   \   000007   90....       MOV     DPTR,#macTxActive
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6003         JZ      ??macTxFrame_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   12....       LCALL   ??halAssertHandler?relay
    178          
    179            /* mark transmit as active */
    180            macTxActive = MAC_TX_ACTIVE_INITIALIZE;
   \                     ??macTxFrame_0:
   \   000010   90....       MOV     DPTR,#macTxActive
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    181          
    182            /*
    183             *  The MAC will not enter sleep mode if there is an active transmit.  However, if macSleep() is
    184             *  ever called from interrupt context, it possible to enter sleep state after a transmit is
    185             *  intiated but before macTxActive is set.  To recover from this, the transmit must be aborted
    186             *  and proper notificiation given to high-level.
    187             */
    188            if (macSleepState != MAC_SLEEP_STATE_AWAKE)
   \   000016   90....       MOV     DPTR,#macSleepState
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   601A         JZ      ??macTxFrame_1
    189            {
    190              /* notify high-level that transmit had to be aborted */
    191              txComplete(MAC_TX_ABORTED);
   \   00001C   90....       MOV     DPTR,#txRetransmitFlag
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   90....       MOV     DPTR,#macTxActive
   \   000024   F0           MOVX    @DPTR,A
   \   000025                ; Setup parameters for call to function macRxOffRequest
   \   000025   12....       LCALL   ??macRxOffRequest?relay
   \   000028                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000028   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   00002B                ; Setup parameters for call to function macRadioUpdateChannel
   \   00002B   12....       LCALL   ??macRadioUpdateChannel?relay
   \   00002E                ; Setup parameters for call to function macTxCompleteCallback
   \   00002E   791D         MOV     R1,#0x1d
   \                     ??macTxFrame_2:
   \   000030   12....       LCALL   ??macTxCompleteCallback?relay
    192          
    193              /* exit from transmit logic */
    194              return;
   \   000033   02....       LJMP    ??macTxFrame_3 & 0xFFFF
    195            }
    196          
    197            /* save transmit type */
    198            macTxType = txType;
   \                     ??macTxFrame_1:
   \   000036   EE           MOV     A,R6
   \   000037   90....       MOV     DPTR,#macTxType
   \   00003A   F0           MOVX    @DPTR,A
    199          
    200            /*-------------------------------------------------------------------------------
    201             *  Prepare for transmit.
    202             */
    203            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \   00003B   6402         XRL     A,#0x2
   \   00003D   7005         JNZ     ??macTxFrame_4
    204            {
    205              MAC_RADIO_TX_PREP_SLOTTED();
   \   00003F                ; Setup parameters for call to function macCspTxPrepSlotted
   \   00003F   12....       LCALL   ??macCspTxPrepSlotted?relay
   \   000042   8074         SJMP    ??macTxFrame_5
    206            }
    207            else
    208            {
    209              MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \                     ??macTxFrame_4:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6007         JZ      ??macTxFrame_6
   \   000047   6401         XRL     A,#0x1
   \   000049   6003         JZ      ??macTxFrame_6
   \   00004B                ; Setup parameters for call to function halAssertHandler
   \   00004B   12....       LCALL   ??halAssertHandler?relay
    210          
    211              nb = 0;
   \                     ??macTxFrame_6:
   \   00004E   90....       MOV     DPTR,#nb
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    212              macTxBe = (pMacDataTx->internal.txOptions & MAC_TXOPTION_ALT_BE) ? macPib.altBe : macPib.minBe;
   \   000053   90....       MOV     DPTR,#pMacDataTx
   \   000056   E0           MOVX    A,@DPTR
   \   000057   240E         ADD     A,#0xe
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F9           MOV     R1,A
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   A2E6         MOV     C,0xE0 /* A   */.6
   \   000066   5005         JNC     ??macTxFrame_7
   \   000068   90....       MOV     DPTR,#macPib + 58
   \   00006B   8003         SJMP    ??macTxFrame_8
   \                     ??macTxFrame_7:
   \   00006D   90....       MOV     DPTR,#macPib + 28
   \                     ??macTxFrame_8:
   \   000070   E0           MOVX    A,@DPTR
   \   000071   90....       MOV     DPTR,#macTxBe
   \   000074   F0           MOVX    @DPTR,A
    213          
    214              if ((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) && (macPib.battLifeExt))
   \   000075   90....       MOV     DPTR,#macTxType
   \   000078   E0           MOVX    A,@DPTR
   \   000079   7015         JNZ     ??macTxFrame_9
   \   00007B   90....       MOV     DPTR,#macPib + 3
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   600F         JZ      ??macTxFrame_9
    215              {
    216                macTxBe = MIN(2, macTxBe);
   \   000081   90....       MOV     DPTR,#macTxBe
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C3           CLR     C
   \   000086   9403         SUBB    A,#0x3
   \   000088   4004         JC      ??macTxFrame_10
   \   00008A   7402         MOV     A,#0x2
   \   00008C   8001         SJMP    ??macTxFrame_11
   \                     ??macTxFrame_10:
   \   00008E   E0           MOVX    A,@DPTR
   \                     ??macTxFrame_11:
   \   00008F   F0           MOVX    @DPTR,A
    217              }
    218          
    219              txCsmaPrep();
   \                     ??macTxFrame_9:
   \   000090                ; Setup parameters for call to function macRadioRandomByte
   \   000090   12....       LCALL   ??macRadioRandomByte?relay
   \   000093   75..01       MOV     ?V0 + 0,#0x1
   \   000096   75..00       MOV     ?V0 + 1,#0x0
   \   000099   90....       MOV     DPTR,#macTxBe
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?S_SHL
   \   0000A2   E5..         MOV     A,?V0 + 0
   \   0000A4   14           DEC     A
   \   0000A5   59           ANL     A,R1
   \   0000A6   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   90....       MOV     DPTR,#macTxType
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   7005         JNZ     ??macTxFrame_12
   \   0000B0                ; Setup parameters for call to function macCspTxPrepCsmaSlotted
   \   0000B0   12....       LCALL   ??macCspTxPrepCsmaSlotted?relay
   \   0000B3   8003         SJMP    ??macTxFrame_5
   \                     ??macTxFrame_12:
   \   0000B5                ; Setup parameters for call to function macCspTxPrepCsmaUnslotted
   \   0000B5   12....       LCALL   ??macCspTxPrepCsmaUnslotted?relay
    220            }
    221          
    222            /*-------------------------------------------------------------------------------
    223             *  Load transmit FIFO unless this is a retransmit.  No need to write
    224             *  the FIFO again in that case.
    225             */
    226            if (!txRetransmitFlag)
   \                     ??macTxFrame_5:
   \   0000B8   90....       MOV     DPTR,#txRetransmitFlag
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   7075         JNZ     ??macTxFrame_13
    227            {
    228              uint8 * p;
    229              uint8   lenMhrMsdu;
    230          
    231              MAC_ASSERT(pMacDataTx != NULL); /* must have data to transmit */
   \   0000BE   90....       MOV     DPTR,#pMacDataTx
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F8           MOV     R0,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   E8           MOV     A,R0
   \   0000C7   49           ORL     A,R1
   \   0000C8   7003         JNZ     ??macTxFrame_14
   \   0000CA                ; Setup parameters for call to function halAssertHandler
   \   0000CA   12....       LCALL   ??halAssertHandler?relay
    232          
    233              /* save needed parameters */
    234              txAckReq = MAC_ACK_REQUEST(pMacDataTx->msdu.p);
   \                     ??macTxFrame_14:
   \   0000CD   90....       MOV     DPTR,#pMacDataTx
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   2402         ADD     A,#0x2
   \   0000D3   F8           MOV     R0,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   3400         ADDC    A,#0x0
   \   0000D8   F9           MOV     R1,A
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   FA           MOV     R2,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F583         MOV     DPH,A
   \   0000E3   8A82         MOV     DPL,R2
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   5420         ANL     A,#0x20
   \   0000E8   90....       MOV     DPTR,#txAckReq
   \   0000EB   F0           MOVX    @DPTR,A
    235              txSeqn   = MAC_SEQ_NUMBER(pMacDataTx->msdu.p);
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FA           MOV     R2,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F583         MOV     DPH,A
   \   0000F6   8A82         MOV     DPL,R2
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   90....       MOV     DPTR,#txSeqn
   \   0000FE   F0           MOVX    @DPTR,A
    236          
    237              /* set length of frame (note: use of term msdu is a misnomer, here it's actually mhr + msdu) */
    238              lenMhrMsdu = pMacDataTx->msdu.len;
   \   0000FF   90....       MOV     DPTR,#pMacDataTx
   \   000102   E0           MOVX    A,@DPTR
   \   000103   FA           MOV     R2,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F583         MOV     DPH,A
   \   000108   8A82         MOV     DPL,R2
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FA           MOV     R2,A
    239          
    240              /* calling code guarantees an unused prepended byte  */
    241              p = pMacDataTx->msdu.p - PREPENDED_BYTE_LEN;
   \   000110   8882         MOV     DPL,R0
   \   000112   8983         MOV     DPH,R1
   \   000114   E0           MOVX    A,@DPTR
   \   000115   24FF         ADD     A,#-0x1
   \   000117   F8           MOV     R0,A
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   34FF         ADDC    A,#-0x1
   \   00011C   F9           MOV     R1,A
   \   00011D   8882         MOV     DPL,R0
   \   00011F   8983         MOV     DPH,R1
    242          
    243              /* first byte of buffer is length of MPDU */
    244              *p = lenMhrMsdu + MFR_LEN;
   \   000121   7402         MOV     A,#0x2
   \   000123   2A           ADD     A,R2
   \   000124   F0           MOVX    @DPTR,A
    245          
    246              /*
    247               *  Flush the TX FIFO.  This is necessary in case the previous transmit was never
    248               *  actually sent (e.g. CSMA failed without strobing TXON).  If bytes are written to
    249               *  the FIFO but not transmitted, they remain in the FIFO to be transmitted whenever
    250               *  a strobe of TXON does happen.
    251               */
    252              MAC_RADIO_FLUSH_TX_FIFO();
   \   000125   75E1EE       MOV     0xe1,#-0x12
    253          
    254              /* write bytes to FIFO, prepended byte is included, MFR is not (it's generated by hardware) */
    255              MAC_RADIO_WRITE_TX_FIFO(p, PREPENDED_BYTE_LEN + lenMhrMsdu);
   \   000128                ; Setup parameters for call to function macMemWriteTxFifo
   \   000128   7401         MOV     A,#0x1
   \   00012A   2A           ADD     A,R2
   \   00012B   F9           MOV     R1,A
   \   00012C   AA82         MOV     R2,DPL
   \   00012E   AB83         MOV     R3,DPH
   \   000130   12....       LCALL   ??macMemWriteTxFifo?relay
    256            }
    257          
    258            /*-------------------------------------------------------------------------------
    259             *  If not receiving, start the transmit.  If receive is active
    260             *  queue up the transmit.
    261             *
    262             *  Critical sections around the state change prevents any sort of race condition
    263             *  with  macTxStartQueuedFrame().  This guarantees function txGo() will only be
    264             *  called once.
    265             */
    266            {
    267              halIntState_t  s;
    268          
    269              HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxFrame_13:
   \   000133   A2AF         MOV     C,0xa8.7
   \   000135   E4           CLR     A
   \   000136   33           RLC     A
   \   000137   F8           MOV     R0,A
   \   000138   C2AF         CLR     0xa8.7
    270              if (!macRxActive && !macRxOutgoingAckFlag)
   \   00013A   90....       MOV     DPTR,#macRxActive
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   7056         JNZ     ??macTxFrame_15
   \   000140   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000143   E0           MOVX    A,@DPTR
   \   000144   7050         JNZ     ??macTxFrame_15
    271              {
    272                macTxActive = MAC_TX_ACTIVE_GO;
   \   000146   90....       MOV     DPTR,#macTxActive
   \   000149   7483         MOV     A,#-0x7d
   \   00014B   F0           MOVX    @DPTR,A
    273                HAL_EXIT_CRITICAL_SECTION(s);
   \   00014C   E8           MOV     A,R0
   \   00014D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00014F   92AF         MOV     0xa8.7,C
    274                txGo();
   \   000151   9061A4       MOV     DPTR,#0x61a4
   \   000154   E0           MOVX    A,@DPTR
   \   000155   C2E0         CLR     0xE0 /* A   */.0
   \   000157   F0           MOVX    @DPTR,A
   \   000158   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00015B   E4           CLR     A
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   90....       MOV     DPTR,#macTxType
   \   000160   E0           MOVX    A,@DPTR
   \   000161   6402         XRL     A,#0x2
   \   000163   7005         JNZ     ??macTxFrame_16
   \   000165                ; Setup parameters for call to function macCspTxGoSlotted
   \   000165   12....       LCALL   ??macCspTxGoSlotted?relay
   \   000168   8037         SJMP    ??macTxFrame_3
   \                     ??macTxFrame_16:
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   7024         JNZ     ??macTxFrame_17
   \   00016D                ; Setup parameters for call to function macDataTxTimeAvailable
   \   00016D   12....       LCALL   ??macDataTxTimeAvailable?relay
   \   000170   E9           MOV     A,R1
   \   000171   F8           MOV     R0,A
   \   000172   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C3           CLR     C
   \   000177   98           SUBB    A,R0
   \   000178   4017         JC      ??macTxFrame_17
   \   00017A   90....       MOV     DPTR,#txRetransmitFlag
   \   00017D   E4           CLR     A
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   90....       MOV     DPTR,#macTxActive
   \   000182   F0           MOVX    @DPTR,A
   \   000183                ; Setup parameters for call to function macRxOffRequest
   \   000183   12....       LCALL   ??macRxOffRequest?relay
   \   000186                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000186   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   000189                ; Setup parameters for call to function macRadioUpdateChannel
   \   000189   12....       LCALL   ??macRadioUpdateChannel?relay
   \   00018C                ; Setup parameters for call to function macTxCompleteCallback
   \   00018C   791C         MOV     R1,#0x1c
   \   00018E   02....       LJMP    ??macTxFrame_2 & 0xFFFF
   \                     ??macTxFrame_17:
   \   000191                ; Setup parameters for call to function macCspTxGoCsma
   \   000191   12....       LCALL   ??macCspTxGoCsma?relay
   \   000194   800B         SJMP    ??macTxFrame_3
    275              }
    276              else
    277              {
    278                macTxActive = MAC_TX_ACTIVE_QUEUED;
   \                     ??macTxFrame_15:
   \   000196   90....       MOV     DPTR,#macTxActive
   \   000199   7402         MOV     A,#0x2
   \   00019B   F0           MOVX    @DPTR,A
    279                HAL_EXIT_CRITICAL_SECTION(s);
   \   00019C   E8           MOV     A,R0
   \   00019D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00019F   92AF         MOV     0xa8.7,C
    280              }
    281            }
   \                     ??macTxFrame_3:
   \   0001A1                REQUIRE ?Subroutine1
   \   0001A1                REQUIRE RFST
   \   0001A1                REQUIRE _A_IEN0
   \   0001A1                ; // Fall through to label ?Subroutine1
    282          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    283          
    284          
    285          /*=================================================================================================
    286           * @fn          txCsmaPrep
    287           *
    288           * @brief       Prepare/initialize for a CSMA transmit.
    289           *
    290           * @param       none
    291           *
    292           * @return      none
    293           *=================================================================================================
    294           */
    295          static void txCsmaPrep(void)
    296          {
    297            macTxCsmaBackoffDelay = macRadioRandomByte() & ((1 << macTxBe) - 1);
    298          
    299            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
    300            {
    301              MAC_RADIO_TX_PREP_CSMA_SLOTTED();
    302            }
    303            else
    304            {
    305              MAC_RADIO_TX_PREP_CSMA_UNSLOTTED();
    306            }
    307          }
    308          
    309          
    310          /*=================================================================================================
    311           * @fn          txGo
    312           *
    313           * @brief       Start a transmit going.
    314           *
    315           * @param       none
    316           *
    317           * @return      none
    318           *=================================================================================================
    319           */
    320          static void txGo(void)
    321          {
    322            /*
    323             *  If execution has reached this point, any transmitted ACK has long since completed.  It is
    324             *  possible though that there is still a pending callback.  If so, it is irrelevant and needs to
    325             *  be canceled at this point.
    326             */
    327            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
    328            macRxOutgoingAckFlag = 0;
    329          
    330            /* based on type of transmit, call the correct "go" functionality */
    331            if (macTxType == MAC_TX_TYPE_SLOTTED)
    332            {
    333              MAC_RADIO_TX_GO_SLOTTED();
    334            }
    335            else
    336            {
    337              txCsmaGo();
    338            }
    339          }
    340          
    341          
    342          /*=================================================================================================
    343           * @fn          txCsmaGo
    344           *
    345           * @brief       Start a CSMA transmit going.
    346           *
    347           * @param       none
    348           *
    349           * @return      none
    350           *=================================================================================================
    351           */
    352          static void txCsmaGo(void)
    353          {
    354            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
    355            {
    356              if (macTxCsmaBackoffDelay >= macDataTxTimeAvailable())
    357              {
    358                txComplete(MAC_NO_TIME);
    359                return;
    360              }
    361              MAC_RADIO_TX_GO_SLOTTED_CSMA();
    362            }
    363            else
    364            {
    365              MAC_RADIO_TX_GO_CSMA();
    366            }
    367          }
    368          
    369          
    370          /**************************************************************************************************
    371           * @fn          macTxFrameRetransmit
    372           *
    373           * @brief       Retransmit the last frame.
    374           *
    375           * @param       none
    376           *
    377           * @return      none
    378           **************************************************************************************************
    379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          MAC_INTERNAL_API void macTxFrameRetransmit(void)
   \                     macTxFrameRetransmit:
    381          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    382            txRetransmitFlag = 1;
   \   000004   90....       MOV     DPTR,#txRetransmitFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    383            macTxFrame(macTxType);
   \   00000A                ; Setup parameters for call to function macTxFrame
   \   00000A   90....       MOV     DPTR,#macTxType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??macTxFrame?relay
    384          }
   \   000012   80..         SJMP    ??Subroutine3_0
    385          
    386          
    387          /**************************************************************************************************
    388           * @fn          macTxStartQueuedFrame
    389           *
    390           * @brief       See if there is a queued frame waiting to transmit.  If so, initiate
    391           *              the transmit now.
    392           *
    393           * @param       none
    394           *
    395           * @return      none
    396           **************************************************************************************************
    397           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    398          MAC_INTERNAL_API void macTxStartQueuedFrame(void)
   \                     macTxStartQueuedFrame:
    399          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    400            halIntState_t  s;
    401          
    402            MAC_ASSERT(!macRxActive && !macRxOutgoingAckFlag); /* queued frames should not transmit in middle of a receive */
   \   000004   90....       MOV     DPTR,#macRxActive
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7006         JNZ     ??macTxStartQueuedFrame_0
   \   00000A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      ??macTxStartQueuedFrame_1
   \                     ??macTxStartQueuedFrame_0:
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay
    403          
    404            /*
    405             *  Critical sections around the state change prevents any sort of race condition
    406             *  with macTxFrame().  This guarantees function txGo() will only be be called once.
    407             */
    408            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_1:
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   F8           MOV     R0,A
   \   000018   C2AF         CLR     0xa8.7
    409            if (macTxActive == MAC_TX_ACTIVE_QUEUED)
   \   00001A   90....       MOV     DPTR,#macTxActive
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6402         XRL     A,#0x2
   \   000020   704F         JNZ     ??macTxStartQueuedFrame_2
    410            {
    411              macTxActive = MAC_TX_ACTIVE_GO;
   \   000022   7483         MOV     A,#-0x7d
   \   000024   F0           MOVX    @DPTR,A
    412              HAL_EXIT_CRITICAL_SECTION(s);
   \   000025   E8           MOV     A,R0
   \   000026   A2E0         MOV     C,0xE0 /* A   */.0
   \   000028   92AF         MOV     0xa8.7,C
    413              txGo();
   \   00002A   9061A4       MOV     DPTR,#0x61a4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C2E0         CLR     0xE0 /* A   */.0
   \   000030   F0           MOVX    @DPTR,A
   \   000031   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   90....       MOV     DPTR,#macTxType
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6402         XRL     A,#0x2
   \   00003C   7005         JNZ     ??macTxStartQueuedFrame_3
   \   00003E                ; Setup parameters for call to function macCspTxGoSlotted
   \   00003E   12....       LCALL   ??macCspTxGoSlotted?relay
   \   000041   8033         SJMP    ??macTxStartQueuedFrame_4
   \                     ??macTxStartQueuedFrame_3:
   \   000043   E0           MOVX    A,@DPTR
   \   000044   7026         JNZ     ??macTxStartQueuedFrame_5
   \   000046                ; Setup parameters for call to function macDataTxTimeAvailable
   \   000046   12....       LCALL   ??macDataTxTimeAvailable?relay
   \   000049   E9           MOV     A,R1
   \   00004A   F8           MOV     R0,A
   \   00004B   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C3           CLR     C
   \   000050   98           SUBB    A,R0
   \   000051   4019         JC      ??macTxStartQueuedFrame_5
   \   000053   90....       MOV     DPTR,#txRetransmitFlag
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   90....       MOV     DPTR,#macTxActive
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C                ; Setup parameters for call to function macRxOffRequest
   \   00005C   12....       LCALL   ??macRxOffRequest?relay
   \   00005F                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00005F   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   000062                ; Setup parameters for call to function macRadioUpdateChannel
   \   000062   12....       LCALL   ??macRadioUpdateChannel?relay
   \   000065                ; Setup parameters for call to function macTxCompleteCallback
   \   000065   791C         MOV     R1,#0x1c
   \   000067   12....       LCALL   ??macTxCompleteCallback?relay
   \   00006A   800A         SJMP    ??macTxStartQueuedFrame_4
   \                     ??macTxStartQueuedFrame_5:
   \   00006C                ; Setup parameters for call to function macCspTxGoCsma
   \   00006C   12....       LCALL   ??macCspTxGoCsma?relay
   \   00006F   8005         SJMP    ??macTxStartQueuedFrame_4
    414            }
    415            else
    416            {
    417              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_2:
   \   000071   E8           MOV     A,R0
   \   000072   A2E0         MOV     C,0xE0 /* A   */.0
   \   000074   92AF         MOV     0xa8.7,C
    418            }
    419          }
   \                     ??macTxStartQueuedFrame_4:
   \   000076   80..         SJMP    ??Subroutine3_0
   \   000078                REQUIRE _A_IEN0
    420          
    421          
    422          /**************************************************************************************************
    423           * @fn          macTxChannelBusyCallback
    424           *
    425           * @brief       This callback is executed if a CSMA transmit was attempted but the channel
    426           *              was busy.
    427           *
    428           * @param       none
    429           *
    430           * @return      none
    431           **************************************************************************************************
    432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          MAC_INTERNAL_API void macTxChannelBusyCallback(void)
   \                     macTxChannelBusyCallback:
    434          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    435            MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \   000005   90....       MOV     DPTR,#macTxType
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6007         JZ      ??macTxChannelBusyCallback_0
   \   00000B   6401         XRL     A,#0x1
   \   00000D   6003         JZ      ??macTxChannelBusyCallback_0
   \   00000F                ; Setup parameters for call to function halAssertHandler
   \   00000F   12....       LCALL   ??halAssertHandler?relay
    436          
    437            /* turn off receiver if allowed */
    438            macTxActive = MAC_TX_ACTIVE_CHANNEL_BUSY;
   \                     ??macTxChannelBusyCallback_0:
   \   000012   90....       MOV     DPTR,#macTxActive
   \   000015   7404         MOV     A,#0x4
   \   000017   F0           MOVX    @DPTR,A
    439            macRxOffRequest();
   \   000018                ; Setup parameters for call to function macRxOffRequest
   \   000018   12....       LCALL   ??macRxOffRequest?relay
    440          
    441            /*  clear channel assement failed, follow through with CSMA algorithm */
    442            nb++;
   \   00001B   90....       MOV     DPTR,#nb
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   04           INC     A
   \   000020   F0           MOVX    @DPTR,A
    443            if (nb > macPib.maxCsmaBackoffs)
   \   000021   F8           MOV     R0,A
   \   000022   90....       MOV     DPTR,#macPib + 27
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C3           CLR     C
   \   000027   98           SUBB    A,R0
   \   000028   501A         JNC     ??macTxChannelBusyCallback_1
    444            {
    445              txComplete(MAC_CHANNEL_ACCESS_FAILURE);
   \   00002A   90....       MOV     DPTR,#txRetransmitFlag
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   90....       MOV     DPTR,#macTxActive
   \   000032   F0           MOVX    @DPTR,A
   \   000033                ; Setup parameters for call to function macRxOffRequest
   \   000033   12....       LCALL   ??macRxOffRequest?relay
   \   000036                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000036   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   000039                ; Setup parameters for call to function macRadioUpdateChannel
   \   000039   12....       LCALL   ??macRadioUpdateChannel?relay
   \   00003C                ; Setup parameters for call to function macTxCompleteCallback
   \   00003C   79E1         MOV     R1,#-0x1f
   \                     ??macTxChannelBusyCallback_2:
   \   00003E   12....       LCALL   ??macTxCompleteCallback?relay
    446            }
   \   000041   02....       LJMP    ??macTxChannelBusyCallback_3 & 0xFFFF
    447            else
    448            {
    449              macTxBe = MIN(macTxBe+1, macPib.maxBe);
   \                     ??macTxChannelBusyCallback_1:
   \   000044   90....       MOV     DPTR,#macPib + 39
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   90....       MOV     DPTR,#macTxBe
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   2401         ADD     A,#0x1
   \   00004F   F8           MOV     R0,A
   \   000050   E4           CLR     A
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   8A..         MOV     ?V0 + 0,R2
   \   000056   E8           MOV     A,R0
   \   000057   95..         SUBB    A,?V0 + 0
   \   000059   E9           MOV     A,R1
   \   00005A   9400         SUBB    A,#0x0
   \   00005C   C3           CLR     C
   \   00005D   65D0         XRL     A,PSW
   \   00005F   33           RLC     A
   \   000060   5004         JNC     ??macTxChannelBusyCallback_4
   \   000062   E0           MOVX    A,@DPTR
   \   000063   04           INC     A
   \   000064   8001         SJMP    ??macTxChannelBusyCallback_5
   \                     ??macTxChannelBusyCallback_4:
   \   000066   EA           MOV     A,R2
   \                     ??macTxChannelBusyCallback_5:
   \   000067   FE           MOV     R6,A
   \   000068   EE           MOV     A,R6
   \   000069   F0           MOVX    @DPTR,A
    450              txCsmaPrep();
   \   00006A                ; Setup parameters for call to function macRadioRandomByte
   \   00006A   12....       LCALL   ??macRadioRandomByte?relay
   \   00006D   75..01       MOV     ?V0 + 0,#0x1
   \   000070   75..00       MOV     ?V0 + 1,#0x0
   \   000073   90....       MOV     DPTR,#macTxBe
   \   000076   E0           MOVX    A,@DPTR
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   12....       LCALL   ?S_SHL
   \   00007C   E5..         MOV     A,?V0 + 0
   \   00007E   14           DEC     A
   \   00007F   59           ANL     A,R1
   \   000080   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   000083   F0           MOVX    @DPTR,A
   \   000084   90....       MOV     DPTR,#macTxType
   \   000087   E0           MOVX    A,@DPTR
   \   000088   7005         JNZ     ??macTxChannelBusyCallback_6
   \   00008A                ; Setup parameters for call to function macCspTxPrepCsmaSlotted
   \   00008A   12....       LCALL   ??macCspTxPrepCsmaSlotted?relay
   \   00008D   8003         SJMP    ??macTxChannelBusyCallback_7
   \                     ??macTxChannelBusyCallback_6:
   \   00008F                ; Setup parameters for call to function macCspTxPrepCsmaUnslotted
   \   00008F   12....       LCALL   ??macCspTxPrepCsmaUnslotted?relay
    451              macTxActive = MAC_TX_ACTIVE_GO;
   \                     ??macTxChannelBusyCallback_7:
   \   000092   90....       MOV     DPTR,#macTxActive
   \   000095   7483         MOV     A,#-0x7d
   \   000097   F0           MOVX    @DPTR,A
    452              txCsmaGo();
   \   000098   90....       MOV     DPTR,#macTxType
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   7024         JNZ     ??macTxChannelBusyCallback_8
   \   00009E                ; Setup parameters for call to function macDataTxTimeAvailable
   \   00009E   12....       LCALL   ??macDataTxTimeAvailable?relay
   \   0000A1   E9           MOV     A,R1
   \   0000A2   F8           MOV     R0,A
   \   0000A3   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   C3           CLR     C
   \   0000A8   98           SUBB    A,R0
   \   0000A9   4017         JC      ??macTxChannelBusyCallback_8
   \   0000AB   90....       MOV     DPTR,#txRetransmitFlag
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   90....       MOV     DPTR,#macTxActive
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4                ; Setup parameters for call to function macRxOffRequest
   \   0000B4   12....       LCALL   ??macRxOffRequest?relay
   \   0000B7                ; Setup parameters for call to function macRadioUpdateTxPower
   \   0000B7   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   0000BA                ; Setup parameters for call to function macRadioUpdateChannel
   \   0000BA   12....       LCALL   ??macRadioUpdateChannel?relay
   \   0000BD                ; Setup parameters for call to function macTxCompleteCallback
   \   0000BD   791C         MOV     R1,#0x1c
   \   0000BF   02....       LJMP    ??macTxChannelBusyCallback_2 & 0xFFFF
   \                     ??macTxChannelBusyCallback_8:
   \   0000C2                ; Setup parameters for call to function macCspTxGoCsma
   \   0000C2   12....       LCALL   ??macCspTxGoCsma?relay
    453            }
    454          }
   \                     ??macTxChannelBusyCallback_3:
   \   0000C5   02....       LJMP    ?Subroutine1 & 0xFFFF
    455          
    456          
    457          /**************************************************************************************************
    458           * @fn          macTxDoneCallback
    459           *
    460           * @brief       This callback is executed when transmit completes.
    461           *
    462           * @param       none
    463           *
    464           * @return      none
    465           **************************************************************************************************
    466           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          MAC_INTERNAL_API void macTxDoneCallback(void)
   \                     macTxDoneCallback:
    468          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    469            halIntState_t  s;
    470          
    471            /*
    472             *  There is a small chance this function could be called twice for a single transmit.
    473             *  To prevent logic from executing twice, the state variable macTxActive is used as
    474             *  a gating mechanism to guarantee single time execution.
    475             */
    476            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
    477            if (macTxActive == MAC_TX_ACTIVE_GO)
   \   00000C   90....       MOV     DPTR,#macTxActive
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6483         XRL     A,#0x83
   \   000012   702D         JNZ     ??macTxDoneCallback_0
    478            {
    479              /* see if ACK was requested */
    480              if (!txAckReq)
   \   000014   90....       MOV     DPTR,#txAckReq
   \   000017   E0           MOVX    A,@DPTR
   \   000018   701E         JNZ     ??macTxDoneCallback_1
    481              {
    482                macTxActive = MAC_TX_ACTIVE_DONE;
    483                HAL_EXIT_CRITICAL_SECTION(s);
   \   00001A   EE           MOV     A,R6
   \   00001B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001D   92AF         MOV     0xa8.7,C
    484          
    485                /* ACK was not requested, transmit is complete */
    486                txComplete(MAC_SUCCESS);
   \   00001F   90....       MOV     DPTR,#txRetransmitFlag
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   90....       MOV     DPTR,#macTxActive
   \   000027   F0           MOVX    @DPTR,A
   \   000028                ; Setup parameters for call to function macRxOffRequest
   \   000028   12....       LCALL   ??macRxOffRequest?relay
   \   00002B                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00002B   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   00002E                ; Setup parameters for call to function macRadioUpdateChannel
   \   00002E   12....       LCALL   ??macRadioUpdateChannel?relay
   \   000031                ; Setup parameters for call to function macTxCompleteCallback
   \   000031   7900         MOV     R1,#0x0
   \   000033   12....       LCALL   ??macTxCompleteCallback?relay
    487              }
   \   000036   800E         SJMP    ??macTxDoneCallback_2
    488              else
    489              {
    490                /*
    491                 *  ACK was requested - must wait to receive it.  A timer is set
    492                 *  to expire after the timeout duration for waiting for an ACK.
    493                 *  If an ACK is received, the function macTxAckReceived() is called.
    494                 *  If an ACK is not received within the timeout period,
    495                 *  the function macTxAckTimeoutCallback() is called.
    496                 */
    497                macTxActive = MAC_TX_ACTIVE_LISTEN_FOR_ACK;
   \                     ??macTxDoneCallback_1:
   \   000038   90....       MOV     DPTR,#macTxActive
   \   00003B   7486         MOV     A,#-0x7a
   \   00003D   F0           MOVX    @DPTR,A
    498                MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK();
   \   00003E                ; Setup parameters for call to function macCspTxRequestAckTimeoutCallback
   \   00003E   12....       LCALL   ??macCspTxRequestAckTimeoutCallback?relay
    499                HAL_EXIT_CRITICAL_SECTION(s);
    500              }
    501            }
    502            else
    503            {
    504              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxDoneCallback_0:
   \   000041   EE           MOV     A,R6
   \   000042   A2E0         MOV     C,0xE0 /* A   */.0
   \   000044   92AF         MOV     0xa8.7,C
    505            }
    506          }
   \                     ??macTxDoneCallback_2:
   \   000046                REQUIRE ?Subroutine2
   \   000046                REQUIRE _A_IEN0
   \   000046                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    507          
    508          
    509          /**************************************************************************************************
    510           * @fn          macTxAckReceivedCallback
    511           *
    512           * @brief       This function is called by the receive logic when an ACK is received and
    513           *              transmit logic is listening for an ACK.
    514           *
    515           * @param       seqn        - sequence number of received ACK
    516           * @param       pendingFlag - set if pending flag of ACK is set, cleared otherwise
    517           *
    518           * @return      none
    519           **************************************************************************************************
    520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          MAC_INTERNAL_API void macTxAckReceivedCallback(uint8 seqn, uint8 pendingFlag)
   \                     macTxAckReceivedCallback:
    522          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    523            halIntState_t  s;
    524          
    525            /* only process if listening for an ACK; critical section prevents race condition problems */
    526            HAL_ENTER_CRITICAL_SECTION(s);
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   C2AF         CLR     0xa8.7
    527            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   000011   90....       MOV     DPTR,#macTxActive
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6486         XRL     A,#0x86
   \   000017   7058         JNZ     ??macTxAckReceivedCallback_0
    528            {
    529              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000019   7487         MOV     A,#-0x79
   \   00001B   F0           MOVX    @DPTR,A
    530              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
   \   00001C                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   00001C   12....       LCALL   ??macCspTxCancelAckTimeoutCallback?relay
    531              HAL_EXIT_CRITICAL_SECTION(s);
   \   00001F   E5..         MOV     A,?V0 + 0
   \   000021   A2E0         MOV     C,0xE0 /* A   */.0
   \   000023   92AF         MOV     0xa8.7,C
    532          
    533              /* see if the sequence number of received ACK matches sequence number of packet just sent */
    534              if (seqn == txSeqn)
   \   000025   90....       MOV     DPTR,#txSeqn
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6E           XRL     A,R6
   \   00002A   702F         JNZ     ??macTxAckReceivedCallback_1
    535              {
    536                /*
    537                 *  Sequence numbers match so transmit is successful.  Return appropriate
    538                 *  status based on the pending flag of the received ACK.
    539                 */
    540                if (pendingFlag)
   \   00002C   EF           MOV     A,R7
   \   00002D   90....       MOV     DPTR,#txRetransmitFlag
   \   000030   6016         JZ      ??macTxAckReceivedCallback_2
    541                {
    542                  txComplete(MAC_ACK_PENDING);
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   90....       MOV     DPTR,#macTxActive
   \   000037   F0           MOVX    @DPTR,A
   \   000038                ; Setup parameters for call to function macRxOffRequest
   \   000038   12....       LCALL   ??macRxOffRequest?relay
   \   00003B                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00003B   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   00003E                ; Setup parameters for call to function macRadioUpdateChannel
   \   00003E   12....       LCALL   ??macRadioUpdateChannel?relay
   \   000041                ; Setup parameters for call to function macTxCompleteCallback
   \   000041   791B         MOV     R1,#0x1b
   \                     ??macTxAckReceivedCallback_3:
   \   000043   12....       LCALL   ??macTxCompleteCallback?relay
    543                }
   \   000046   802F         SJMP    ??macTxAckReceivedCallback_4
    544                else
    545                {
    546                  txComplete(MAC_SUCCESS);
   \                     ??macTxAckReceivedCallback_2:
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   90....       MOV     DPTR,#macTxActive
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E                ; Setup parameters for call to function macRxOffRequest
   \   00004E   12....       LCALL   ??macRxOffRequest?relay
   \   000051                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000051   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   000054                ; Setup parameters for call to function macRadioUpdateChannel
   \   000054   12....       LCALL   ??macRadioUpdateChannel?relay
   \   000057                ; Setup parameters for call to function macTxCompleteCallback
   \   000057   7900         MOV     R1,#0x0
   \   000059   80E8         SJMP    ??macTxAckReceivedCallback_3
    547                }
    548              }
    549              else
    550              {
    551                /* sequence number did not match; per spec, transmit failed at this point */
    552                txComplete(MAC_NO_ACK);
   \                     ??macTxAckReceivedCallback_1:
   \   00005B   90....       MOV     DPTR,#txRetransmitFlag
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   90....       MOV     DPTR,#macTxActive
   \   000063   F0           MOVX    @DPTR,A
   \   000064                ; Setup parameters for call to function macRxOffRequest
   \   000064   12....       LCALL   ??macRxOffRequest?relay
   \   000067                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000067   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   00006A                ; Setup parameters for call to function macRadioUpdateChannel
   \   00006A   12....       LCALL   ??macRadioUpdateChannel?relay
   \   00006D                ; Setup parameters for call to function macTxCompleteCallback
   \   00006D   79E9         MOV     R1,#-0x17
   \   00006F   80D2         SJMP    ??macTxAckReceivedCallback_3
    553              }
    554            }
    555            else
    556            {
    557              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckReceivedCallback_0:
   \   000071   E5..         MOV     A,?V0 + 0
   \   000073   A2E0         MOV     C,0xE0 /* A   */.0
   \   000075   92AF         MOV     0xa8.7,C
    558            }
    559          }
   \                     ??macTxAckReceivedCallback_4:
   \   000077   80..         SJMP    ?Subroutine2
   \   000079                REQUIRE _A_IEN0
    560          
    561          
    562          /**************************************************************************************************
    563           * @fn          macTxAckNotReceivedCallback
    564           *
    565           * @brief       This function is called by the receive logic when transmit is listening
    566           *              for an ACK but something else is received.  It is also called if the
    567           *              listen-for-ACK timeout is reached.
    568           *
    569           * @brief
    570           *
    571           * @param       none
    572           *
    573           * @return      none
    574           **************************************************************************************************
    575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    576          MAC_INTERNAL_API void macTxAckNotReceivedCallback(void)
   \                     macTxAckNotReceivedCallback:
    577          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    578            halIntState_t  s;
    579          
    580            /* only process if listening for an ACK; critical section prevents race condition problems */
    581            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
    582            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   00000C   90....       MOV     DPTR,#macTxActive
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6486         XRL     A,#0x86
   \   000012   7024         JNZ     ??macTxAckNotReceivedCallback_0
    583            {
    584              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000014   7487         MOV     A,#-0x79
   \   000016   F0           MOVX    @DPTR,A
    585              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
   \   000017                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   000017   12....       LCALL   ??macCspTxCancelAckTimeoutCallback?relay
    586              HAL_EXIT_CRITICAL_SECTION(s);
   \   00001A   EE           MOV     A,R6
   \   00001B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001D   92AF         MOV     0xa8.7,C
    587          
    588              /* a non-ACK was received when expecting an ACK, per spec transmit is over at this point */
    589              txComplete(MAC_NO_ACK);
   \   00001F   90....       MOV     DPTR,#txRetransmitFlag
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   90....       MOV     DPTR,#macTxActive
   \   000027   F0           MOVX    @DPTR,A
   \   000028                ; Setup parameters for call to function macRxOffRequest
   \   000028   12....       LCALL   ??macRxOffRequest?relay
   \   00002B                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00002B   12....       LCALL   ??macRadioUpdateTxPower?relay
   \   00002E                ; Setup parameters for call to function macRadioUpdateChannel
   \   00002E   12....       LCALL   ??macRadioUpdateChannel?relay
   \   000031                ; Setup parameters for call to function macTxCompleteCallback
   \   000031   79E9         MOV     R1,#-0x17
   \   000033   12....       LCALL   ??macTxCompleteCallback?relay
    590            }
   \   000036   8005         SJMP    ??macTxAckNotReceivedCallback_1
    591            else
    592            {
    593              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckNotReceivedCallback_0:
   \   000038   EE           MOV     A,R6
   \   000039   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003B   92AF         MOV     0xa8.7,C
    594            }
    595          }
   \                     ??macTxAckNotReceivedCallback_1:
   \   00003D   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   000040                REQUIRE _A_IEN0
    596          
    597          
    598          /*=================================================================================================
    599           * @fn          txComplete
    600           *
    601           * @brief       Transmit has completed.  Perform needed maintenance and return status of
    602           *              the transmit via callback function.
    603           *
    604           * @param       status - status of the transmit that just went out
    605           *
    606           * @return      none
    607           *=================================================================================================
    608           */
    609          static void txComplete(uint8 status)
    610          {
    611            /* reset the retransmit flag */
    612            txRetransmitFlag = 0;
    613          
    614            /* update tx state; turn off receiver if nothing is keeping it on */
    615            macTxActive = MAC_TX_ACTIVE_NO_ACTIVITY;
    616          
    617            /* turn off receive if allowed */
    618            macRxOffRequest();
    619          
    620            /* update transmit power in case there was a change */
    621            macRadioUpdateTxPower();
    622          
    623            /*
    624             *  Channel cannot change during transmit so update it here.  (Channel *can* change during
    625             *  a receive.  The update function resets receive logic and any partially received
    626             *  frame is purged.)
    627             */
    628            macRadioUpdateChannel();
    629          
    630            /* return status of transmit via callback function */
    631            macTxCompleteCallback(status);
    632          }
    633          
    634          
    635          /**************************************************************************************************
    636           * @fn          macTxTimestampCallback
    637           *
    638           * @brief       This callback function records the timestamp into the receive data structure.
    639           *              It should be called as soon as possible after there is a valid timestamp.
    640           *
    641           * @param       none
    642           *
    643           * @return      none
    644           **************************************************************************************************
    645           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    646          MAC_INTERNAL_API void macTxTimestampCallback(void)
   \                     macTxTimestampCallback:
    647          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    648            MAC_ASSERT(pMacDataTx != NULL); /* transmit structure must be there */
   \   000005   90....       MOV     DPTR,#pMacDataTx
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   7003         JNZ     ??macTxTimestampCallback_0
   \   000011                ; Setup parameters for call to function halAssertHandler
   \   000011   12....       LCALL   ??halAssertHandler?relay
    649          
    650            pMacDataTx->internal.timestamp  = macBackoffTimerCapture();
   \                     ??macTxTimestampCallback_0:
   \   000014                ; Setup parameters for call to function macBackoffTimerCapture
   \   000014   12....       LCALL   ??macBackoffTimerCapture?relay
   \   000017   8A..         MOV     ?V0 + 0,R2
   \   000019   8B..         MOV     ?V0 + 1,R3
   \   00001B   8C..         MOV     ?V0 + 2,R4
   \   00001D   8D..         MOV     ?V0 + 3,R5
   \   00001F   90....       MOV     DPTR,#pMacDataTx
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8882         MOV     DPL,R0
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?L_MOV_TO_X
    651            pMacDataTx->internal.timestamp2 = MAC_RADIO_TIMER_CAPTURE();
   \   000034                ; Setup parameters for call to function macMcuTimerCapture
   \   000034   12....       LCALL   ??macMcuTimerCapture?relay
   \   000037   8A..         MOV     ?V0 + 0,R2
   \   000039   90....       MOV     DPTR,#pMacDataTx
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F583         MOV     DPH,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   EB           MOV     A,R3
   \   000052   F0           MOVX    @DPTR,A
    652          }
   \   000053   7F04         MOV     R7,#0x4
   \   000055   02....       LJMP    ?BANKED_LEAVE_XDATA
    653          
    654          
    655          /**************************************************************************************************
    656           * @fn          macTxCollisionWithRxCallback
    657           *
    658           * @brief       Function called if transmit strobed on top of a receive.
    659           *
    660           * @param       none
    661           *
    662           * @return      none
    663           **************************************************************************************************
    664           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    665          MAC_INTERNAL_API void macTxCollisionWithRxCallback(void)
   \                     macTxCollisionWithRxCallback:
    666          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    667            macRxHaltCleanup();
   \   000004                ; Setup parameters for call to function macRxHaltCleanup
   \   000004   12....       LCALL   ??macRxHaltCleanup?relay
    668          }
   \   000007   02....       LJMP    ??Subroutine3_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxHaltCleanup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxFrameRetransmit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxFrameRetransmit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxStartQueuedFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxStartQueuedFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxChannelBusyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxChannelBusyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxDoneCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxAckReceivedCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxAckReceivedCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxAckNotReceivedCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxAckNotReceivedCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxTimestampCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxTimestampCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macTxCollisionWithRxCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macTxCollisionWithRxCallback
    669          
    670          
    671          
    672          /**************************************************************************************************
    673           *                                  Compile Time Integrity Checks
    674           **************************************************************************************************
    675           */
    676          #if (MAC_TX_ACTIVE_NO_ACTIVITY != 0x00)
    677          #error "ERROR! Zero is reserved value of macTxActive. Allows boolean operations, e.g !macTxActive."
    678          #endif
    679          
    680          /**************************************************************************************************
    681          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     macTxAckNotReceivedCallback        0      0      9
       -> macCspTxCancelAckTimeoutCallback
                                        0      0     18
       -> macRxOffRequest               0      0     18
       -> macRadioUpdateTxPower         0      0     18
       -> macRadioUpdateChannel         0      0     18
       -> macTxCompleteCallback         0      0     18
     macTxAckReceivedCallback           0      0      9
       -> macCspTxCancelAckTimeoutCallback
                                        0      0     18
       -> macRxOffRequest               0      0     18
       -> macRadioUpdateTxPower         0      0     18
       -> macRadioUpdateChannel         0      0     18
       -> macTxCompleteCallback         0      0     18
       -> macRxOffRequest               0      0     18
       -> macRadioUpdateTxPower         0      0     18
       -> macRadioUpdateChannel         0      0     18
       -> macTxCompleteCallback         0      0     18
       -> macRxOffRequest               0      0     18
       -> macRadioUpdateTxPower         0      0     18
       -> macRadioUpdateChannel         0      0     18
       -> macTxCompleteCallback         0      0     18
     macTxChannelBusyCallback           0      0     10
       -> halAssertHandler              0      0     20
       -> macRxOffRequest               0      0     20
       -> macRxOffRequest               0      0     20
       -> macRadioUpdateTxPower         0      0     20
       -> macRadioUpdateChannel         0      0     20
       -> macTxCompleteCallback         0      0     20
       -> macRadioRandomByte            0      0     20
       -> macCspTxPrepCsmaSlotted       0      0     20
       -> macCspTxPrepCsmaUnslotted     0      0     20
       -> macDataTxTimeAvailable        0      0     20
       -> macRxOffRequest               0      0     20
       -> macRadioUpdateTxPower         0      0     20
       -> macRadioUpdateChannel         0      0     20
       -> macTxCompleteCallback         0      0     20
       -> macCspTxGoCsma                0      0     20
     macTxCollisionWithRxCallback       2      0      0
       -> macRxHaltCleanup              4      0      0
     macTxDoneCallback                  0      0      9
       -> macRxOffRequest               0      0     18
       -> macRadioUpdateTxPower         0      0     18
       -> macRadioUpdateChannel         0      0     18
       -> macTxCompleteCallback         0      0     18
       -> macCspTxRequestAckTimeoutCallback
                                        0      0     18
     macTxFrame                         1      0     10
       -> halAssertHandler              0      0     20
       -> macRxOffRequest               0      0     20
       -> macRadioUpdateTxPower         0      0     20
       -> macRadioUpdateChannel         0      0     20
       -> macTxCompleteCallback         0      0     20
       -> macCspTxPrepSlotted           0      0     20
       -> halAssertHandler              0      0     20
       -> macRadioRandomByte            0      0     20
       -> macCspTxPrepCsmaSlotted       0      0     20
       -> macCspTxPrepCsmaUnslotted     0      0     20
       -> halAssertHandler              0      0     20
       -> macMemWriteTxFifo             0      0     20
       -> macCspTxGoSlotted             0      0     20
       -> macDataTxTimeAvailable        0      0     20
       -> macRxOffRequest               0      0     20
       -> macRadioUpdateTxPower         0      0     20
       -> macRadioUpdateChannel         0      0     20
       -> macTxCompleteCallback         0      0     20
       -> macCspTxGoCsma                0      0     20
     macTxFrameRetransmit               2      0      0
       -> macTxFrame                    4      0      0
     macTxHaltCleanup                   2      0      0
       -> macCspTxReset                 4      0      0
     macTxInit                          2      0      0
     macTxStartQueuedFrame              2      0      0
       -> halAssertHandler              4      0      0
       -> macCspTxGoSlotted             4      0      0
       -> macDataTxTimeAvailable        4      0      0
       -> macRxOffRequest               4      0      0
       -> macRadioUpdateTxPower         4      0      0
       -> macRadioUpdateChannel         4      0      0
       -> macTxCompleteCallback         4      0      0
       -> macCspTxGoCsma                4      0      0
     macTxTimestampCallback             0      0     12
       -> halAssertHandler              0      0     24
       -> macBackoffTimerCapture        0      0     24
       -> macMcuTimerCapture            0      0     24


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     _A_IEN0                                 1
     RFST                                    1
     macTxSlottedDelay                       1
     macTxActive                             1
     macTxType                               1
     macTxBe                                 1
     macTxCsmaBackoffDelay                   1
     nb                                      1
     txSeqn                                  1
     txAckReq                                1
     txRetransmitFlag                        1
     macTxInit                               7
     ?Subroutine0                            9
     ??Subroutine3_0                         7
     macTxHaltCleanup                       10
     macTxFrame                            417
     ?Subroutine1                            5
     macTxFrameRetransmit                   20
     macTxStartQueuedFrame                 120
     macTxChannelBusyCallback              200
     macTxDoneCallback                      70
     ?Subroutine2                            5
     macTxAckReceivedCallback              121
     macTxAckNotReceivedCallback            64
     macTxTimestampCallback                 88
     macTxCollisionWithRxCallback           10
     ??macTxInit?relay                       6
     ??macTxHaltCleanup?relay                6
     ??macTxFrame?relay                      6
     ??macTxFrameRetransmit?relay            6
     ??macTxStartQueuedFrame?relay           6
     ??macTxChannelBusyCallback?relay        6
     ??macTxDoneCallback?relay               6
     ??macTxAckReceivedCallback?relay        6
     ??macTxAckNotReceivedCallback?relay     6
     ??macTxTimestampCallback?relay          6
     ??macTxCollisionWithRxCallback?relay    6

 
 1 153 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
     1 byte  in segment XDATA_ROM_C
     8 bytes in segment XDATA_Z
 
 1 219 bytes of CODE  memory
     1 byte  of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)
     8 bytes of XDATA memory

Errors: none
Warnings: none
