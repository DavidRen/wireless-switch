###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:48 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\mt\MT_AF.c                                  #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\mt\MT_AF.c" -D ZIGBEEPRO -D ZTOOL_P1 -D    #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\MT_AF.lst                                   #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\MT_AF.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2010-01-08 16:52:37 -0800 (Fri, 08 Jan 2010) $
      4            Revision:       $Revision: 21471 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_AF.h"
     49          #include "MT_ZDO.h"
     50          #include "nwk.h"
     51          #include "OnBoard.h"
     52          #include "MT_UART.h"
     53          
     54          #if defined INTER_PAN
     55          #include "stub_aps.h"
     56          #endif
     57          
     58          /***************************************************************************************************
     59           * GLOBAL VARIABLES
     60           ***************************************************************************************************/
     61          
     62          #if defined ( MT_AF_CB_FUNC )
     63          uint16 _afCallbackSub;
     64          #endif
     65          
     66          /***************************************************************************************************
     67           * LOCAL FUNCTIONS
     68           ***************************************************************************************************/
     69          void MT_AfRegister(uint8 *pBuf);
     70          void MT_AfDataRequest(uint8 *pBuf);
     71          
     72          #if defined ( ZIGBEE_SOURCE_ROUTING )
     73          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
     74          #endif
     75          
     76          #if defined INTER_PAN
     77          static void MT_AfInterPanCtl(uint8 *pBuf);
     78          #endif
     79          
     80          /***************************************************************************************************
     81           * @fn      MT_afCommandProcessing
     82           *
     83           * @brief   Process all the AF commands that are issued by test tool
     84           *
     85           * @param   pBuf - pointer to the received buffer
     86           *
     87           * @return  status
     88           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
     90          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
     91            uint8 status = MT_RPC_SUCCESS;
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
     92          
     93            switch (pBuf[MT_RPC_POS_CMD1])
   \   000011   EE           MOV     A,R6
   \   000012   2402         ADD     A,#0x2
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   3400         ADDC    A,#0x0
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   600B         JZ      ??MT_AfCommandProcessing_0
   \   000020   14           DEC     A
   \   000021   607B         JZ      ??MT_AfCommandProcessing_1
   \   000023   14           DEC     A
   \   000024   6078         JZ      ??MT_AfCommandProcessing_1
   \   000026   14           DEC     A
   \   000027   607A         JZ      ??MT_AfCommandProcessing_2
   \   000029   807D         SJMP    ??MT_AfCommandProcessing_3
     94            {
     95              case MT_AF_REGISTER:
     96                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   7410         MOV     A,#0x10
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 3,A
   \   00003B                ; Setup parameters for call to function osal_mem_alloc
   \   00003B   7A06         MOV     R2,#0x6
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   12....       LCALL   ??osal_mem_alloc?relay
   \   000042   8A..         MOV     ?V0 + 0,R2
   \   000044   8B..         MOV     ?V0 + 1,R3
   \   000046   EA           MOV     A,R2
   \   000047   45..         ORL     A,?V0 + 1
   \   000049   603E         JZ      ??MT_AfCommandProcessing_4
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   A3           INC     DPTR
   \   000050   74..         MOV     A,#MT_TaskID & 0xff
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000056   F0           MOVX    @DPTR,A
   \   000057                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000057   AC..         MOV     R4,?V0 + 0
   \   000059   AD..         MOV     R5,?V0 + 1
   \   00005B   EE           MOV     A,R6
   \   00005C   2403         ADD     A,#0x3
   \   00005E   FA           MOV     R2,A
   \   00005F   EF           MOV     A,R7
   \   000060   3400         ADDC    A,#0x0
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   ??MT_BuildEndpointDesc?relay
   \   000066   E9           MOV     A,R1
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   700F         JNZ     ??MT_AfCommandProcessing_5
   \   000070                ; Setup parameters for call to function afRegister
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??afRegister?relay
   \   000077   E9           MOV     A,R1
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   F0           MOVX    @DPTR,A
   \                     ??MT_AfCommandProcessing_5:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6007         JZ      ??MT_AfCommandProcessing_4
   \   000082                ; Setup parameters for call to function osal_mem_free
   \   000082   AA..         MOV     R2,?V0 + 0
   \   000084   AB..         MOV     R3,?V0 + 1
   \   000086   12....       LCALL   ??osal_mem_free?relay
   \                     ??MT_AfCommandProcessing_4:
   \   000089                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   7B01         MOV     R3,#0x1
   \   000095   AA..         MOV     R2,?V0 + 3
   \   000097   7964         MOV     R1,#0x64
   \   000099   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
     97                break;
   \   00009C   800D         SJMP    ??MT_AfCommandProcessing_6
     98          
     99              case MT_AF_DATA_REQUEST:
    100              case MT_AF_DATA_REQUEST_EXT:
    101                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   00009E                ; Setup parameters for call to function MT_AfDataRequest
   \   00009E   12....       LCALL   ??MT_AfDataRequest?relay
    102                break;
   \   0000A1   8008         SJMP    ??MT_AfCommandProcessing_6
    103                
    104          #if defined ( ZIGBEE_SOURCE_ROUTING )
    105              case MT_AF_DATA_REQUEST_SRCRTG:
    106                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   0000A3                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   0000A3   12....       LCALL   ??MT_AfDataRequestSrcRtg?relay
    107                break;
   \   0000A6   8003         SJMP    ??MT_AfCommandProcessing_6
    108          #endif
    109                
    110          #if defined INTER_PAN
    111              case MT_AF_INTER_PAN_CTL:
    112                MT_AfInterPanCtl(pBuf);
    113                break; 
    114          #endif
    115                
    116              default:
    117                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_3:
   \   0000A8   75..02       MOV     ?V0 + 2,#0x2
    118                break;
    119            }
    120          
    121            return status;
   \                     ??MT_AfCommandProcessing_6:
   \   0000AB   A9..         MOV     R1,?V0 + 2
   \   0000AD                REQUIRE ?Subroutine0
   \   0000AD                ; // Fall through to label ?Subroutine0
    122          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine1_0
   \   000002                ; // Fall through to label ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    123          
    124          /***************************************************************************************************
    125           * @fn      MT_AfRegister
    126           *
    127           * @brief   Process AF Register command
    128           *
    129           * @param   pBuf - pointer to the received buffer
    130           *
    131           * @return  none
    132           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    134          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    135            uint8 cmdId;
    136            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7410         MOV     A,#0x10
   \   000016   F0           MOVX    @DPTR,A
    137            endPointDesc_t *epDesc;
    138          
    139            /* parse header */
    140            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 2,A
    141            pBuf += MT_RPC_FRAME_HDR_SZ;
    142          
    143            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A06         MOV     R2,#0x6
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   ??osal_mem_alloc?relay
   \   000027   8A..         MOV     ?V0 + 4,R2
   \   000029   8B..         MOV     ?V0 + 5,R3
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
    144            if ( epDesc )
   \   00002F   EE           MOV     A,R6
   \   000030   4F           ORL     A,R7
   \   000031   6040         JZ      ??MT_AfRegister_0
    145            {
    146              epDesc->task_id = &MT_TaskID;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#MT_TaskID & 0xff
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   00003E   F0           MOVX    @DPTR,A
    147              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003F                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003F   EE           MOV     A,R6
   \   000040   FC           MOV     R4,A
   \   000041   EF           MOV     A,R7
   \   000042   FD           MOV     R5,A
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   2403         ADD     A,#0x3
   \   000047   FA           MOV     R2,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   ??MT_BuildEndpointDesc?relay
   \   000050   E9           MOV     A,R1
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   F0           MOVX    @DPTR,A
    148              if ( retValue == ZSuccess )
   \   000058   700F         JNZ     ??MT_AfRegister_1
    149              {
    150                retValue = afRegister( epDesc );
   \   00005A                ; Setup parameters for call to function afRegister
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??afRegister?relay
   \   000061   E9           MOV     A,R1
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   F0           MOVX    @DPTR,A
    151              }
    152          
    153              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6007         JZ      ??MT_AfRegister_0
    154              {
    155                osal_mem_free( epDesc );
   \   00006C                ; Setup parameters for call to function osal_mem_free
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??osal_mem_free?relay
    156              }
    157            }
    158          
    159            /* Build and send back the response */
    160            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   000073                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   7B01         MOV     R3,#0x1
   \   00007F   AA..         MOV     R2,?V0 + 2
   \   000081   7964         MOV     R1,#0x64
   \   000083   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    161          }
   \   000086   02....       LJMP    ?Subroutine0 & 0xFFFF
    162          
    163          /***************************************************************************************************
    164           * @fn      MT_AfDataRequest
    165           *
    166           * @brief   Process AF Register command
    167           *
    168           * @param   pBuf - pointer to the received buffer
    169           *
    170           * @return  none
    171           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    172          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    173          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    174            uint8 cmd0, cmd1, tempLen = 0;
    175            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    176            endPointDesc_t *epDesc;
    177            byte transId;
    178            afAddrType_t dstAddr;
    179            cId_t cId;
    180            byte txOpts, radius, srcEP;
    181          
    182            /* Parse header */
    183            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
    184            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FE           MOV     R6,A
    185            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000022   EA           MOV     A,R2
   \   000023   2403         ADD     A,#0x3
   \   000025   F5..         MOV     ?V0 + 4,A
   \   000027   EB           MOV     A,R3
   \   000028   3400         ADDC    A,#0x0
   \   00002A   F5..         MOV     ?V0 + 5,A
    186          
    187            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   00002C   85..82       MOV     DPL,?V0 + 4
   \   00002F   F583         MOV     DPH,A
   \   000031   A3           INC     DPTR
   \   000032   8582..       MOV     ?V0 + 0,DPL
   \   000035   8583..       MOV     ?V0 + 1,DPH
   \   000038   7402         MOV     A,#0x2
   \   00003A   6E           XRL     A,R6
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??MT_AfDataRequest_0 & 0xFFFF
    188            {
    189              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000040   85..82       MOV     DPL,?V0 + 4
   \   000043   85..83       MOV     DPH,?V0 + 5
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   740A         MOV     A,#0xa
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   85....       MOV     ?V0 + 4,?V0 + 0
   \   000052   85....       MOV     ?V0 + 5,?V0 + 1
    190          
    191              if (dstAddr.addrMode == afAddr64Bit)
   \   000055   7403         MOV     A,#0x3
   \   000057   68           XRL     A,R0
   \   000058   701F         JNZ     ??MT_AfDataRequest_1
    192              {
    193                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   75..00       MOV     ?V0 + 2,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000062   7C08         MOV     R4,#0x8
   \   000064   7D00         MOV     R5,#0x0
   \   000066   7405         MOV     A,#0x5
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??osal_memcpy?relay
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   8017         SJMP    ??MT_AfDataRequest_2
    194              }
    195              else
    196              {
    197                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_1:
   \   000079   85..82       MOV     DPL,?V0 + 4
   \   00007C   85..83       MOV     DPH,?V0 + 5
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FA           MOV     R2,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   EA           MOV     A,R2
   \   000085   F8           MOV     R0,A
   \   000086   7402         MOV     A,#0x2
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E8           MOV     A,R0
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   E9           MOV     A,R1
   \   00008F   F0           MOVX    @DPTR,A
    198              }
    199              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_AfDataRequest_2:
   \   000090   E5..         MOV     A,?V0 + 4
   \   000092   2408         ADD     A,#0x8
   \   000094   F5..         MOV     ?V0 + 4,A
   \   000096   E5..         MOV     A,?V0 + 5
   \   000098   3400         ADDC    A,#0x0
   \   00009A   F5..         MOV     ?V0 + 5,A
    200          
    201              dstAddr.endPoint = *pBuf++;
   \   00009C   85..82       MOV     DPL,?V0 + 4
   \   00009F   F583         MOV     DPH,A
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   C0E0         PUSH    A
   \   0000A4   740B         MOV     A,#0xb
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   85..82       MOV     DPL,?V0 + 4
   \   0000AF   85..83       MOV     DPH,?V0 + 5
   \   0000B2   A3           INC     DPTR
   \   0000B3   8582..       MOV     ?V0 + 4,DPL
   \   0000B6   8583..       MOV     ?V0 + 5,DPH
    202              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FA           MOV     R2,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   EA           MOV     A,R2
   \   0000BF   F8           MOV     R0,A
   \   0000C0   740C         MOV     A,#0xc
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E8           MOV     A,R0
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E9           MOV     A,R1
   \   0000C9   F0           MOVX    @DPTR,A
    203              pBuf += 2;
   \   0000CA   E5..         MOV     A,?V0 + 4
   \   0000CC   2402         ADD     A,#0x2
   \   0000CE   F5..         MOV     ?V0 + 4,A
   \   0000D0   E5..         MOV     A,?V0 + 5
   \   0000D2   3400         ADDC    A,#0x0
   \   0000D4   F5..         MOV     ?V0 + 5,A
   \   0000D6   8056         SJMP    ??MT_AfDataRequest_3
    204            }
    205            else
    206            {
    207              /* Destination address */
    208              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_0:
   \   0000D8   740A         MOV     A,#0xa
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   F0           MOVX    @DPTR,A
    209              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000E0   85..82       MOV     DPL,?V0 + 4
   \   0000E3   85..83       MOV     DPH,?V0 + 5
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   FA           MOV     R2,A
   \   0000E8   85..82       MOV     DPL,?V0 + 0
   \   0000EB   85..83       MOV     DPH,?V0 + 1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   EA           MOV     A,R2
   \   0000F1   F8           MOV     R0,A
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   E8           MOV     A,R0
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E9           MOV     A,R1
   \   0000FB   F0           MOVX    @DPTR,A
    210              pBuf += 2;
   \   0000FC   E5..         MOV     A,?V0 + 4
   \   0000FE   2402         ADD     A,#0x2
   \   000100   F5..         MOV     ?V0 + 4,A
   \   000102   E5..         MOV     A,?V0 + 5
   \   000104   3400         ADDC    A,#0x0
   \   000106   F5..         MOV     ?V0 + 5,A
    211          
    212              /* Destination endpoint */
    213              dstAddr.endPoint = *pBuf++;
   \   000108   85..82       MOV     DPL,?V0 + 4
   \   00010B   F583         MOV     DPH,A
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   740B         MOV     A,#0xb
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   D0E0         POP     A
   \   000117   F0           MOVX    @DPTR,A
   \   000118   85..82       MOV     DPL,?V0 + 4
   \   00011B   85..83       MOV     DPH,?V0 + 5
   \   00011E   A3           INC     DPTR
   \   00011F   8582..       MOV     ?V0 + 4,DPL
   \   000122   8583..       MOV     ?V0 + 5,DPH
    214              dstAddr.panId = 0;
   \   000125   740C         MOV     A,#0xc
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   E4           CLR     A
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   F0           MOVX    @DPTR,A
    215            }
    216          
    217            /* Source endpoint */
    218            srcEP = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   00012E   85..82       MOV     DPL,?V0 + 4
   \   000131   85..83       MOV     DPH,?V0 + 5
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F9           MOV     R1,A
   \   000136   A3           INC     DPTR
   \   000137   8582..       MOV     ?V0 + 4,DPL
   \   00013A   8583..       MOV     ?V0 + 5,DPH
    219            epDesc = afFindEndPointDesc( srcEP );
   \   00013D                ; Setup parameters for call to function afFindEndPointDesc
   \   00013D   12....       LCALL   ??afFindEndPointDesc?relay
   \   000140   8A..         MOV     ?V0 + 0,R2
   \   000142   8B..         MOV     ?V0 + 1,R3
   \   000144   AC..         MOV     R4,?V0 + 0
   \   000146   AD..         MOV     R5,?V0 + 1
    220          
    221            /* ClusterId */
    222            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000148   85..82       MOV     DPL,?V0 + 4
   \   00014B   85..83       MOV     DPH,?V0 + 5
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   FA           MOV     R2,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   EA           MOV     A,R2
   \   000154   2400         ADD     A,#0x0
   \   000156   F5..         MOV     ?V0 + 2,A
   \   000158   E4           CLR     A
   \   000159   39           ADDC    A,R1
   \   00015A   F5..         MOV     ?V0 + 3,A
    223            pBuf +=2;
   \   00015C   E5..         MOV     A,?V0 + 4
   \   00015E   2402         ADD     A,#0x2
   \   000160   F5..         MOV     ?V0 + 4,A
   \   000162   E5..         MOV     A,?V0 + 5
   \   000164   3400         ADDC    A,#0x0
   \   000166   F5..         MOV     ?V0 + 5,A
    224          
    225            /* TransId */
    226            transId = *pBuf++;
   \   000168   85..82       MOV     DPL,?V0 + 4
   \   00016B   F583         MOV     DPH,A
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C0E0         PUSH    A
   \   000170   7401         MOV     A,#0x1
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   D0E0         POP     A
   \   000177   F0           MOVX    @DPTR,A
   \   000178   85..82       MOV     DPL,?V0 + 4
   \   00017B   85..83       MOV     DPH,?V0 + 5
   \   00017E   A3           INC     DPTR
    227          
    228            /* TxOption */
    229            txOpts = *pBuf++;
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F9           MOV     R1,A
   \   000181   A3           INC     DPTR
    230          
    231            /* Radius */
    232            radius = *pBuf++;
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F8           MOV     R0,A
   \   000184   A3           INC     DPTR
    233          
    234            /* Length */
    235            tempLen = *pBuf++;
   \   000185   E0           MOVX    A,@DPTR
   \   000186   FA           MOV     R2,A
   \   000187   A3           INC     DPTR
   \   000188   8582..       MOV     ?V0 + 4,DPL
   \   00018B   8583..       MOV     ?V0 + 5,DPH
    236          
    237            if ( epDesc == NULL )
   \   00018E   EC           MOV     A,R4
   \   00018F   4D           ORL     A,R5
   \   000190   700A         JNZ     ??MT_AfDataRequest_4
    238            {
    239              retValue = afStatus_INVALID_PARAMETER;
   \   000192   85..82       MOV     DPL,?XSP + 0
   \   000195   85..83       MOV     DPH,?XSP + 1
   \   000198   7402         MOV     A,#0x2
   \   00019A   8044         SJMP    ??MT_AfDataRequest_5
    240            }
    241            else
    242            {
    243              retValue = AF_DataRequest( &dstAddr, epDesc, cId, tempLen, pBuf, &transId, txOpts, radius );
   \                     ??MT_AfDataRequest_4:
   \   00019C                ; Setup parameters for call to function AF_DataRequest
   \   00019C   E8           MOV     A,R0
   \   00019D   F5..         MOV     ?V0 + 0,A
   \   00019F   78..         MOV     R0,#?V0 + 0
   \   0001A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A4   7402         MOV     A,#0x2
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   8582..       MOV     ?V0 + 0,DPL
   \   0001AC   8583..       MOV     ?V0 + 1,DPH
   \   0001AF   78..         MOV     R0,#?V0 + 0
   \   0001B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B4   78..         MOV     R0,#?V0 + 4
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   8A..         MOV     ?V0 + 0,R2
   \   0001BB   75..00       MOV     ?V0 + 1,#0x0
   \   0001BE   78..         MOV     R0,#?V0 + 0
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C3   78..         MOV     R0,#?V0 + 2
   \   0001C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C8   740B         MOV     A,#0xb
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   AA82         MOV     R2,DPL
   \   0001CF   AB83         MOV     R3,DPH
   \   0001D1   12....       LCALL   ??AF_DataRequest?relay
   \   0001D4   7409         MOV     A,#0x9
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9   E9           MOV     A,R1
   \   0001DA   85..82       MOV     DPL,?XSP + 0
   \   0001DD   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_5:
   \   0001E0   F0           MOVX    @DPTR,A
    244            }
    245          
    246            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   0001E1   74E0         MOV     A,#-0x20
   \   0001E3   5F           ANL     A,R7
   \   0001E4   6420         XRL     A,#0x20
   \   0001E6   700D         JNZ     ??MT_AfDataRequest_6
    247            {
    248              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0001E8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001E8   AC82         MOV     R4,DPL
   \   0001EA   AD83         MOV     R5,DPH
   \   0001EC   7B01         MOV     R3,#0x1
   \   0001EE   EE           MOV     A,R6
   \   0001EF   FA           MOV     R2,A
   \   0001F0   7964         MOV     R1,#0x64
   \   0001F2   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    249            }
    250          }
   \                     ??MT_AfDataRequest_6:
   \   0001F5   740E         MOV     A,#0xe
   \   0001F7   02....       LJMP    ??Subroutine1_0 & 0xFFFF
    251          
    252          
    253          #if defined ( ZIGBEE_SOURCE_ROUTING )
    254          
    255          /***************************************************************************************************
    256           * @fn      MT_AfDataRequestSrcRtg
    257           *
    258           * @brief   Process AF Register command
    259           *
    260           * @param   pBuf - pointer to the received buffer
    261           *
    262           * @return  none
    263           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    265          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    266            uint8 cmdId, dataLen = 0;
    267            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    268            endPointDesc_t *epDesc;
    269            byte transId;
    270            afAddrType_t dstAddr;
    271            cId_t cId;
    272            byte txOpts, radius, srcEP, relayCnt;
    273            uint16 *pRelayList;
    274            uint8 i;
    275          
    276            /* parse header */
    277            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 12,A
    278            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV     A,R6
   \   000021   2403         ADD     A,#0x3
   \   000023   0E           INC     R6
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   EF           MOV     A,R7
   \   000027   3400         ADDC    A,#0x0
   \   000029   FF           MOV     R7,A
    279          
    280            /* Destination address */
    281            /* Initialize the panID field to zero to avoid inter-pan */
    282            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) ); 
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV     R4,#0xc
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   7900         MOV     R1,#0x0
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   AA82         MOV     R2,DPL
   \   000037   AB83         MOV     R3,DPH
   \   000039   12....       LCALL   ??osal_memset?relay
    283            dstAddr.addrMode = afAddr16Bit;
   \   00003C   740A         MOV     A,#0xa
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7402         MOV     A,#0x2
   \   000043   F0           MOVX    @DPTR,A
    284            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   EA           MOV     A,R2
   \   00004E   F8           MOV     R0,A
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E9           MOV     A,R1
   \   000058   F0           MOVX    @DPTR,A
    285            pBuf += 2;
   \   000059   EE           MOV     A,R6
   \   00005A   2402         ADD     A,#0x2
   \   00005C   0E           INC     R6
   \   00005D   0E           INC     R6
   \   00005E   EF           MOV     A,R7
   \   00005F   3400         ADDC    A,#0x0
   \   000061   FF           MOV     R7,A
    286          
    287            /* Destination endpoint */
    288            dstAddr.endPoint = *pBuf++;
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C0E0         PUSH    A
   \   000069   740B         MOV     A,#0xb
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   D0E0         POP     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
    289          
    290            /* Source endpoint */
    291            srcEP = *pBuf++;
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   A3           INC     DPTR
   \   000079   AE82         MOV     R6,DPL
   \   00007B   AF83         MOV     R7,DPH
    292            epDesc = afFindEndPointDesc( srcEP );
   \   00007D                ; Setup parameters for call to function afFindEndPointDesc
   \   00007D   12....       LCALL   ??afFindEndPointDesc?relay
   \   000080   8A..         MOV     ?V0 + 2,R2
   \   000082   8B..         MOV     ?V0 + 3,R3
    293          
    294            /* ClusterId */
    295            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FA           MOV     R2,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   EA           MOV     A,R2
   \   00008E   2400         ADD     A,#0x0
   \   000090   F5..         MOV     ?V0 + 6,A
   \   000092   E4           CLR     A
   \   000093   39           ADDC    A,R1
   \   000094   F5..         MOV     ?V0 + 7,A
    296            pBuf +=2;
   \   000096   EE           MOV     A,R6
   \   000097   2402         ADD     A,#0x2
   \   000099   0E           INC     R6
   \   00009A   0E           INC     R6
   \   00009B   EF           MOV     A,R7
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   FF           MOV     R7,A
    297          
    298            /* TransId */
    299            transId = *pBuf++;
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   C0E0         PUSH    A
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
    300          
    301            /* TxOption */
    302            txOpts = *pBuf++;
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V0 + 5,A
   \   0000B6   A3           INC     DPTR
    303          
    304            /* Radius */
    305            radius = *pBuf++;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F5..         MOV     ?V0 + 8,A
   \   0000BA   A3           INC     DPTR
    306            
    307            /* Source route relay count */
    308            relayCnt = *pBuf++;
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F5..         MOV     ?V0 + 9,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   AE82         MOV     R6,DPL
   \   0000C1   AF83         MOV     R7,DPH
    309            
    310            /* Convert the source route relay list */
    311            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   0000C3                ; Setup parameters for call to function osal_mem_alloc
   \   0000C3   C3           CLR     C
   \   0000C4   33           RLC     A
   \   0000C5   FA           MOV     R2,A
   \   0000C6   E4           CLR     A
   \   0000C7   33           RLC     A
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   ??osal_mem_alloc?relay
   \   0000CC   8A..         MOV     ?V0 + 0,R2
   \   0000CE   8B..         MOV     ?V0 + 1,R3
   \   0000D0   EA           MOV     A,R2
   \   0000D1   45..         ORL     A,?V0 + 1
   \   0000D3   7003         JNZ     $+5
   \   0000D5   02....       LJMP    ??MT_AfDataRequestSrcRtg_0 & 0xFFFF
    312            {
    313              for( i = 0; i < relayCnt; i++ )
   \   0000D8   E5..         MOV     A,?V0 + 9
   \   0000DA   6030         JZ      ??MT_AfDataRequestSrcRtg_1
   \   0000DC   A8..         MOV     R0,?V0 + 0
   \   0000DE   A9..         MOV     R1,?V0 + 1
   \   0000E0   F5..         MOV     ?V0 + 4,A
    314              {
    315                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   FC           MOV     R4,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FB           MOV     R3,A
   \   0000EB   EC           MOV     A,R4
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   EB           MOV     A,R3
   \   0000F3   F0           MOVX    @DPTR,A
    316                pBuf += 2;
   \   0000F4   EE           MOV     A,R6
   \   0000F5   2402         ADD     A,#0x2
   \   0000F7   0E           INC     R6
   \   0000F8   0E           INC     R6
   \   0000F9   EF           MOV     A,R7
   \   0000FA   3400         ADDC    A,#0x0
   \   0000FC   FF           MOV     R7,A
    317              }
   \   0000FD   E8           MOV     A,R0
   \   0000FE   2402         ADD     A,#0x2
   \   000100   08           INC     R0
   \   000101   08           INC     R0
   \   000102   E9           MOV     A,R1
   \   000103   3400         ADDC    A,#0x0
   \   000105   F9           MOV     R1,A
   \   000106   15..         DEC     ?V0 + 4
   \   000108   E5..         MOV     A,?V0 + 4
   \   00010A   70D6         JNZ     ??MT_AfDataRequestSrcRtg_2
    318            
    319              /* Data payload Length */
    320              dataLen = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00010C   8E82         MOV     DPL,R6
   \   00010E   8F83         MOV     DPH,R7
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F9           MOV     R1,A
   \   000112   A3           INC     DPTR
   \   000113   AE82         MOV     R6,DPL
   \   000115   AF83         MOV     R7,DPH
    321          
    322              if ( epDesc == NULL )
   \   000117   E5..         MOV     A,?V0 + 2
   \   000119   45..         ORL     A,?V0 + 3
   \   00011B   700A         JNZ     ??MT_AfDataRequestSrcRtg_3
    323              {
    324                retValue = afStatus_INVALID_PARAMETER;
   \   00011D   85..82       MOV     DPL,?XSP + 0
   \   000120   85..83       MOV     DPH,?XSP + 1
   \   000123   7402         MOV     A,#0x2
   \   000125   8055         SJMP    ??MT_AfDataRequestSrcRtg_4
    325              }
    326              else
    327              {
    328                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf, 
    329                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000127                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   000127   78..         MOV     R0,#?V0 + 0
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012C   78..         MOV     R0,#?V0 + 9
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000131   78..         MOV     R0,#?V0 + 8
   \   000133   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000136   7405         MOV     A,#0x5
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   8582..       MOV     ?V0 + 8,DPL
   \   00013E   8583..       MOV     ?V0 + 9,DPH
   \   000141   78..         MOV     R0,#?V0 + 8
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000146   8E..         MOV     ?V0 + 8,R6
   \   000148   8F..         MOV     ?V0 + 9,R7
   \   00014A   78..         MOV     R0,#?V0 + 8
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014F   89..         MOV     ?V0 + 8,R1
   \   000151   75..00       MOV     ?V0 + 9,#0x0
   \   000154   78..         MOV     R0,#?V0 + 8
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   78..         MOV     R0,#?V0 + 6
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   A9..         MOV     R1,?V0 + 5
   \   000160   AC..         MOV     R4,?V0 + 2
   \   000162   AD..         MOV     R5,?V0 + 3
   \   000164   740E         MOV     A,#0xe
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   AA82         MOV     R2,DPL
   \   00016B   AB83         MOV     R3,DPH
   \   00016D   12....       LCALL   ??AF_DataRequestSrcRtg?relay
   \   000170   740C         MOV     A,#0xc
   \   000172   12....       LCALL   ?DEALLOC_XSTACK8
   \   000175   E9           MOV     A,R1
   \   000176   85..82       MOV     DPL,?XSP + 0
   \   000179   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   00017C   F0           MOVX    @DPTR,A
    330              }
    331              
    332              /* Free the memory allocated */
    333              osal_mem_free( pRelayList );
   \   00017D                ; Setup parameters for call to function osal_mem_free
   \   00017D   AA..         MOV     R2,?V0 + 0
   \   00017F   AB..         MOV     R3,?V0 + 1
   \   000181   12....       LCALL   ??osal_mem_free?relay
   \   000184   8009         SJMP    ??MT_AfDataRequestSrcRtg_5
    334            }
    335            else
    336            {
    337              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000186   85..82       MOV     DPL,?XSP + 0
   \   000189   85..83       MOV     DPH,?XSP + 1
   \   00018C   7410         MOV     A,#0x10
   \   00018E   F0           MOVX    @DPTR,A
    338            }
    339              
    340          
    341            /* Build and send back the response */
    342            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   00018F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00018F   85..82       MOV     DPL,?XSP + 0
   \   000192   85..83       MOV     DPH,?XSP + 1
   \   000195   AC82         MOV     R4,DPL
   \   000197   AD83         MOV     R5,DPH
   \   000199   7B01         MOV     R3,#0x1
   \   00019B   AA..         MOV     R2,?V0 + 12
   \   00019D   7964         MOV     R1,#0x64
   \   00019F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    343          }
   \   0001A2   740E         MOV     A,#0xe
   \   0001A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A7   7F0D         MOV     R7,#0xd
   \   0001A9   02....       LJMP    ?BANKED_LEAVE_XDATA
    344          #endif
    345          
    346          #if defined INTER_PAN
    347          /***************************************************************************************************
    348           * @fn      MT_AfInterPanCtl
    349           *
    350           * @brief   Process the AF Inter Pan control command.
    351           *
    352           * @param   pBuf - pointer to the received buffer
    353           *
    354           * @return  none
    355           ***************************************************************************************************/
    356          static void MT_AfInterPanCtl(uint8 *pBuf)
    357          {
    358            uint8 cmd, rtrn;
    359            uint16 panId;
    360            endPointDesc_t *pEP;
    361            
    362            cmd = pBuf[MT_RPC_POS_CMD1];
    363            pBuf += MT_RPC_FRAME_HDR_SZ;
    364          
    365            switch (*pBuf++)  // Inter-pan request parameter.
    366            {
    367            case InterPanClr:
    368              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    369              break;
    370          
    371            case InterPanSet:
    372              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    373              break;
    374          
    375            case InterPanReg:
    376              if ((pEP = afFindEndPointDesc(*pBuf)))
    377              {
    378                StubAPS_RegisterApp(pEP);
    379                rtrn = SUCCESS;
    380              }
    381              else
    382              {
    383                rtrn = FAILURE;
    384              }
    385              break;
    386          
    387            case InterPanChk:
    388              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    389              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    390              break;
    391          
    392            default:
    393              rtrn = afStatus_INVALID_PARAMETER;
    394              break;
    395            }
    396          
    397            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    398          }
    399          #endif
    400          
    401          /***************************************************************************************************
    402           * @fn      MT_AfDataConfirm
    403           *
    404           * @brief   Process
    405           *
    406           * @param   pBuf - pointer to the received buffer
    407           *
    408           * @return  none
    409           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    411          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    412            uint8 retArray[3];
    413          
    414            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    415            retArray[1] = pMsg->endpoint;
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C0E0         PUSH    A
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    416            retArray[2] = pMsg->transID;
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
    417          
    418            /* Build and send back the response */
    419            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000039                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   AC82         MOV     R4,DPL
   \   000041   AD83         MOV     R5,DPH
   \   000043   7B03         MOV     R3,#0x3
   \   000045   7A80         MOV     R2,#-0x80
   \   000047   7944         MOV     R1,#0x44
   \   000049   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    420          }
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   D083         POP     DPH
   \   000053   D082         POP     DPL
   \   000055   02....       LJMP    ?BRET
    421          
    422          /***************************************************************************************************
    423           * @fn          MT_AfIncomingMsg
    424           *
    425           * @brief       Process the callback subscription for AF Incoming data.
    426           *
    427           * @param       pkt - Incoming AF data.
    428           *
    429           * @return      none
    430           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    432          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    433            uint8 dataLen = pMsg->cmd.DataLength;  /* Length of the data section in the response packet */
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   F582         MOV     DPL,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 9,A
    434            uint8 respLen = 17 + dataLen;          /* Length of the whole response packet */
   \   000016   7411         MOV     A,#0x11
   \   000018   25..         ADD     A,?V0 + 9
   \   00001A   F5..         MOV     ?V0 + 10,A
    435            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001C   75..81       MOV     ?V0 + 8,#-0x7f
    436            uint8 *pRsp, *tempPtr;
    437          
    438          #if defined INTER_PAN
    439            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    440            {
    441              cmd = MT_AF_INCOMING_MSG_EXT;
    442            }
    443            else
    444          #endif
    445            if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   00001F   EA           MOV     A,R2
   \   000020   240E         ADD     A,#0xe
   \   000022   F5..         MOV     ?V0 + 4,A
   \   000024   EB           MOV     A,R3
   \   000025   3400         ADDC    A,#0x0
   \   000027   F5..         MOV     ?V0 + 5,A
   \   000029   85..82       MOV     DPL,?V0 + 4
   \   00002C   F583         MOV     DPH,A
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6403         XRL     A,#0x3
   \   000031   7009         JNZ     ??MT_AfIncomingMsg_0
    446            {
    447              cmd = MT_AF_INCOMING_MSG_EXT;
   \   000033   75..82       MOV     ?V0 + 8,#-0x7e
    448            }
    449          
    450            if (cmd == MT_AF_INCOMING_MSG_EXT)
    451            {
    452              respLen += 9;
   \   000036   7409         MOV     A,#0x9
   \   000038   25..         ADD     A,?V0 + 10
   \   00003A   F5..         MOV     ?V0 + 10,A
    453            }
    454          
    455            // Attempt to allocate memory for the response packet.
    456            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_0:
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   85....       MOV     ?V0 + 2,?V0 + 10
   \   00003F   AA..         MOV     R2,?V0 + 2
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ??osal_mem_alloc?relay
   \   000046   8A..         MOV     ?V0 + 2,R2
   \   000048   8B..         MOV     ?V0 + 3,R3
   \   00004A   EA           MOV     A,R2
   \   00004B   45..         ORL     A,?V0 + 3
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??MT_AfIncomingMsg_1 & 0xFFFF
    457            {
    458              return;
    459            }
    460            tempPtr = pRsp;
   \   000052   AE..         MOV     R6,?V0 + 2
   \   000054   AF..         MOV     R7,?V0 + 3
    461          
    462            /* Fill in the data */
    463          
    464            /* Group ID */
    465            *tempPtr++ = LO_UINT16(pMsg->groupId);
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   2402         ADD     A,#0x2
   \   00005A   F8           MOV     R0,A
   \   00005B   E5..         MOV     A,?V0 + 1
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F9           MOV     R1,A
   \   000060   8882         MOV     DPL,R0
   \   000062   8983         MOV     DPH,R1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   AE82         MOV     R6,DPL
   \   00006D   AF83         MOV     R7,DPH
    466            *tempPtr++ = HI_UINT16(pMsg->groupId);
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   0E           INC     R6
   \   00007C   AF83         MOV     R7,DPH
    467          
    468            /* Cluster ID */
    469            *tempPtr++ = LO_UINT16(pMsg->clusterId);
   \   00007E   E5..         MOV     A,?V0 + 0
   \   000080   2404         ADD     A,#0x4
   \   000082   08           INC     R0
   \   000083   08           INC     R0
   \   000084   E5..         MOV     A,?V0 + 1
   \   000086   3400         ADDC    A,#0x0
   \   000088   F9           MOV     R1,A
   \   000089   8882         MOV     DPL,R0
   \   00008B   8983         MOV     DPH,R1
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   0E           INC     R6
   \   000095   AF83         MOV     R7,DPH
    470            *tempPtr++ = HI_UINT16(pMsg->clusterId);
   \   000097   8882         MOV     DPL,R0
   \   000099   8983         MOV     DPH,R1
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   0E           INC     R6
   \   0000A4   AF83         MOV     R7,DPH
    471          
    472            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000A6   A3           INC     DPTR
   \   0000A7   A983         MOV     R1,DPH
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   2406         ADD     A,#0x6
   \   0000AD   FA           MOV     R2,A
   \   0000AE   E5..         MOV     A,?V0 + 1
   \   0000B0   3400         ADDC    A,#0x0
   \   0000B2   FB           MOV     R3,A
   \   0000B3   7482         MOV     A,#-0x7e
   \   0000B5   65..         XRL     A,?V0 + 8
   \   0000B7   7072         JNZ     ??MT_AfIncomingMsg_2
    473            {
    474              *tempPtr++ = pMsg->srcAddr.addrMode;
   \   0000B9   85..82       MOV     DPL,?V0 + 4
   \   0000BC   85..83       MOV     DPH,?V0 + 5
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   0E           INC     R6
   \   0000C6   E9           MOV     A,R1
   \   0000C7   FF           MOV     R7,A
    475          
    476              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   0000C8   85..82       MOV     DPL,?V0 + 4
   \   0000CB   85..83       MOV     DPH,?V0 + 5
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6403         XRL     A,#0x3
   \   0000D1   701E         JNZ     ??MT_AfIncomingMsg_3
    477              {
    478                (void)osal_memcpy(tempPtr, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000D3                ; Setup parameters for call to function osal_memcpy
   \   0000D3   8A..         MOV     ?V0 + 4,R2
   \   0000D5   8B..         MOV     ?V0 + 5,R3
   \   0000D7   75..00       MOV     ?V0 + 6,#0x0
   \   0000DA   78..         MOV     R0,#?V0 + 4
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FA           MOV     R2,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   FB           MOV     R3,A
   \   0000E7   12....       LCALL   ??osal_memcpy?relay
   \   0000EA   7403         MOV     A,#0x3
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   8016         SJMP    ??MT_AfIncomingMsg_4
    479              }
    480              else
    481              {
    482                tempPtr[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_3:
   \   0000F1   8A82         MOV     DPL,R2
   \   0000F3   8B83         MOV     DPH,R3
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   F0           MOVX    @DPTR,A
    483                tempPtr[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   0000FB   8A82         MOV     DPL,R2
   \   0000FD   8B83         MOV     DPH,R3
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   A3           INC     DPTR
   \   000106   F0           MOVX    @DPTR,A
    484              }
    485              tempPtr += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_4:
   \   000107   EE           MOV     A,R6
   \   000108   2408         ADD     A,#0x8
   \   00010A   FE           MOV     R6,A
   \   00010B   EF           MOV     A,R7
   \   00010C   3400         ADDC    A,#0x0
   \   00010E   FF           MOV     R7,A
    486          
    487              *tempPtr++ = pMsg->srcAddr.endPoint;
   \   00010F   E5..         MOV     A,?V0 + 0
   \   000111   240F         ADD     A,#0xf
   \   000113   F582         MOV     DPL,A
   \   000115   E5..         MOV     A,?V0 + 1
   \   000117   3400         ADDC    A,#0x0
   \   000119   F583         MOV     DPH,A
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
    488          #if defined INTER_PAN
    489              *tempPtr++ = LO_UINT16(pMsg->srcAddr.panId);
    490              *tempPtr++ = HI_UINT16(pMsg->srcAddr.panId);
    491          #else
    492              *tempPtr++ = 0;
   \   000122   E4           CLR     A
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
    493              *tempPtr++ = 0;
   \   000125   F0           MOVX    @DPTR,A
   \   000126   A3           INC     DPTR
   \   000127   0E           INC     R6
   \   000128   0E           INC     R6
   \   000129   802F         SJMP    ??MT_AfIncomingMsg_5
    494          #endif
    495            }
    496            else
    497            {
    498              /* Source Address */
    499              *tempPtr++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_2:
   \   00012B   8A82         MOV     DPL,R2
   \   00012D   8B83         MOV     DPH,R3
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   F0           MOVX    @DPTR,A
   \   000135   0E           INC     R6
   \   000136   E9           MOV     A,R1
   \   000137   FF           MOV     R7,A
    500              *tempPtr++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000138   8A82         MOV     DPL,R2
   \   00013A   8B83         MOV     DPH,R3
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   0E           INC     R6
   \   000145   AF83         MOV     R7,DPH
    501          
    502              /* Source EP */
    503              *tempPtr++ = pMsg->srcAddr.endPoint;
   \   000147   E5..         MOV     A,?V0 + 0
   \   000149   240F         ADD     A,#0xf
   \   00014B   F582         MOV     DPL,A
   \   00014D   E5..         MOV     A,?V0 + 1
   \   00014F   3400         ADDC    A,#0x0
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   8E82         MOV     DPL,R6
   \   000156   8F83         MOV     DPH,R7
   \   000158   F0           MOVX    @DPTR,A
   \   000159   A3           INC     DPTR
   \                     ??MT_AfIncomingMsg_5:
   \   00015A   0E           INC     R6
   \   00015B   AF83         MOV     R7,DPH
    504            }
    505          
    506            /* Destination EP */
    507            *tempPtr++ = pMsg->endPoint;
   \   00015D   E5..         MOV     A,?V0 + 0
   \   00015F   2414         ADD     A,#0x14
   \   000161   F582         MOV     DPL,A
   \   000163   E5..         MOV     A,?V0 + 1
   \   000165   3400         ADDC    A,#0x0
   \   000167   F583         MOV     DPH,A
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   8E82         MOV     DPL,R6
   \   00016C   8F83         MOV     DPH,R7
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   A3           INC     DPTR
   \   000170   AE82         MOV     R6,DPL
   \   000172   AF83         MOV     R7,DPH
    508          
    509            /* WasBroadCast */
    510            *tempPtr++ = pMsg->wasBroadcast;
   \   000174   E5..         MOV     A,?V0 + 0
   \   000176   2415         ADD     A,#0x15
   \   000178   F582         MOV     DPL,A
   \   00017A   E5..         MOV     A,?V0 + 1
   \   00017C   3400         ADDC    A,#0x0
   \   00017E   F583         MOV     DPH,A
   \   000180   E0           MOVX    A,@DPTR
   \   000181   8E82         MOV     DPL,R6
   \   000183   8F83         MOV     DPH,R7
   \   000185   F0           MOVX    @DPTR,A
   \   000186   A3           INC     DPTR
   \   000187   0E           INC     R6
   \   000188   AF83         MOV     R7,DPH
    511          
    512            /* LinkQuality */
    513            *tempPtr++ = pMsg->LinkQuality;
   \   00018A   E5..         MOV     A,?V0 + 0
   \   00018C   2416         ADD     A,#0x16
   \   00018E   F582         MOV     DPL,A
   \   000190   E5..         MOV     A,?V0 + 1
   \   000192   3400         ADDC    A,#0x0
   \   000194   F583         MOV     DPH,A
   \   000196   E0           MOVX    A,@DPTR
   \   000197   8E82         MOV     DPL,R6
   \   000199   8F83         MOV     DPH,R7
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   0E           INC     R6
   \   00019E   AF83         MOV     R7,DPH
    514          
    515            /* SecurityUse */
    516            *tempPtr++ = pMsg->SecurityUse;
   \   0001A0   E5..         MOV     A,?V0 + 0
   \   0001A2   2419         ADD     A,#0x19
   \   0001A4   F582         MOV     DPL,A
   \   0001A6   E5..         MOV     A,?V0 + 1
   \   0001A8   3400         ADDC    A,#0x0
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   8E82         MOV     DPL,R6
   \   0001AF   8F83         MOV     DPH,R7
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   0E           INC     R6
   \   0001B4   AF83         MOV     R7,DPH
    517          
    518            /* Timestamp */
    519            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   0001B6   E5..         MOV     A,?V0 + 0
   \   0001B8   241A         ADD     A,#0x1a
   \   0001BA   FA           MOV     R2,A
   \   0001BB   E5..         MOV     A,?V0 + 1
   \   0001BD   3400         ADDC    A,#0x0
   \   0001BF   FB           MOV     R3,A
   \   0001C0   8A82         MOV     DPL,R2
   \   0001C2   8B83         MOV     DPH,R3
   \   0001C4   78..         MOV     R0,#?V0 + 4
   \   0001C6   12....       LCALL   ?L_MOV_X
   \   0001C9   8E82         MOV     DPL,R6
   \   0001CB   8F83         MOV     DPH,R7
   \   0001CD   E5..         MOV     A,?V0 + 4
   \   0001CF   F0           MOVX    @DPTR,A
   \   0001D0   A3           INC     DPTR
   \   0001D1   0E           INC     R6
   \   0001D2   AF83         MOV     R7,DPH
    520            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 1);
   \   0001D4   8A82         MOV     DPL,R2
   \   0001D6   8B83         MOV     DPH,R3
   \   0001D8   78..         MOV     R0,#?V0 + 4
   \   0001DA   12....       LCALL   ?L_MOV_X
   \   0001DD   E5..         MOV     A,?V0 + 5
   \   0001DF   8E82         MOV     DPL,R6
   \   0001E1   8F83         MOV     DPH,R7
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   0E           INC     R6
   \   0001E6   AF83         MOV     R7,DPH
    521            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 2);
   \   0001E8   8A82         MOV     DPL,R2
   \   0001EA   8B83         MOV     DPH,R3
   \   0001EC   78..         MOV     R0,#?V0 + 4
   \   0001EE   12....       LCALL   ?L_MOV_X
   \   0001F1   7410         MOV     A,#0x10
   \   0001F3   78..         MOV     R0,#?V0 + 4
   \   0001F5   12....       LCALL   ?UL_SHR
   \   0001F8   8E82         MOV     DPL,R6
   \   0001FA   8F83         MOV     DPH,R7
   \   0001FC   E5..         MOV     A,?V0 + 4
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   A3           INC     DPTR
   \   000200   0E           INC     R6
   \   000201   AF83         MOV     R7,DPH
    522            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 3);
   \   000203   8A82         MOV     DPL,R2
   \   000205   8B83         MOV     DPH,R3
   \   000207   78..         MOV     R0,#?V0 + 4
   \   000209   12....       LCALL   ?L_MOV_X
   \   00020C   7418         MOV     A,#0x18
   \   00020E   78..         MOV     R0,#?V0 + 4
   \   000210   12....       LCALL   ?UL_SHR
   \   000213   8E82         MOV     DPL,R6
   \   000215   8F83         MOV     DPH,R7
   \   000217   E5..         MOV     A,?V0 + 4
   \   000219   F0           MOVX    @DPTR,A
   \   00021A   A3           INC     DPTR
   \   00021B   0E           INC     R6
   \   00021C   AF83         MOV     R7,DPH
    523          
    524            /* Transmit Sequence Number */
    525            *tempPtr++ = pMsg->cmd.TransSeqNumber;
   \   00021E   E5..         MOV     A,?V0 + 0
   \   000220   241E         ADD     A,#0x1e
   \   000222   F582         MOV     DPL,A
   \   000224   E5..         MOV     A,?V0 + 1
   \   000226   3400         ADDC    A,#0x0
   \   000228   F583         MOV     DPH,A
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   8E82         MOV     DPL,R6
   \   00022D   8F83         MOV     DPH,R7
   \   00022F   F0           MOVX    @DPTR,A
   \   000230   A3           INC     DPTR
    526          
    527            /* Data Length */
    528            *tempPtr++ = dataLen;
   \   000231   E5..         MOV     A,?V0 + 9
   \   000233   F0           MOVX    @DPTR,A
   \   000234   A3           INC     DPTR
   \   000235   0E           INC     R6
   \   000236   0E           INC     R6
   \   000237   AF83         MOV     R7,DPH
    529          
    530            /* Data */
    531            if (dataLen)
   \   000239   602B         JZ      ??MT_AfIncomingMsg_6
    532            {
    533              osal_memcpy(tempPtr, pMsg->cmd.Data, dataLen);
   \   00023B                ; Setup parameters for call to function osal_memcpy
   \   00023B   E5..         MOV     A,?V0 + 0
   \   00023D   2421         ADD     A,#0x21
   \   00023F   F582         MOV     DPL,A
   \   000241   E5..         MOV     A,?V0 + 1
   \   000243   3400         ADDC    A,#0x0
   \   000245   F583         MOV     DPH,A
   \   000247   E0           MOVX    A,@DPTR
   \   000248   F5..         MOV     ?V0 + 4,A
   \   00024A   A3           INC     DPTR
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   F5..         MOV     ?V0 + 5,A
   \   00024E   78..         MOV     R0,#?V0 + 4
   \   000250   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000253   85....       MOV     ?V0 + 0,?V0 + 9
   \   000256   AC..         MOV     R4,?V0 + 0
   \   000258   7D00         MOV     R5,#0x0
   \   00025A   EE           MOV     A,R6
   \   00025B   FA           MOV     R2,A
   \   00025C   EF           MOV     A,R7
   \   00025D   FB           MOV     R3,A
   \   00025E   12....       LCALL   ??osal_memcpy?relay
   \   000261   7403         MOV     A,#0x3
   \   000263   12....       LCALL   ?DEALLOC_XSTACK8
    534            }
    535          
    536            /* Build and send back the response */
    537            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??MT_AfIncomingMsg_6:
   \   000266                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000266   AC..         MOV     R4,?V0 + 2
   \   000268   AD..         MOV     R5,?V0 + 3
   \   00026A   AB..         MOV     R3,?V0 + 10
   \   00026C   AA..         MOV     R2,?V0 + 8
   \   00026E   7944         MOV     R1,#0x44
   \   000270   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    538          
    539            /* Free memory */
    540            osal_mem_free(pRsp);
   \   000273                ; Setup parameters for call to function osal_mem_free
   \   000273   AA..         MOV     R2,?V0 + 2
   \   000275   AB..         MOV     R3,?V0 + 3
   \   000277   12....       LCALL   ??osal_mem_free?relay
    541          }
   \                     ??MT_AfIncomingMsg_1:
   \   00027A   7F0B         MOV     R7,#0xb
   \   00027C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfIncomingMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg
    542          
    543          /***************************************************************************************************
    544          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_AfCommandProcessing             1      0     15
       -> osal_mem_alloc                0      0     30
       -> MT_BuildEndpointDesc          0      0     30
       -> afRegister                    0      0     30
       -> osal_mem_free                 0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     30
       -> MT_AfDataRequest              0      0     30
       -> MT_AfDataRequestSrcRtg        0      0     30
     MT_AfDataConfirm                   3      0      3
       -> MT_BuildAndSendZToolResponse
                                        4      0      6
     MT_AfDataRequest                   1      0     52
       -> osal_memcpy                   0      0     62
       -> afFindEndPointDesc            0      0     56
       -> AF_DataRequest                0      0     74
       -> MT_BuildAndSendZToolResponse
                                        0      0     56
     MT_AfDataRequestSrcRtg             1      0     62
       -> osal_memset                   0      0     70
       -> afFindEndPointDesc            0      0     70
       -> osal_mem_alloc                0      0     70
       -> AF_DataRequestSrcRtg          0      0     94
       -> osal_mem_free                 0      0     70
       -> MT_BuildAndSendZToolResponse
                                        0      0     70
     MT_AfIncomingMsg                   1      0     22
       -> osal_mem_alloc                0      0     38
       -> osal_memcpy                   0      0     44
       -> osal_memcpy                   0      0     44
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
       -> osal_mem_free                 0      0     38
     MT_AfRegister                      1      0     15
       -> osal_mem_alloc                0      0     30
       -> MT_BuildEndpointDesc          0      0     30
       -> afRegister                    0      0     30
       -> osal_mem_free                 0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     30


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     MT_AfCommandProcessing          173
     ?Subroutine0                      2
     ??Subroutine1_0                   8
     MT_AfRegister                   137
     MT_AfDataRequest                506
     MT_AfDataRequestSrcRtg          428
     MT_AfDataConfirm                 88
     MT_AfIncomingMsg                639
     ??MT_AfCommandProcessing?relay    6
     ??MT_AfRegister?relay             6
     ??MT_AfDataRequest?relay          6
     ??MT_AfDataRequestSrcRtg?relay    6
     ??MT_AfDataConfirm?relay          6
     ??MT_AfIncomingMsg?relay          6

 
 1 981 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
 
 2 017 bytes of CODE memory

Errors: none
Warnings: none
