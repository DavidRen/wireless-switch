###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:49 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\mt\MT_SYS.c                                 #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\mt\MT_SYS.c" -D ZIGBEEPRO -D ZTOOL_P1 -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\MT_SYS.lst                                  #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\MT_SYS.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_SYS.c
      1          /***************************************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2009-12-22 17:20:57 -0800 (Tue, 22 Dec 2009) $
      4            Revision:       $Revision: 21402 $
      5          
      6            Description:   MonitorTest
      7          
      8            Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "nwk_util.h"
     48          #include "OSAL.h"
     49          #include "OSAL_NV.h"
     50          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     51          #include "hal_adc.h"
     52          #include "ZGlobals.h"
     53          
     54          /***************************************************************************************************
     55           * MACROS
     56           ***************************************************************************************************/
     57          
     58          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     59          #define MT_NV_ITEM_MAX_LENGTH           250
     60          
     61          #if !defined HAL_GPIO || !HAL_GPIO
     62          #define GPIO_DIR_IN(IDX)
     63          #define GPIO_DIR_OUT(IDX)
     64          #define GPIO_TRI(IDX)
     65          #define GPIO_PULL_UP(IDX)
     66          #define GPIO_PULL_DN(IDX)
     67          #define GPIO_SET(IDX)
     68          #define GPIO_CLR(IDX)
     69          #define GPIO_TOG(IDX)
     70          #define GPIO_GET(IDX) 0
     71          #define GPIO_HiD_SET() (val = 0)
     72          #define GPIO_HiD_CLR() (val = 0)
     73          #endif
     74          
     75          /***************************************************************************************************
     76           * CONSTANT
     77           ***************************************************************************************************/

   \                                 In  segment XDATA_ROM_C, align 1
     78          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   0008         DW 2048
   \   000002   0004         DW 1024
   \   000004   0002         DW 512
   \   000006   0001         DW 256
     79                                                MT_SYS_OSAL_EVENT_0,
     80                                                MT_SYS_OSAL_EVENT_1,
     81                                                MT_SYS_OSAL_EVENT_2,
     82                                                MT_SYS_OSAL_EVENT_3
     83                                              };
     84          
     85          typedef enum {
     86            GPIO_DIR,
     87            GPIO_TRI,
     88            GPIO_SET,
     89            GPIO_CLR,
     90            GPIO_TOG,
     91            GPIO_GET,
     92            GPIO_HiD = 0x12
     93          } GPIO_Op_t;
     94          
     95          #define GPIO_MASK  0x33
     96          
     97          /***************************************************************************************************
     98           * EXTERNAL FUNCTIONS
     99           ***************************************************************************************************/
    100          extern uint16 HalAdcReadVoltage(void);
    101          extern uint16 HalAdcReadTemperature(void);
    102          
    103          /***************************************************************************************************
    104           * LOCAL FUNCTIONS
    105           ***************************************************************************************************/
    106          #if defined (MT_SYS_FUNC)
    107          void MT_SysReset(uint8 *pBuf);
    108          void MT_SysPing(void);
    109          void MT_SysVersion(void);
    110          void MT_SysSetExtAddr(uint8 *pBuf);
    111          void MT_SysGetExtAddr(void);
    112          void MT_SysOsalNVWrite(uint8 *pBuf);
    113          void MT_SysOsalNVRead(uint8 *pBuf);
    114          void MT_SysOsalStartTimer(uint8 *pBuf);
    115          void MT_SysOsalStopTimer(uint8 *pBuf);
    116          void MT_SysRandom(void);
    117          void MT_SysAdcRead(uint8 *pBuf);
    118          void MT_SysGpio(uint8 *pBuf);
    119          void MT_SysStackTune(uint8 *pBuf);
    120          void MT_SysGetDeviceInfo(uint8 *pBuf);
    121          #endif /* MT_SYS_FUNC */
    122          
    123          #if defined (MT_SYS_FUNC)
    124          /***************************************************************************************************
    125           * @fn      MT_SysProcessing
    126           *
    127           * @brief   Process all the SYS commands that are issued by test tool
    128           *
    129           * @param   pBuf - pointer to the msg buffer
    130           *
    131           *          | LEN  | CMD0  | CMD1  |  DATA  |
    132           *          |  1   |   1   |   1   |  0-255 |
    133           *
    134           * @return  status
    135           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    136          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    137          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    138            uint8 status = MT_RPC_SUCCESS;
   \   00000A   7E00         MOV     R6,#0x0
    139          
    140            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   EA           MOV     A,R2
   \   00000D   2402         ADD     A,#0x2
   \   00000F   F8           MOV     R0,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F9           MOV     R1,A
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FC           MOV     R4,A
   \   00001A   604A         JZ      ??MT_SysCommandProcessing_0
   \   00001C   14           DEC     A
   \   00001D   6051         JZ      ??MT_SysCommandProcessing_1
   \   00001F   14           DEC     A
   \   000020   6071         JZ      ??MT_SysCommandProcessing_2
   \   000022   14           DEC     A
   \   000023   6078         JZ      ??MT_SysCommandProcessing_3
   \   000025   14           DEC     A
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??MT_SysCommandProcessing_4 & 0xFFFF
   \   00002B   24FC         ADD     A,#-0x4
   \   00002D   7003         JNZ     $+5
   \   00002F   02....       LJMP    ??MT_SysCommandProcessing_5 & 0xFFFF
   \   000032   14           DEC     A
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??MT_SysCommandProcessing_6 & 0xFFFF
   \   000038   14           DEC     A
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??MT_SysCommandProcessing_7 & 0xFFFF
   \   00003E   14           DEC     A
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??MT_SysCommandProcessing_8 & 0xFFFF
   \   000044   14           DEC     A
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??MT_SysCommandProcessing_9 & 0xFFFF
   \   00004A   14           DEC     A
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??MT_SysCommandProcessing_10 & 0xFFFF
   \   000050   14           DEC     A
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??MT_SysCommandProcessing_11 & 0xFFFF
   \   000056   14           DEC     A
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??MT_SysCommandProcessing_12 & 0xFFFF
   \   00005C   248F         ADD     A,#-0x71
   \   00005E   7003         JNZ     $+5
   \   000060   02....       LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
   \   000063   02....       LJMP    ??MT_SysCommandProcessing_14 & 0xFFFF
    141            {
    142              case MT_SYS_RESET_REQ:
    143                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_0:
   \   000066   C2AF         CLR     0xa8.7
   \   000068   75C9AB       MOV     0xc9,#-0x55
   \   00006B   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysCommandProcessing_15:
   \   00006E   80FE         SJMP    ??MT_SysCommandProcessing_15
    144                break;
    145          
    146              case MT_SYS_PING:
    147                MT_SysPing();
   \                     ??MT_SysCommandProcessing_1:
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   7411         MOV     A,#0x11
   \   000077   F0           MOVX    @DPTR,A
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007F   04           INC     A
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   AC82         MOV     R4,DPL
   \   000085   AD83         MOV     R5,DPH
   \   000087   7B02         MOV     R3,#0x2
   \   000089   7A01         MOV     R2,#0x1
   \                     ??MT_SysCommandProcessing_16:
   \   00008B   7961         MOV     R1,#0x61
   \   00008D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    148                break;
   \   000090   02....       LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
    149          
    150              case MT_SYS_VERSION:
    151                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_2:
   \   000093                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000093   7C..         MOV     R4,#MTVersionString & 0xff
   \   000095   7D..         MOV     R5,#(MTVersionString >> 8) & 0xff
   \   000097   7B05         MOV     R3,#0x5
   \   000099   7A02         MOV     R2,#0x2
   \   00009B   80EE         SJMP    ??MT_SysCommandProcessing_16
    152                break;
    153          
    154              case MT_SYS_SET_EXTADDR:
    155                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_3:
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8882         MOV     DPL,R0
   \   0000A8   8983         MOV     DPH,R1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FF           MOV     R7,A
   \   0000AC   EA           MOV     A,R2
   \   0000AD   2403         ADD     A,#0x3
   \   0000AF   F5..         MOV     ?V0 + 0,A
   \   0000B1   EB           MOV     A,R3
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F5..         MOV     ?V0 + 1,A
   \   0000B6                ; Setup parameters for call to function ZMacSetReq
   \   0000B6   0A           INC     R2
   \   0000B7   0A           INC     R2
   \   0000B8   0A           INC     R2
   \   0000B9   FB           MOV     R3,A
   \   0000BA   79E2         MOV     R1,#-0x1e
   \   0000BC   12....       LCALL   ??ZMacSetReq?relay
   \   0000BF   E9           MOV     A,R1
   \   0000C0   7027         JNZ     ??MT_SysCommandProcessing_17
   \   0000C2                ; Setup parameters for call to function osal_nv_write
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   75..08       MOV     ?V0 + 0,#0x8
   \   0000CA   8E..         MOV     ?V0 + 1,R6
   \   0000CC   78..         MOV     R0,#?V0 + 0
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   7C00         MOV     R4,#0x0
   \   0000D3   7D00         MOV     R5,#0x0
   \   0000D5   7A01         MOV     R2,#0x1
   \   0000D7   7B00         MOV     R3,#0x0
   \   0000D9   12....       LCALL   ??osal_nv_write?relay
   \   0000DC   7404         MOV     A,#0x4
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   E9           MOV     A,R1
   \   0000E2   85..82       MOV     DPL,?XSP + 0
   \   0000E5   85..83       MOV     DPH,?XSP + 1
   \   0000E8   F0           MOVX    @DPTR,A
   \                     ??MT_SysCommandProcessing_17:
   \   0000E9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E9   85..82       MOV     DPL,?XSP + 0
   \   0000EC   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_SysCommandProcessing_18:
   \   0000EF   AC82         MOV     R4,DPL
   \   0000F1   AD83         MOV     R5,DPH
   \   0000F3   7B01         MOV     R3,#0x1
   \                     ??MT_SysCommandProcessing_19:
   \   0000F5   EF           MOV     A,R7
   \   0000F6   FA           MOV     R2,A
   \   0000F7   8092         SJMP    ??MT_SysCommandProcessing_16
    156                break;
    157          
    158              case MT_SYS_GET_EXTADDR:
    159                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_4:
   \   0000F9                ; Setup parameters for call to function ZMacGetReq
   \   0000F9   7403         MOV     A,#0x3
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   AA82         MOV     R2,DPL
   \   000100   AB83         MOV     R3,DPH
   \   000102   79E2         MOV     R1,#-0x1e
   \   000104   12....       LCALL   ??ZMacGetReq?relay
   \   000107                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000107   7403         MOV     A,#0x3
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   AC82         MOV     R4,DPL
   \   00010E   AD83         MOV     R5,DPH
   \   000110   7B08         MOV     R3,#0x8
   \   000112   7A04         MOV     R2,#0x4
   \   000114   02....       LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
    160                break;
    161          
    162              case MT_SYS_OSAL_NV_READ:
    163                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_5:
   \   000117                ; Setup parameters for call to function MT_SysOsalNVRead
   \   000117   12....       LCALL   ??MT_SysOsalNVRead?relay
    164                break;
   \   00011A   02....       LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
    165          
    166              case MT_SYS_OSAL_NV_WRITE:
    167                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   00011D                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   00011D   12....       LCALL   ??MT_SysOsalNVWrite?relay
    168                break;
   \   000120   02....       LJMP    ??MT_SysCommandProcessing_13 & 0xFFFF
    169          
    170              case MT_SYS_OSAL_START_TIMER:
    171                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   000123   85..82       MOV     DPL,?XSP + 0
   \   000126   85..83       MOV     DPH,?XSP + 1
   \   000129   7401         MOV     A,#0x1
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   8983         MOV     DPH,R1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   FF           MOV     R7,A
   \   000132   EA           MOV     A,R2
   \   000133   2403         ADD     A,#0x3
   \   000135   08           INC     R0
   \   000136   EB           MOV     A,R3
   \   000137   3400         ADDC    A,#0x0
   \   000139   F9           MOV     R1,A
   \   00013A   E8           MOV     A,R0
   \   00013B   FC           MOV     R4,A
   \   00013C   E9           MOV     A,R1
   \   00013D   FD           MOV     R5,A
   \   00013E   8C82         MOV     DPL,R4
   \   000140   8D83         MOV     DPH,R5
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F5..         MOV     ?V0 + 0,A
   \   000145   C3           CLR     C
   \   000146   9404         SUBB    A,#0x4
   \   000148   5039         JNC     ??MT_SysCommandProcessing_20
   \   00014A                ; Setup parameters for call to function osal_start_timerEx
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FA           MOV     R2,A
   \   00014D   8C82         MOV     DPL,R4
   \   00014F   8D83         MOV     DPH,R5
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F9           MOV     R1,A
   \   000155   EA           MOV     A,R2
   \   000156   2400         ADD     A,#0x0
   \   000158   FC           MOV     R4,A
   \   000159   E4           CLR     A
   \   00015A   39           ADDC    A,R1
   \   00015B   FD           MOV     R5,A
   \   00015C   E5..         MOV     A,?V0 + 0
   \   00015E   33           RLC     A
   \   00015F   F8           MOV     R0,A
   \   000160   E4           CLR     A
   \   000161   33           RLC     A
   \   000162   F9           MOV     R1,A
   \   000163   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000165   28           ADD     A,R0
   \   000166   F582         MOV     DPL,A
   \   000168   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00016A   39           ADDC    A,R1
   \   00016B   F583         MOV     DPH,A
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   FA           MOV     R2,A
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   FB           MOV     R3,A
   \   000172   90....       MOV     DPTR,#MT_TaskID
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F9           MOV     R1,A
   \   000177   12....       LCALL   ??osal_start_timerEx?relay
   \                     ??MT_SysCommandProcessing_21:
   \   00017A   E9           MOV     A,R1
   \   00017B   85..82       MOV     DPL,?XSP + 0
   \   00017E   85..83       MOV     DPH,?XSP + 1
   \   000181   8008         SJMP    ??MT_SysCommandProcessing_22
   \                     ??MT_SysCommandProcessing_20:
   \   000183   85..82       MOV     DPL,?XSP + 0
   \   000186   85..83       MOV     DPH,?XSP + 1
   \   000189   7402         MOV     A,#0x2
   \                     ??MT_SysCommandProcessing_22:
   \   00018B   F0           MOVX    @DPTR,A
   \   00018C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00018C   02....       LJMP    ??MT_SysCommandProcessing_18 & 0xFFFF
    172                break;
    173          
    174              case MT_SYS_OSAL_STOP_TIMER:
    175                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   00018F   85..82       MOV     DPL,?XSP + 0
   \   000192   85..83       MOV     DPH,?XSP + 1
   \   000195   7401         MOV     A,#0x1
   \   000197   F0           MOVX    @DPTR,A
   \   000198   8882         MOV     DPL,R0
   \   00019A   8983         MOV     DPH,R1
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   FF           MOV     R7,A
   \   00019E   EA           MOV     A,R2
   \   00019F   2403         ADD     A,#0x3
   \   0001A1   08           INC     R0
   \   0001A2   EB           MOV     A,R3
   \   0001A3   3400         ADDC    A,#0x0
   \   0001A5   F9           MOV     R1,A
   \   0001A6   E8           MOV     A,R0
   \   0001A7   FC           MOV     R4,A
   \   0001A8   E9           MOV     A,R1
   \   0001A9   FD           MOV     R5,A
   \   0001AA   8C82         MOV     DPL,R4
   \   0001AC   8D83         MOV     DPH,R5
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F8           MOV     R0,A
   \   0001B0   C3           CLR     C
   \   0001B1   9404         SUBB    A,#0x4
   \   0001B3   50CE         JNC     ??MT_SysCommandProcessing_20
   \   0001B5                ; Setup parameters for call to function osal_stop_timerEx
   \   0001B5   E8           MOV     A,R0
   \   0001B6   C3           CLR     C
   \   0001B7   33           RLC     A
   \   0001B8   F8           MOV     R0,A
   \   0001B9   E4           CLR     A
   \   0001BA   33           RLC     A
   \   0001BB   F9           MOV     R1,A
   \   0001BC   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   0001BE   28           ADD     A,R0
   \   0001BF   F582         MOV     DPL,A
   \   0001C1   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   0001C3   39           ADDC    A,R1
   \   0001C4   F583         MOV     DPH,A
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   FA           MOV     R2,A
   \   0001C8   A3           INC     DPTR
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   FB           MOV     R3,A
   \   0001CB   90....       MOV     DPTR,#MT_TaskID
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F9           MOV     R1,A
   \   0001D0   12....       LCALL   ??osal_stop_timerEx?relay
   \   0001D3   80A5         SJMP    ??MT_SysCommandProcessing_21
    176                break;
    177          
    178              case MT_SYS_RANDOM:
    179                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_9:
   \   0001D5                ; Setup parameters for call to function Onboard_rand
   \   0001D5   12....       LCALL   ??Onboard_rand?relay
   \   0001D8   7401         MOV     A,#0x1
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   EA           MOV     A,R2
   \   0001DE   F0           MOVX    @DPTR,A
   \   0001DF   7402         MOV     A,#0x2
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   EB           MOV     A,R3
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001E6   7401         MOV     A,#0x1
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   AC82         MOV     R4,DPL
   \   0001ED   AD83         MOV     R5,DPH
   \   0001EF   7B02         MOV     R3,#0x2
   \   0001F1   7A0C         MOV     R2,#0xc
   \   0001F3   02....       LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
    180                break;
    181          
    182              case MT_SYS_ADC_READ:
    183                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_10:
   \   0001F6   EC           MOV     A,R4
   \   0001F7   FF           MOV     R7,A
   \   0001F8   EA           MOV     A,R2
   \   0001F9   2403         ADD     A,#0x3
   \   0001FB   0A           INC     R2
   \   0001FC   0A           INC     R2
   \   0001FD   0A           INC     R2
   \   0001FE   EB           MOV     A,R3
   \   0001FF   3400         ADDC    A,#0x0
   \   000201   FB           MOV     R3,A
   \   000202   8A82         MOV     DPL,R2
   \   000204   8B83         MOV     DPH,R3
   \   000206   E0           MOVX    A,@DPTR
   \   000207   F9           MOV     R1,A
   \   000208   A3           INC     DPTR
   \   000209   AA82         MOV     R2,DPL
   \   00020B   AB83         MOV     R3,DPH
   \   00020D   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysCommandProcessing>_0`:
   \   000210   01           DB        1
   \   000211   00           DB        0
   \   000212   07           DB        7
   \   000213   ....         DW        ??MT_SysCommandProcessing_23
   \   000215   02           DB        2
   \   000216   0E           DB        14
   \   000217   ....         DW        ??MT_SysCommandProcessing_24
   \   000219   0F           DB        15
   \   00021A   ....         DW        ??MT_SysCommandProcessing_25
   \   00021C   ....         DW        ??MT_SysCommandProcessing_26
   \                     ??MT_SysCommandProcessing_25:
   \   00021E                ; Setup parameters for call to function HalAdcRead
   \   00021E   7A04         MOV     R2,#0x4
   \   000220   790F         MOV     R1,#0xf
   \                     ??MT_SysCommandProcessing_27:
   \   000222   12....       LCALL   ??HalAdcRead?relay
   \   000225   8A..         MOV     ?V0 + 0,R2
   \   000227   8B..         MOV     ?V0 + 1,R3
   \   000229   A8..         MOV     R0,?V0 + 0
   \   00022B   A9..         MOV     R1,?V0 + 1
   \   00022D   8012         SJMP    ??MT_SysCommandProcessing_28
   \                     ??MT_SysCommandProcessing_24:
   \   00022F                ; Setup parameters for call to function HalAdcRead
   \   00022F   7A04         MOV     R2,#0x4
   \   000231   790E         MOV     R1,#0xe
   \   000233   80ED         SJMP    ??MT_SysCommandProcessing_27
   \                     ??MT_SysCommandProcessing_23:
   \   000235                ; Setup parameters for call to function HalAdcRead
   \   000235   8A82         MOV     DPL,R2
   \   000237   8B83         MOV     DPH,R3
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   FA           MOV     R2,A
   \   00023B   80E5         SJMP    ??MT_SysCommandProcessing_27
   \                     ??MT_SysCommandProcessing_26:
   \   00023D   7800         MOV     R0,#0x0
   \   00023F   7900         MOV     R1,#0x0
   \                     ??MT_SysCommandProcessing_28:
   \   000241   7401         MOV     A,#0x1
   \   000243   12....       LCALL   ?XSTACK_DISP0_8
   \   000246   E8           MOV     A,R0
   \   000247   F0           MOVX    @DPTR,A
   \   000248   7402         MOV     A,#0x2
   \   00024A   12....       LCALL   ?XSTACK_DISP0_8
   \   00024D   E9           MOV     A,R1
   \   00024E   F0           MOVX    @DPTR,A
   \   00024F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00024F   7401         MOV     A,#0x1
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   AC82         MOV     R4,DPL
   \   000256   AD83         MOV     R5,DPH
   \   000258   7B02         MOV     R3,#0x2
   \   00025A   02....       LJMP    ??MT_SysCommandProcessing_19 & 0xFFFF
    184                break;
    185          
    186              case MT_SYS_GPIO:
    187                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_11:
   \   00025D   8C..         MOV     ?V0 + 0,R4
   \   00025F   85..82       MOV     DPL,?XSP + 0
   \   000262   85..83       MOV     DPH,?XSP + 1
   \   000265   E4           CLR     A
   \   000266   F0           MOVX    @DPTR,A
   \   000267                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000267   AC82         MOV     R4,DPL
   \   000269   AD83         MOV     R5,DPH
   \   00026B   7B01         MOV     R3,#0x1
   \   00026D   AA..         MOV     R2,?V0 + 0
   \   00026F   02....       LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
    188                break;
    189          
    190              case MT_SYS_STACK_TUNE:
    191                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   000272   8C..         MOV     ?V0 + 1,R4
   \   000274   EA           MOV     A,R2
   \   000275   2403         ADD     A,#0x3
   \   000277   0A           INC     R2
   \   000278   0A           INC     R2
   \   000279   0A           INC     R2
   \   00027A   EB           MOV     A,R3
   \   00027B   3400         ADDC    A,#0x0
   \   00027D   FB           MOV     R3,A
   \   00027E   8A82         MOV     DPL,R2
   \   000280   8B83         MOV     DPH,R3
   \   000282   A3           INC     DPTR
   \   000283   A882         MOV     R0,DPL
   \   000285   A983         MOV     R1,DPH
   \   000287   8A82         MOV     DPL,R2
   \   000289   8B83         MOV     DPH,R3
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   6034         JZ      ??MT_SysCommandProcessing_29
   \   00028E   14           DEC     A
   \   00028F   7039         JNZ     ??MT_SysCommandProcessing_30
   \   000291   8882         MOV     DPL,R0
   \   000293   8983         MOV     DPH,R1
   \   000295   E0           MOVX    A,@DPTR
   \   000296   FA           MOV     R2,A
   \   000297   7401         MOV     A,#0x1
   \   000299   6A           XRL     A,R2
   \   00029A   6014         JZ      ??MT_SysCommandProcessing_31
   \   00029C   EA           MOV     A,R2
   \   00029D   6011         JZ      ??MT_SysCommandProcessing_31
   \   00029F                ; Setup parameters for call to function ZMacGetReq
   \   00029F   85..82       MOV     DPL,?XSP + 0
   \   0002A2   85..83       MOV     DPH,?XSP + 1
   \   0002A5   AA82         MOV     R2,DPL
   \   0002A7   AB83         MOV     R3,DPH
   \   0002A9   7952         MOV     R1,#0x52
   \   0002AB   12....       LCALL   ??ZMacGetReq?relay
   \   0002AE   8023         SJMP    ??MT_SysCommandProcessing_32
   \                     ??MT_SysCommandProcessing_31:
   \   0002B0                ; Setup parameters for call to function ZMacSetReq
   \   0002B0   E8           MOV     A,R0
   \   0002B1   FA           MOV     R2,A
   \   0002B2   E9           MOV     A,R1
   \   0002B3   FB           MOV     R3,A
   \   0002B4   7952         MOV     R1,#0x52
   \                     ??MT_SysCommandProcessing_33:
   \   0002B6   12....       LCALL   ??ZMacSetReq?relay
   \   0002B9   E9           MOV     A,R1
   \   0002BA   85..82       MOV     DPL,?XSP + 0
   \   0002BD   85..83       MOV     DPH,?XSP + 1
   \   0002C0   8010         SJMP    ??MT_SysCommandProcessing_34
   \                     ??MT_SysCommandProcessing_29:
   \   0002C2                ; Setup parameters for call to function ZMacSetReq
   \   0002C2   E8           MOV     A,R0
   \   0002C3   FA           MOV     R2,A
   \   0002C4   E9           MOV     A,R1
   \   0002C5   FB           MOV     R3,A
   \   0002C6   79E0         MOV     R1,#-0x20
   \   0002C8   80EC         SJMP    ??MT_SysCommandProcessing_33
   \                     ??MT_SysCommandProcessing_30:
   \   0002CA   85..82       MOV     DPL,?XSP + 0
   \   0002CD   85..83       MOV     DPH,?XSP + 1
   \   0002D0   7402         MOV     A,#0x2
   \                     ??MT_SysCommandProcessing_34:
   \   0002D2   F0           MOVX    @DPTR,A
   \                     ??MT_SysCommandProcessing_32:
   \   0002D3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002D3   85..82       MOV     DPL,?XSP + 0
   \   0002D6   85..83       MOV     DPH,?XSP + 1
   \   0002D9   AC82         MOV     R4,DPL
   \   0002DB   AD83         MOV     R5,DPH
   \   0002DD   7B01         MOV     R3,#0x1
   \   0002DF   AA..         MOV     R2,?V0 + 1
   \   0002E1   02....       LJMP    ??MT_SysCommandProcessing_16 & 0xFFFF
    192                break;
    193          
    194              case MT_SYS_RESET_IND:
    195                //TBD
    196                break;
    197          
    198              default:
    199                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_14:
   \   0002E4   0E           INC     R6
   \   0002E5   0E           INC     R6
    200                break;
    201            }
    202          
    203            return status;
   \                     ??MT_SysCommandProcessing_13:
   \   0002E6   EE           MOV     A,R6
   \   0002E7   F9           MOV     R1,A
   \   0002E8   740B         MOV     A,#0xb
   \   0002EA   80..         SJMP    ??Subroutine3_0
   \   0002EC                REQUIRE _A_IEN0
   \   0002EC                REQUIRE WDCTL
    204          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    205          
    206          /***************************************************************************************************
    207           * @fn      MT_SysReset
    208           *
    209           * @brief   Reset/reprogram the device.
    210           * @param   typID: 0=reset, 1=serial bootloader
    211           *
    212           * @return  None
    213           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          void MT_SysReset(uint8 *pBuf)
   \                     MT_SysReset:
    215          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    216            (void)pBuf;  // Intentionally unreferenced parameter
    217            SystemReset();  /* Restart this program */
   \   000000   C2AF         CLR     0xa8.7
   \   000002   75C9AB       MOV     0xc9,#-0x55
   \   000005   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysReset_0:
   \   000008   80FE         SJMP    ??MT_SysReset_0
   \   00000A                REQUIRE _A_IEN0
   \   00000A                REQUIRE WDCTL
    218          }
    219          
    220          /***************************************************************************************************
    221           * @fn      MT_SysPing
    222           *
    223           * @brief   Process the Ping command
    224           *
    225           * @param   None
    226           *
    227           * @return  None
    228           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void MT_SysPing(void)
   \                     MT_SysPing:
    230          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    231            uint16 tmp16;
    232            uint8 retArray[2];
    233          
    234            /* Build Capabilities */
    235            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO|
    236                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_ZOAD;
    237          
    238            /* Convert to high byte first into temp buffer */
    239            retArray[0] = LO_UINT16( tmp16 );
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7411         MOV     A,#0x11
   \   000011   F0           MOVX    @DPTR,A
    240            retArray[1] = HI_UINT16( tmp16 );
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    241          
    242            /* Build and send back the response */
    243            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    244                                          sizeof (tmp16), retArray );
   \   000019                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7B02         MOV     R3,#0x2
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7961         MOV     R1,#0x61
   \   000029   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    245          }
   \   00002C   7402         MOV     A,#0x2
   \   00002E   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    246          
    247          /***************************************************************************************************
    248           * @fn      MT_SysVersion
    249           *
    250           * @brief   Process the Version command
    251           *
    252           * @param   None
    253           *
    254           * @return  None
    255           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void MT_SysVersion(void)
   \                     MT_SysVersion:
    257          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258            byte *verStr = (byte *)MTVersionString;
    259            uint8 respLen = sizeof(MTVersionString);
    260          
    261            /* Build and send back the response */
    262            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    263                                         respLen, verStr);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   7C..         MOV     R4,#MTVersionString & 0xff
   \   000006   7D..         MOV     R5,#(MTVersionString >> 8) & 0xff
   \   000008   7B05         MOV     R3,#0x5
   \   00000A   7A02         MOV     R2,#0x2
   \   00000C   7961         MOV     R1,#0x61
   \   00000E   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    264          }
   \   000011   02....       LJMP    ??Subroutine4_0 & 0xFFFF
    265          
    266          /***************************************************************************************************
    267           * @fn      MT_SysSetExtAddr
    268           *
    269           * @brief   Set the Extended Address
    270           *
    271           * @param   pBuf
    272           *
    273           * @return  None
    274           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void MT_SysSetExtAddr(uint8 *pBuf)
   \                     MT_SysSetExtAddr:
    276          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    277            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    278            uint8 cmdId;
    279          
    280            /* parse header */
    281            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
    282            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   EA           MOV     A,R2
   \   00001C   2403         ADD     A,#0x3
   \   00001E   F5..         MOV     ?V0 + 0,A
   \   000020   EB           MOV     A,R3
   \   000021   3400         ADDC    A,#0x0
   \   000023   F5..         MOV     ?V0 + 1,A
    283          
    284            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
   \   000025                ; Setup parameters for call to function ZMacSetReq
   \   000025   0A           INC     R2
   \   000026   0A           INC     R2
   \   000027   0A           INC     R2
   \   000028   FB           MOV     R3,A
   \   000029   79E2         MOV     R1,#-0x1e
   \   00002B   12....       LCALL   ??ZMacSetReq?relay
   \   00002E   E9           MOV     A,R1
   \   00002F   7028         JNZ     ??MT_SysSetExtAddr_0
    285            {
    286              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
   \   000031                ; Setup parameters for call to function osal_nv_write
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..08       MOV     ?V0 + 0,#0x8
   \   000039   75..00       MOV     ?V0 + 1,#0x0
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A01         MOV     R2,#0x1
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_nv_write?relay
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   E9           MOV     A,R1
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   F0           MOVX    @DPTR,A
    287            }
    288          
    289            /* Build and send back the response */
    290            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysSetExtAddr_0:
   \   000059                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   AC82         MOV     R4,DPL
   \   000061   AD83         MOV     R5,DPH
   \   000063   7B01         MOV     R3,#0x1
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   7961         MOV     R1,#0x61
   \   000069   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    291          
    292          }
   \   00006C   7401         MOV     A,#0x1
   \   00006E   02....       LJMP    ??Subroutine3_0 & 0xFFFF
    293          
    294          /***************************************************************************************************
    295           * @fn      MT_SysGetExtAddr
    296           *
    297           * @brief   Get the Extended Address
    298           *
    299           * @param   None
    300           *
    301           * @return  None
    302           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          void MT_SysGetExtAddr(void)
   \                     MT_SysGetExtAddr:
    304          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    305            uint8 extAddr[Z_EXTADDR_LEN];
    306          
    307            ZMacGetReq( ZMacExtAddr, extAddr );
   \   000009                ; Setup parameters for call to function ZMacGetReq
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   79E2         MOV     R1,#-0x1e
   \   000015   12....       LCALL   ??ZMacGetReq?relay
    308          
    309            /* Build and send back the response */
    310            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    311                                         Z_EXTADDR_LEN, extAddr);
   \   000018                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7B08         MOV     R3,#0x8
   \   000024   7A04         MOV     R2,#0x4
   \   000026   7961         MOV     R1,#0x61
   \   000028   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    312          }
   \   00002B   7408         MOV     A,#0x8
   \   00002D   02....       LJMP    ?Subroutine1 & 0xFFFF
    313          
    314          /***************************************************************************************************
    315           * @fn      MT_SysOsalNVRead
    316           *
    317           * @brief  Read a NV value
    318           *
    319           * @param  uint8 pBuf - pointer to the data
    320           *
    321           * @return  None
    322           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    324          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    325            uint16 nvId;
    326            uint8 nvItemLen=0, nvItemOffset=0;
    327            uint8 *pRetBuf=NULL;
    328            uint8 respLen, cmdId;
    329          
    330            /* parse header */
    331            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 2,A
    332            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000E   EA           MOV     A,R2
   \   00000F   2403         ADD     A,#0x3
   \   000011   0A           INC     R2
   \   000012   0A           INC     R2
   \   000013   0A           INC     R2
   \   000014   EB           MOV     A,R3
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
    333          
    334            /* Get the ID */
    335            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   EC           MOV     A,R4
   \   000022   2400         ADD     A,#0x0
   \   000024   FE           MOV     R6,A
   \   000025   E4           CLR     A
   \   000026   39           ADDC    A,R1
   \   000027   FF           MOV     R7,A
    336            pBuf += sizeof(uint16);
    337          
    338            /* Calculate the offset */
    339            nvItemOffset = *pBuf;
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 5,A
    340          
    341            nvItemLen = osal_nv_item_len(nvId);
   \   000031                ; Setup parameters for call to function osal_nv_item_len
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   FB           MOV     R3,A
   \   000035   12....       LCALL   ??osal_nv_item_len?relay
   \   000038   EA           MOV     A,R2
   \   000039   F5..         MOV     ?V0 + 4,A
    342          
    343            /* Return only 250 bytes max */
    344            if (nvItemLen > MT_NV_ITEM_MAX_LENGTH)
   \   00003B   C3           CLR     C
   \   00003C   94FB         SUBB    A,#-0x5
   \   00003E   4005         JC      ??MT_SysOsalNVRead_0
    345            {
    346              nvItemLen = MT_NV_ITEM_MAX_LENGTH;
   \   000040   75..FA       MOV     ?V0 + 4,#-0x6
   \   000043   8003         SJMP    ??MT_SysOsalNVRead_1
    347            }
    348          
    349            if ((nvItemLen > 0) && ((nvItemLen - nvItemOffset) > 0))
   \                     ??MT_SysOsalNVRead_0:
   \   000045   EA           MOV     A,R2
   \   000046   6028         JZ      ??MT_SysOsalNVRead_2
   \                     ??MT_SysOsalNVRead_1:
   \   000048   85....       MOV     ?V0 + 6,?V0 + 4
   \   00004B   85....       MOV     ?V0 + 0,?V0 + 5
   \   00004E   E5..         MOV     A,?V0 + 6
   \   000050   C3           CLR     C
   \   000051   95..         SUBB    A,?V0 + 0
   \   000053   F8           MOV     R0,A
   \   000054   95E0         SUBB    A,0xE0 /* A   */
   \   000056   F9           MOV     R1,A
   \   000057   C3           CLR     C
   \   000058   E8           MOV     A,R0
   \   000059   9401         SUBB    A,#0x1
   \   00005B   E9           MOV     A,R1
   \   00005C   9400         SUBB    A,#0x0
   \   00005E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000060   65D0         XRL     A,PSW
   \   000062   33           RLC     A
   \   000063   400B         JC      ??MT_SysOsalNVRead_2
    350            {
    351              respLen = nvItemLen - nvItemOffset + 2;
   \   000065   E5..         MOV     A,?V0 + 4
   \   000067   C3           CLR     C
   \   000068   95..         SUBB    A,?V0 + 5
   \   00006A   2402         ADD     A,#0x2
   \   00006C   F5..         MOV     ?V0 + 3,A
   \   00006E   8003         SJMP    ??MT_SysOsalNVRead_3
    352            }
    353            else
    354            {
    355              respLen = 2;
   \                     ??MT_SysOsalNVRead_2:
   \   000070   75..02       MOV     ?V0 + 3,#0x2
    356            }
    357          
    358            pRetBuf = osal_mem_alloc(respLen);
   \                     ??MT_SysOsalNVRead_3:
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   85....       MOV     ?V0 + 0,?V0 + 3
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   7B00         MOV     R3,#0x0
   \   00007A   12....       LCALL   ??osal_mem_alloc?relay
   \   00007D   8A..         MOV     ?V0 + 0,R2
   \   00007F   8B..         MOV     ?V0 + 1,R3
    359          
    360            if (pRetBuf != NULL)
   \   000081   EA           MOV     A,R2
   \   000082   45..         ORL     A,?V0 + 1
   \   000084   607B         JZ      ??MT_SysOsalNVRead_4
    361            {
    362              osal_memset(pRetBuf, 0, respLen);
   \   000086                ; Setup parameters for call to function osal_memset
   \   000086   85....       MOV     ?V0 + 6,?V0 + 3
   \   000089   AC..         MOV     R4,?V0 + 6
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   12....       LCALL   ??osal_memset?relay
    363          
    364              /* Default to ZFailure */
    365              pRetBuf[0] = ZFailure;
   \   000092   85..82       MOV     DPL,?V0 + 0
   \   000095   85..83       MOV     DPH,?V0 + 1
   \   000098   7401         MOV     A,#0x1
   \   00009A   F0           MOVX    @DPTR,A
    366          
    367              if (respLen > 2)
   \   00009B   E5..         MOV     A,?V0 + 3
   \   00009D   C3           CLR     C
   \   00009E   9403         SUBB    A,#0x3
   \   0000A0   4048         JC      ??MT_SysOsalNVRead_5
    368              {
    369                if (((osal_nv_read( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, &pRetBuf[2])) == ZSUCCESS) && (respLen > 2))
   \   0000A2                ; Setup parameters for call to function osal_nv_read
   \   0000A2   E5..         MOV     A,?V0 + 0
   \   0000A4   2402         ADD     A,#0x2
   \   0000A6   F5..         MOV     ?V0 + 6,A
   \   0000A8   E5..         MOV     A,?V0 + 1
   \   0000AA   3400         ADDC    A,#0x0
   \   0000AC   F5..         MOV     ?V0 + 7,A
   \   0000AE   78..         MOV     R0,#?V0 + 6
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   85....       MOV     ?V0 + 6,?V0 + 4
   \   0000B6   75..00       MOV     ?V0 + 7,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 6
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   85....       MOV     ?V0 + 6,?V0 + 5
   \   0000C1   AC..         MOV     R4,?V0 + 6
   \   0000C3   7D00         MOV     R5,#0x0
   \   0000C5   EE           MOV     A,R6
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   ??osal_nv_read?relay
   \   0000CC   7404         MOV     A,#0x4
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D1   E9           MOV     A,R1
   \   0000D2   7008         JNZ     ??MT_SysOsalNVRead_6
    370                {
    371                  pRetBuf[0] = ZSuccess;
   \   0000D4   85..82       MOV     DPL,?V0 + 0
   \   0000D7   85..83       MOV     DPH,?V0 + 1
   \   0000DA   E4           CLR     A
   \   0000DB   F0           MOVX    @DPTR,A
    372                }
    373                pRetBuf[1] = nvItemLen - nvItemOffset;
   \                     ??MT_SysOsalNVRead_6:
   \   0000DC   E5..         MOV     A,?V0 + 4
   \   0000DE   C3           CLR     C
   \   0000DF   95..         SUBB    A,?V0 + 5
   \   0000E1   85..82       MOV     DPL,?V0 + 0
   \   0000E4   85..83       MOV     DPH,?V0 + 1
   \   0000E7   A3           INC     DPTR
   \   0000E8   8002         SJMP    ??MT_SysOsalNVRead_7
    374              }
    375              else
    376              {
    377                pRetBuf[1] = 0;
   \                     ??MT_SysOsalNVRead_5:
   \   0000EA   A3           INC     DPTR
   \   0000EB   E4           CLR     A
   \                     ??MT_SysOsalNVRead_7:
   \   0000EC   F0           MOVX    @DPTR,A
    378              }
    379          
    380              /* Build and send back the response */
    381              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, respLen, pRetBuf );
   \   0000ED                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000ED   AC..         MOV     R4,?V0 + 0
   \   0000EF   AD..         MOV     R5,?V0 + 1
   \   0000F1   AB..         MOV     R3,?V0 + 3
   \   0000F3   AA..         MOV     R2,?V0 + 2
   \   0000F5   7961         MOV     R1,#0x61
   \   0000F7   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    382          
    383              osal_mem_free(pRetBuf);
   \   0000FA                ; Setup parameters for call to function osal_mem_free
   \   0000FA   AA..         MOV     R2,?V0 + 0
   \   0000FC   AB..         MOV     R3,?V0 + 1
   \   0000FE   12....       LCALL   ??osal_mem_free?relay
    384            }
    385          
    386          
    387          }
   \                     ??MT_SysOsalNVRead_4:
   \   000101   7F08         MOV     R7,#0x8
   \   000103   02....       LJMP    ?BANKED_LEAVE_XDATA
    388          
    389          /***************************************************************************************************
    390           * @fn      MT_SysOsalNVWrite
    391           *
    392           * @brief
    393           *
    394           * @param   uint8 pData - pointer to the data
    395           *
    396           * @return  None
    397           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    398          void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    399          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    400            uint16 nvId;
    401            uint8 nvItemLen=0, nvItemOffset=0;
    402            uint8 rtrn, cmd;
    403          
    404            /* parse header */
    405            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 4,A
    406            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   F5..         MOV     ?V0 + 0,A
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F5..         MOV     ?V0 + 1,A
    407          
    408            /* Get the ID */
    409            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00001D   85..82       MOV     DPL,?V0 + 0
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   E4           CLR     A
   \   000028   C8           XCH     A,R0
   \   000029   F9           MOV     R1,A
   \   00002A   EA           MOV     A,R2
   \   00002B   2400         ADD     A,#0x0
   \   00002D   FE           MOV     R6,A
   \   00002E   E4           CLR     A
   \   00002F   39           ADDC    A,R1
   \   000030   FF           MOV     R7,A
    410            pBuf += sizeof(uint16);
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   2402         ADD     A,#0x2
   \   000035   F5..         MOV     ?V0 + 0,A
   \   000037   E5..         MOV     A,?V0 + 1
   \   000039   3400         ADDC    A,#0x0
    411          
    412            /* Calculate the offset */
    413            nvItemOffset = *pBuf++;
   \   00003B   85..82       MOV     DPL,?V0 + 0
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 5,A
   \   000043   A3           INC     DPTR
    414          
    415            /* Calculate the length */
    416            nvItemLen = *pBuf++;
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   A3           INC     DPTR
   \   000047   8582..       MOV     ?V0 + 0,DPL
   \   00004A   8583..       MOV     ?V0 + 1,DPH
    417          
    418            /* Default to ZFailure */
    419            rtrn = ZFailure;
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
    420          
    421            /* Set the Z-Globals value of this NV item. */
    422            zgSetItem( nvId, (uint16)nvItemLen, pBuf );
   \   000056   8982         MOV     DPL,R1
   \   000058   8582..       MOV     ?V0 + 2,DPL
   \   00005B   88..         MOV     ?V0 + 3,R0
   \   00005D                ; Setup parameters for call to function zgSetItem
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   AC..         MOV     R4,?V0 + 2
   \   000064   AD..         MOV     R5,?V0 + 3
   \   000066   EF           MOV     A,R7
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   ??zgSetItem?relay
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
    423          
    424            if ((osal_nv_write(nvId, (uint16)nvItemOffset, (uint16)nvItemLen, pBuf)) == ZSUCCESS)
   \   000070                ; Setup parameters for call to function osal_nv_write
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   85....       MOV     ?V0 + 2,?V0 + 5
   \   00007D   AC..         MOV     R4,?V0 + 2
   \   00007F   7D00         MOV     R5,#0x0
   \   000081   EE           MOV     A,R6
   \   000082   FA           MOV     R2,A
   \   000083   EF           MOV     A,R7
   \   000084   FB           MOV     R3,A
   \   000085   12....       LCALL   ??osal_nv_write?relay
   \   000088   7404         MOV     A,#0x4
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   E9           MOV     A,R1
   \   00008E   7022         JNZ     ??MT_SysOsalNVWrite_0
    425            {
    426              if (nvId == ZCD_NV_EXTADDR)
   \   000090   7401         MOV     A,#0x1
   \   000092   6E           XRL     A,R6
   \   000093   7001         JNZ     ??MT_SysOsalNVWrite_1
   \   000095   EF           MOV     A,R7
   \                     ??MT_SysOsalNVWrite_1:
   \   000096   7012         JNZ     ??MT_SysOsalNVWrite_2
    427              {
    428                rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   000098                ; Setup parameters for call to function ZMacSetReq
   \   000098   AA..         MOV     R2,?V0 + 0
   \   00009A   AB..         MOV     R3,?V0 + 1
   \   00009C   79E2         MOV     R1,#-0x1e
   \   00009E   12....       LCALL   ??ZMacSetReq?relay
   \   0000A1   E9           MOV     A,R1
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   8007         SJMP    ??MT_SysOsalNVWrite_3
    429              }
    430              else
    431              {
    432                rtrn = ZSuccess;
   \                     ??MT_SysOsalNVWrite_2:
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   E4           CLR     A
   \                     ??MT_SysOsalNVWrite_3:
   \   0000B1   F0           MOVX    @DPTR,A
    433              }
    434            }
    435          
    436            /* Build and send back the response */
    437            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysOsalNVWrite_0:
   \   0000B2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   AC82         MOV     R4,DPL
   \   0000BA   AD83         MOV     R5,DPH
   \   0000BC   7B01         MOV     R3,#0x1
   \   0000BE   AA..         MOV     R2,?V0 + 4
   \   0000C0   7961         MOV     R1,#0x61
   \   0000C2   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    438          }
   \   0000C5   7401         MOV     A,#0x1
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   7F06         MOV     R7,#0x6
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
    439          
    440          /***************************************************************************************************
    441           * @fn      MT_SysOsalStartTimer
    442           *
    443           * @brief
    444           *
    445           * @param   uint8 pData - pointer to the data
    446           *
    447           * @return  None
    448           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void MT_SysOsalStartTimer(uint8 *pBuf)
   \                     MT_SysOsalStartTimer:
    450          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    451            uint16 eventId;
    452            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    453            uint8 cmdId;
    454          
    455            /* parse header */
    456            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
    457            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   EA           MOV     A,R2
   \   00001C   2403         ADD     A,#0x3
   \   00001E   0A           INC     R2
   \   00001F   0A           INC     R2
   \   000020   0A           INC     R2
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   FB           MOV     R3,A
    458          
    459            if (*pBuf <= 3)
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FF           MOV     R7,A
   \   00002B   C3           CLR     C
   \   00002C   9404         SUBB    A,#0x4
   \   00002E   5037         JNC     ??MT_SysOsalStartTimer_0
    460            {
    461              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    462              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
   \   000030                ; Setup parameters for call to function osal_start_timerEx
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FC           MOV     R4,A
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   EC           MOV     A,R4
   \   00003C   2400         ADD     A,#0x0
   \   00003E   E4           CLR     A
   \   00003F   39           ADDC    A,R1
   \   000040   FD           MOV     R5,A
   \   000041   EF           MOV     A,R7
   \   000042   33           RLC     A
   \   000043   F8           MOV     R0,A
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   F9           MOV     R1,A
   \   000047   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000049   28           ADD     A,R0
   \   00004A   F582         MOV     DPL,A
   \   00004C   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00004E   39           ADDC    A,R1
   \   00004F   F583         MOV     DPH,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FA           MOV     R2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FB           MOV     R3,A
   \   000056   90....       MOV     DPTR,#MT_TaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??osal_start_timerEx?relay
   \   00005E   E9           MOV     A,R1
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   8008         SJMP    ??MT_SysOsalStartTimer_1
    463            }
    464            else
    465            {
    466              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStartTimer_0:
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   7402         MOV     A,#0x2
    467            }
   \                     ??MT_SysOsalStartTimer_1:
   \   00006F   02....       LJMP    ?Subroutine2 & 0xFFFF
    468          
    469            /* Build and send back the response */
    470            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
    471          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                REQUIRE ??Subroutine5_0
   \   000001                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   7B01         MOV     R3,#0x1
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   7961         MOV     R1,#0x61
   \   00000A                REQUIRE ??Subroutine6_0
   \   00000A                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000003   7401         MOV     A,#0x1
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7F01         MOV     R7,#0x1
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA
    472          
    473          /***************************************************************************************************
    474           * @fn      MT_SysOsalStopTimer
    475           *
    476           * @brief
    477           *
    478           * @param   uint8 pData - pointer to the data
    479           *
    480           * @return  None
    481           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          void MT_SysOsalStopTimer(uint8 *pBuf)
   \                     MT_SysOsalStopTimer:
    483          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    484            uint16 eventId;
    485            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    486            uint8 cmdId;
    487          
    488            /* parse header */
    489            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
    490            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   EA           MOV     A,R2
   \   00001C   2403         ADD     A,#0x3
   \   00001E   0A           INC     R2
   \   00001F   0A           INC     R2
   \   000020   0A           INC     R2
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   FB           MOV     R3,A
    491          
    492            if (*pBuf <= 3)
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   C3           CLR     C
   \   00002C   9404         SUBB    A,#0x4
   \   00002E   5027         JNC     ??MT_SysOsalStopTimer_0
    493            {
    494              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    495              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   \   000030                ; Setup parameters for call to function osal_stop_timerEx
   \   000030   E8           MOV     A,R0
   \   000031   C3           CLR     C
   \   000032   33           RLC     A
   \   000033   F8           MOV     R0,A
   \   000034   E4           CLR     A
   \   000035   33           RLC     A
   \   000036   F9           MOV     R1,A
   \   000037   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000039   28           ADD     A,R0
   \   00003A   F582         MOV     DPL,A
   \   00003C   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00003E   39           ADDC    A,R1
   \   00003F   F583         MOV     DPH,A
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FB           MOV     R3,A
   \   000046   90....       MOV     DPTR,#MT_TaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??osal_stop_timerEx?relay
   \   00004E   E9           MOV     A,R1
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   8008         SJMP    ??MT_SysOsalStopTimer_1
    496            }
    497            else
    498            {
    499              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStopTimer_0:
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   7402         MOV     A,#0x2
    500            }
   \                     ??MT_SysOsalStopTimer_1:
   \   00005F   02....       LJMP    ?Subroutine2 & 0xFFFF
    501          
    502            /* Build and send back the response */
    503            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
    504          }
    505          
    506          /***************************************************************************************************
    507           * @fn      MT_SysRandom
    508           *
    509           * @brief
    510           *
    511           * @param   uint8 pData - pointer to the data
    512           *
    513           * @return  None
    514           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine3_0
   \   000007                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          void MT_SysRandom()
   \                     MT_SysRandom:
    516          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    517            uint16 randValue = Onboard_rand();
   \   00000A                ; Setup parameters for call to function Onboard_rand
   \   00000A   12....       LCALL   ??Onboard_rand?relay
    518            uint8 retArray[2];
    519          
    520            retArray[0] = LO_UINT16(randValue);
   \   00000D   EA           MOV     A,R2
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
    521            retArray[1] = HI_UINT16(randValue);
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
    522          
    523            /* Build and send back the response */
    524            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
   \   00001C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7B02         MOV     R3,#0x2
   \   000028   7A0C         MOV     R2,#0xc
   \   00002A   02....       LJMP    ?Subroutine0 & 0xFFFF
    525          }
    526          
    527          /***************************************************************************************************
    528           * @fn      MT_SysAdcRead
    529           *
    530           * @brief   Reading ADC value, temperature sensor and voltage
    531           *
    532           * @param   uint8 pData - pointer to the data
    533           *
    534           * @return  None
    535           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          void MT_SysAdcRead(uint8 *pBuf)
   \                     MT_SysAdcRead:
    537          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    538            uint8 channel, resolution;
    539            uint16 tempValue;
    540            uint8 retArray[2];
    541            uint8 cmdId;
    542          
    543            /* parse header */
    544            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    545            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    546          
    547            /* Channel */
    548            channel = *pBuf++;
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   A3           INC     DPTR
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
    549          
    550            /* Resolution */
    551            resolution = *pBuf++;
    552          
    553            /* Voltage reading */
    554            switch (channel)
   \   000027   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysAdcRead>_0`:
   \   00002A   01           DB        1
   \   00002B   00           DB        0
   \   00002C   07           DB        7
   \   00002D   ....         DW        ??MT_SysAdcRead_0
   \   00002F   02           DB        2
   \   000030   0E           DB        14
   \   000031   ....         DW        ??MT_SysAdcRead_1
   \   000033   0F           DB        15
   \   000034   ....         DW        ??MT_SysAdcRead_2
   \   000036   ....         DW        ??MT_SysAdcRead_3
    555            {
    556              /* Analog input channel */
    557              case HAL_ADC_CHANNEL_0:
    558              case HAL_ADC_CHANNEL_1:
    559              case HAL_ADC_CHANNEL_2:
    560              case HAL_ADC_CHANNEL_3:
    561              case HAL_ADC_CHANNEL_4:
    562              case HAL_ADC_CHANNEL_5:
    563              case HAL_ADC_CHANNEL_6:
    564              case HAL_ADC_CHANNEL_7:
    565                tempValue = HalAdcRead(channel, resolution);
   \                     ??MT_SysAdcRead_0:
   \   000038                ; Setup parameters for call to function HalAdcRead
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \                     ??MT_SysAdcRead_4:
   \   00003E   12....       LCALL   ??HalAdcRead?relay
   \   000041   8A..         MOV     ?V0 + 0,R2
   \   000043   8B..         MOV     ?V0 + 1,R3
   \   000045   A8..         MOV     R0,?V0 + 0
   \   000047   A9..         MOV     R1,?V0 + 1
    566                break;
   \   000049   801B         SJMP    ??MT_SysAdcRead_5
    567          
    568              /* Temperature sensor */
    569              case(HAL_ADC_CHANNEL_TEMP):
    570                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_1:
   \   00004B                ; Setup parameters for call to function HalAdcRead
   \   00004B   7A04         MOV     R2,#0x4
   \   00004D   790E         MOV     R1,#0xe
   \   00004F   80ED         SJMP    ??MT_SysAdcRead_4
    571                break;
    572          
    573              /* Voltage reading */
    574              case(HAL_ADC_CHANNEL_VDD):
    575                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_2:
   \   000051                ; Setup parameters for call to function HalAdcRead
   \   000051   7A04         MOV     R2,#0x4
   \   000053   790F         MOV     R1,#0xf
   \   000055   12....       LCALL   ??HalAdcRead?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   A8..         MOV     R0,?V0 + 0
   \   00005E   A9..         MOV     R1,?V0 + 1
    576                break;
   \   000060   8004         SJMP    ??MT_SysAdcRead_5
    577          
    578              /* Undefined channels */
    579              default:
    580                tempValue = 0x00;
   \                     ??MT_SysAdcRead_3:
   \   000062   7800         MOV     R0,#0x0
   \   000064   7900         MOV     R1,#0x0
    581                break;
    582            }
    583          
    584            retArray[0] = LO_UINT16(tempValue);
   \                     ??MT_SysAdcRead_5:
   \   000066   E8           MOV     A,R0
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   F0           MOVX    @DPTR,A
    585            retArray[1] = HI_UINT16(tempValue);
   \   00006E   7401         MOV     A,#0x1
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E9           MOV     A,R1
   \   000074   F0           MOVX    @DPTR,A
    586          
    587            /* Build and send back the response */
    588            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
   \   000075                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   AC82         MOV     R4,DPL
   \   00007D   AD83         MOV     R5,DPH
   \   00007F   7B02         MOV     R3,#0x2
   \   000081   EE           MOV     A,R6
   \   000082   FA           MOV     R2,A
   \   000083   02....       LJMP    ?Subroutine0 & 0xFFFF
    589          }
    590          
    591          /**************************************************************************************************
    592           * @fn      MT_SysGpio
    593           *
    594           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
    595           *
    596           * @param   uint8 pData - Pointer to the data.
    597           *
    598           * @return  None
    599           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          void MT_SysGpio(uint8 *pBuf)
   \                     MT_SysGpio:
    601          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    602            uint8 cmd, val;
    603            GPIO_Op_t op;
    604          
    605            cmd = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
    606            pBuf += MT_RPC_FRAME_HDR_SZ;
    607          
    608            op = (GPIO_Op_t)(*pBuf++);
    609            val = *pBuf & GPIO_MASK;
    610          
    611            switch (op)
    612            {
    613              case GPIO_DIR:
    614                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
    615                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
    616                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
    617                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
    618                break;
    619          
    620              case GPIO_TRI:
    621                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
    622                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
    623                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
    624                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
    625                break;
    626          
    627              case GPIO_SET:
    628                if (val & BV(0)) {GPIO_SET(0);}
    629                if (val & BV(1)) {GPIO_SET(1);}
    630                if (val & BV(2)) {GPIO_SET(2);}
    631                if (val & BV(3)) {GPIO_SET(3);}
    632                break;
    633          
    634              case GPIO_CLR:
    635                if (val & BV(0)) {GPIO_CLR(0);}
    636                if (val & BV(1)) {GPIO_CLR(1);}
    637                if (val & BV(2)) {GPIO_CLR(2);}
    638                if (val & BV(3)) {GPIO_CLR(3);}
    639                break;
    640          
    641              case GPIO_TOG:
    642                if (val & BV(0)) {GPIO_TOG(0);}
    643                if (val & BV(1)) {GPIO_TOG(1);}
    644                if (val & BV(2)) {GPIO_TOG(2);}
    645                if (val & BV(3)) {GPIO_TOG(3);}
    646                break;
    647          
    648              case GPIO_GET:
    649                break;
    650          
    651              case GPIO_HiD:
    652                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
    653                break;
    654          
    655              default:
    656                break;
    657            }
    658          
    659            val  = (GPIO_GET(0)) ? BV(0) : 0;
    660            val |= (GPIO_GET(1)) ? BV(1) : 0;
    661            val |= (GPIO_GET(2)) ? BV(2) : 0;
    662            val |= (GPIO_GET(3)) ? BV(3) : 0;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    663          
    664            /* Build and send back the response */
    665            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
   \   000019                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   7B01         MOV     R3,#0x1
   \   00001F   7961         MOV     R1,#0x61
   \   000021   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    666          }
   \   000024   7401         MOV     A,#0x1
   \   000026                REQUIRE ?Subroutine1
   \   000026                ; // Fall through to label ?Subroutine1
    667          
    668          /**************************************************************************************************
    669           * @fn      MT_SysStackTune
    670           *
    671           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
    672           *
    673           * @param   uint8 pData - Pointer to the data.
    674           *
    675           * @return  None
    676           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          void MT_SysStackTune(uint8 *pBuf)
   \                     MT_SysStackTune:
    678          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    679            uint8 cmd, rtrn;
    680          
    681            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    682            pBuf += MT_RPC_FRAME_HDR_SZ;
    683          
    684            switch (*pBuf++)
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   3400         ADDC    A,#0x0
   \   000019   F9           MOV     R1,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6005         JZ      ??MT_SysStackTune_0
   \   00002A   14           DEC     A
   \   00002B   6010         JZ      ??MT_SysStackTune_1
   \   00002D   8031         SJMP    ??MT_SysStackTune_2
    685            {
    686            case STK_TX_PWR:
    687              rtrn = ZMacSetReq(ZMacPhyTransmitPower, pBuf);
   \                     ??MT_SysStackTune_0:
   \   00002F                ; Setup parameters for call to function ZMacSetReq
   \   00002F   79E0         MOV     R1,#-0x20
   \                     ??MT_SysStackTune_3:
   \   000031   12....       LCALL   ??ZMacSetReq?relay
   \   000034   E9           MOV     A,R1
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   802B         SJMP    ??MT_SysStackTune_4
    688              break;
    689          
    690            case STK_RX_ON_IDLE:
    691              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   \                     ??MT_SysStackTune_1:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7401         MOV     A,#0x1
   \   000045   68           XRL     A,R0
   \   000046   6014         JZ      ??MT_SysStackTune_5
   \   000048   E8           MOV     A,R0
   \   000049   6011         JZ      ??MT_SysStackTune_5
    692              {
    693                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   \   00004B                ; Setup parameters for call to function ZMacGetReq
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   7952         MOV     R1,#0x52
   \   000057   12....       LCALL   ??ZMacGetReq?relay
   \   00005A   800D         SJMP    ??MT_SysStackTune_6
    694              }
    695              else
    696              {
    697                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   \                     ??MT_SysStackTune_5:
   \   00005C                ; Setup parameters for call to function ZMacSetReq
   \   00005C   7952         MOV     R1,#0x52
   \   00005E   80D1         SJMP    ??MT_SysStackTune_3
    698              }
    699              break;
    700          
    701            default:
    702              rtrn = ZInvalidParameter;
   \                     ??MT_SysStackTune_2:
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   7402         MOV     A,#0x2
   \                     ??MT_SysStackTune_4:
   \   000068   F0           MOVX    @DPTR,A
    703              break;
    704            }
    705          
    706            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysStackTune_6:
   \   000069                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   80..         SJMP    ??Subroutine5_0
    707          }
    708          #endif /* MT_SYS_FUNC */
    709          
    710          /***************************************************************************************************
    711           * SUPPORT
    712           ***************************************************************************************************/
    713          
    714          /***************************************************************************************************
    715           * @fn      MT_SysResetInd()
    716           *
    717           * @brief   Sends a ZTOOL "reset response" message.
    718           *
    719           * @param   None
    720           *
    721           * @return  None
    722           *
    723           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
    725          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    726            uint8 retArray[6];
    727          
    728            retArray[0] = ResetReason();   /* Reason */
   \   00000A   E59D         MOV     A,0x9d
   \   00000C   13           RRC     A
   \   00000D   13           RRC     A
   \   00000E   13           RRC     A
   \   00000F   541F         ANL     A,#0x1f
   \   000011   5403         ANL     A,#0x3
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    729            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75....       MOV     ?V0 + 0,#MTVersionString & 0xff
   \   00001D   75....       MOV     ?V0 + 1,#(MTVersionString >> 8) & 0xff
   \   000020   75..00       MOV     ?V0 + 2,#0x0
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000028   7C05         MOV     R4,#0x5
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??osal_memcpy?relay
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    730          
    731            /* Send out Reset Response message */
    732            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
    733                                          sizeof(retArray), retArray);
   \   00003D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   AC82         MOV     R4,DPL
   \   000045   AD83         MOV     R5,DPH
   \   000047   7B06         MOV     R3,#0x6
   \   000049   7A80         MOV     R2,#-0x80
   \   00004B   7941         MOV     R1,#0x41
   \   00004D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    734          }
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   7F03         MOV     R7,#0x3
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005A                REQUIRE SLEEPSTA
    735          
    736          /***************************************************************************************************
    737           * @fn      MT_SysOsalTimerExpired()
    738           *
    739           * @brief   Sends a SYS Osal Timer Expired
    740           *
    741           * @param   None
    742           *
    743           * @return  None
    744           *
    745           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    746          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
    747          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    748            uint8 retValue;
    749            retValue = Id;
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    750            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7B01         MOV     R3,#0x1
   \   000018   7A81         MOV     R2,#-0x7f
   \   00001A   7941         MOV     R1,#0x41
   \   00001C   02....       LJMP    ??Subroutine6_0 & 0xFFFF
    751          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysPing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysVersion?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysVersion

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysSetExtAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysGetExtAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalNVRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalNVWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalStartTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalStopTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStopTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysRandom?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysAdcRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysAdcRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysGpio?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGpio

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysStackTune?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysStackTune

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysResetInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_SysOsalTimerExpired?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired
    752          
    753          /***************************************************************************************************
    754           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_SysAdcRead                      1      0     12
       -> HalAdcRead                    0      0     24
       -> HalAdcRead                    0      0     24
       -> HalAdcRead                    0      0     24
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_SysCommandProcessing            1      0     25
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> ZMacSetReq                    0      0     42
       -> osal_nv_write                 0      0     50
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> ZMacGetReq                    0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> MT_SysOsalNVRead              0      0     42
       -> MT_SysOsalNVWrite             0      0     42
       -> osal_start_timerEx            0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> osal_stop_timerEx             0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> Onboard_rand                  0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> HalAdcRead                    0      0     42
       -> HalAdcRead                    0      0     42
       -> HalAdcRead                    0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> ZMacGetReq                    0      0     42
       -> ZMacSetReq                    0      0     42
       -> ZMacSetReq                    0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
     MT_SysGetExtAddr                   2      0      8
       -> ZMacGetReq                    4      0     16
       -> MT_BuildAndSendZToolResponse
                                        4      0     16
     MT_SysGpio                         2      0      1
       -> MT_BuildAndSendZToolResponse
                                        4      0      2
     MT_SysOsalNVRead                   1      0     41
       -> osal_nv_item_len              0      0     32
       -> osal_mem_alloc                0      0     32
       -> osal_memset                   0      0     32
       -> osal_nv_read                  0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     32
       -> osal_mem_free                 0      0     32
     MT_SysOsalNVWrite                  1      0     40
       -> zgSetItem                     0      0     34
       -> osal_nv_write                 0      0     38
       -> ZMacSetReq                    0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     30
     MT_SysOsalStartTimer               1      0     10
       -> osal_start_timerEx            0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysOsalStopTimer                1      0     10
       -> osal_stop_timerEx             0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysOsalTimerExpired             1      0     10
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysPing                         2      0      2
       -> MT_BuildAndSendZToolResponse
                                        4      0      4
     MT_SysRandom                       1      0     12
       -> Onboard_rand                  0      0     24
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_SysReset                        0      0      0
     MT_SysResetInd                     1      0     20
       -> osal_memcpy                   0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     34
     MT_SysSetExtAddr                   1      0     15
       -> ZMacSetReq                    0      0     22
       -> osal_nv_write                 0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     22
     MT_SysStackTune                    1      0     10
       -> ZMacSetReq                    0      0     20
       -> ZMacGetReq                    0      0     20
       -> ZMacSetReq                    0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_SysVersion                      2      0      0
       -> MT_BuildAndSendZToolResponse
                                        4      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     SLEEPSTA                           1
     _A_IEN0                            1
     WDCTL                              1
     MT_SysOsalEventId                  8
     MT_SysCommandProcessing          748
     ??Subroutine3_0                    8
     MT_SysReset                       10
     MT_SysPing                        49
     ?Subroutine1                       3
     ??Subroutine4_0                    7
     MT_SysVersion                     20
     MT_SysSetExtAddr                 113
     MT_SysGetExtAddr                  48
     MT_SysOsalNVRead                 262
     MT_SysOsalNVWrite                207
     MT_SysOsalStartTimer             114
     ?Subroutine2                       1
     ??Subroutine5_0                   10
     ??Subroutine6_0                   13
     MT_SysOsalStopTimer               98
     ?Subroutine0                       7
     MT_SysRandom                      45
     MT_SysAdcRead                    134
     MT_SysGpio                        38
     MT_SysStackTune                  113
     MT_SysResetInd                    90
     MT_SysOsalTimerExpired            31
     ??MT_SysCommandProcessing?relay    6
     ??MT_SysReset?relay                6
     ??MT_SysPing?relay                 6
     ??MT_SysVersion?relay              6
     ??MT_SysSetExtAddr?relay           6
     ??MT_SysGetExtAddr?relay           6
     ??MT_SysOsalNVRead?relay           6
     ??MT_SysOsalNVWrite?relay          6
     ??MT_SysOsalStartTimer?relay       6
     ??MT_SysOsalStopTimer?relay        6
     ??MT_SysRandom?relay               6
     ??MT_SysAdcRead?relay              6
     ??MT_SysGpio?relay                 6
     ??MT_SysStackTune?relay            6
     ??MT_SysResetInd?relay             6
     ??MT_SysOsalTimerExpired?relay     6

 
 2 169 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
     8 bytes in segment XDATA_ROM_C
 
 2 265 bytes of CODE  memory
     8 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)

Errors: none
Warnings: none
