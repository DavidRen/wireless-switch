///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        20/May/2015  19:32:50 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. /
//                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Co /
//                          mponents\osal\mcu\cc2530\OSAL_Nv.c                /
//    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑ /
//                          é\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ    /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.       /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg" (-DSECURE=0                     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\zigbee\4.              /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\osal /
//                          \mcu\cc2530\OSAL_Nv.c" -D ZIGBEEPRO -D ZTOOL_P1   /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.             /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\RouterEB-Pro\List\"   /
//                          -lA "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ /
//                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\Rou /
//                          terEB-Pro\List\" --diag_suppress Pe001,Pa010 -o   /
//                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2 /
//                          .Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SampleApp\CC2530DB\RouterE /
//                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1   /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑ /
//                          é\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\"    /
//                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑ /
//                          é\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\S /
//                          OURCE\" -I "D:\zigbee\4.                          /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530 /
//                          DB\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù /
//                          ´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MT\" -I "D:\zigbee\4.  /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\HAL\INCLUDE\" -I "D:\zigbee\4.               /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\HAL\TARGET\CC2530EB\" -I "D:\zigbee\4.       /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.            /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\INCLUDE\" -I "D:\zigbee\4.              /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\AF\" -I "D:\zigbee\4.                  /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\NWK\" -I "D:\zigbee\4.                 /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\SEC\" -I "D:\zigbee\4.                 /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\SAPI\" -I "D:\zigbee\4.                /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\SYS\" -I "D:\zigbee\4.                 /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\ZDO\" -I "D:\zigbee\4.                 /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\ZMAC\F8W\" -I "D:\zigbee\4.                  /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\ZMAC\" -I "D:\zigbee\4.                      /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\SERVICES\SADDR\" -I "D:\zigbee\4.            /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\SERVICES\SDATA\" -I "D:\zigbee\4.            /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\INCLUDE\" -I "D:\zigbee\4.               /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.            /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.       /
//                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú» /
//                          ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs       /
//                          --require_prototypes                              /
//    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. /
//                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\RouterEB /
//                          -Pro\List\OSAL_Nv.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Nv

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??compactPage?relay,0203H
        FUNCTION ??findItem?relay,0203H
        FUNCTION ??initItem?relay,0203H
        FUNCTION ??initNV?relay,0203H
        FUNCTION ??initPage?relay,0203H
        PUBLIC ??osal_nv_init?relay
        FUNCTION ??osal_nv_init?relay,0203H
        PUBLIC ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,0203H
        PUBLIC ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,0203H
        PUBLIC ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,0203H
        PUBLIC ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,0203H
        FUNCTION ??setItem?relay,0203H
        FUNCTION ??writeBuf?relay,0203H
        FUNCTION ??writeItem?relay,0203H
        FUNCTION ??xferBuf?relay,0203H
        PUBLIC _nvBuf
        PUBLIC _nvIEEE
        FUNCTION compactPage,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        FUNCTION findItem,021203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION initItem,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION initNV,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        FUNCTION initPage,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 42, STACK
        PUBLIC osal_nv_init
        FUNCTION osal_nv_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_nv_item_init
        FUNCTION osal_nv_item_init,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osal_nv_item_len
        FUNCTION osal_nv_item_len,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC osal_nv_read
        FUNCTION osal_nv_read,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osal_nv_write
        FUNCTION osal_nv_write,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 43, STACK
        FUNCTION setItem,021203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        FUNCTION writeBuf,021203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION writeItem,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        FUNCTION xferBuf,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 26, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
HalFlashRead        SYMBOL "HalFlashRead"
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
HalFlashWrite       SYMBOL "HalFlashWrite"
HalFlashErase       SYMBOL "HalFlashErase"
??HalAdcCheckVdd?relay SYMBOL "?relay", HalAdcCheckVdd
??HalFlashErase?relay SYMBOL "?relay", HalFlashErase
??HalFlashRead?relay SYMBOL "?relay", HalFlashRead
??HalFlashWrite?relay SYMBOL "?relay", HalFlashWrite
osal_nv_init        SYMBOL "osal_nv_init"
??osal_nv_init?relay SYMBOL "?relay", osal_nv_init
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write

        EXTERN HalFlashRead
        FUNCTION HalFlashRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashWrite
        FUNCTION HalFlashWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashErase
        FUNCTION HalFlashErase,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalAdcCheckVdd?relay
        FUNCTION ??HalAdcCheckVdd?relay,00H
        EXTERN ??HalFlashErase?relay
        FUNCTION ??HalFlashErase?relay,00H
        EXTERN ??HalFlashRead?relay
        FUNCTION ??HalFlashRead?relay,00H
        EXTERN ??HalFlashWrite?relay
        FUNCTION ??HalFlashWrite?relay,00H

// D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\osal\mcu\cc2530\OSAL_Nv.c
//    1 /**************************************************************************************************
//    2   Filename:       OSAL_Nv.c
//    3   Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
//    4   Revision:       $Revision: 17715 $
//    5 
//    6   Description:    This module contains the OSAL non-volatile memory functions.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /**************************************************************************************************
//   41   Notes:
//   42     - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
//   43       be reserved for use by this module.
//   44 **************************************************************************************************/
//   45 
//   46 /*********************************************************************
//   47  * INCLUDES
//   48  */
//   49 
//   50 #include "hal_adc.h"
//   51 #include "hal_flash.h"
//   52 #include "hal_types.h"
//   53 #include "ZComdef.h"
//   54 #include "OSAL_Nv.h"
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
//   61 #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
//   62 #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
//   63 #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
//   64 
//   65 #define OSAL_NV_ACTIVE          0x00
//   66 #define OSAL_NV_ERASED          0xFF
//   67 #define OSAL_NV_ERASED_ID       0xFFFF
//   68 #define OSAL_NV_ZEROED_ID       0x0000
//   69 // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
//   70 #define OSAL_NV_SOURCE_ID       0x8000
//   71 
//   72 #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
//   73 
//   74 // In case pages 0-1 are ever used, define a null page value.
//   75 #define OSAL_NV_PAGE_NULL       0
//   76 
//   77 // In case item Id 0 is ever used, define a null item value.
//   78 #define OSAL_NV_ITEM_NULL       0
//   79 
//   80 #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
//   81 
//   82 #define OSAL_NV_PAGE_HDR_OFFSET 0
//   83 
//   84 /*********************************************************************
//   85  * MACROS
//   86  */
//   87 
//   88 #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
//   89 
//   90 #define OSAL_NV_DATA_SIZE( LEN )  \ 
//   91    ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
//   92 
//   93 #define OSAL_NV_ITEM_SIZE( LEN )  \ 
//   94   (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
//   95 
//   96 /*********************************************************************
//   97  * TYPEDEFS
//   98  */
//   99 
//  100 typedef struct
//  101 {
//  102   uint16 id;
//  103   uint16 len;   // Enforce Flash-WORD size on len.
//  104   uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
//  105   uint16 stat;  // Item status.
//  106 } osalNvHdr_t;
//  107 // Struct member offsets.
//  108 #define OSAL_NV_HDR_ID    0
//  109 #define OSAL_NV_HDR_LEN   2
//  110 #define OSAL_NV_HDR_CHK   4
//  111 #define OSAL_NV_HDR_STAT  6
//  112 
//  113 #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
//  114 #define OSAL_NV_HDR_SIZE  8
//  115 #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
//  116 
//  117 typedef struct
//  118 {
//  119   uint16 active;
//  120   uint16 inUse;
//  121   uint16 xfer;
//  122   uint16 spare;
//  123 } osalNvPgHdr_t;
//  124 // Struct member offsets.
//  125 #define OSAL_NV_PG_ACTIVE 0
//  126 #define OSAL_NV_PG_INUSE  2
//  127 #define OSAL_NV_PG_XFER   4
//  128 #define OSAL_NV_PG_SPARE  6
//  129 
//  130 #define OSAL_NV_PAGE_HDR_SIZE  8
//  131 #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
//  132 
//  133 typedef enum
//  134 {
//  135   eNvXfer,
//  136   eNvZero
//  137 } eNvHdrEnum;
//  138 
//  139 typedef enum
//  140 {
//  141   ePgActive,
//  142   ePgInUse,
//  143   ePgXfer,
//  144   ePgSpare
//  145 } ePgHdrEnum;
//  146 
//  147 /*********************************************************************
//  148  * EXTERNAL FUNCTIONS
//  149  */
//  150 
//  151 extern bool HalAdcCheckVdd(uint8 limit);
//  152 
//  153 /*********************************************************************
//  154  * GLOBAL VARIABLES
//  155  */
//  156 
//  157 #ifndef OAD_KEEP_NV_PAGES
//  158 // When NV pages are to remain intact during OAD download,
//  159 // the image itself should not include NV pages.
//  160 #pragma location="ZIGNV_ADDRESS_SPACE"

        RSEG ZIGNV_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//  161 __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
_nvBuf:
        DS 12288
//  162 #pragma required=_nvBuf
//  163 #pragma location="IEEE_ADDRESS_SPACE"

        RSEG IEEE_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//  164 __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
_nvIEEE:
        DS 8
        REQUIRE _nvBuf
//  165 #pragma required=_nvIEEE
//  166 #endif // OAD_KEEP_NV_PAGES
//  167 
//  168 /*********************************************************************
//  169  * LOCAL VARIABLES
//  170  */
//  171 
//  172 // Offset into the page of the first available erased space.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 static uint16 pgOff[OSAL_NV_PAGES_USED];
pgOff:
        DS 12
        REQUIRE __INIT_XDATA_Z
        REQUIRE _nvIEEE
//  174 
//  175 // Count of the bytes lost for the zeroed-out items.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 static uint16 pgLost[OSAL_NV_PAGES_USED];
pgLost:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  177 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 static uint8 pgRes;  // Page reserved for item compacting transfer.
pgRes:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 
//  180 // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 static uint8 findPg;
findPg:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 
//  183 /* Immediately before the voltage critical operations of a page erase or
//  184  * a word write, check bus voltage. If less than min, set global flag & abort.
//  185  * Since this is to be done at the lowest level, many void functions would have to be changed to
//  186  * return a value and code added to check that value before proceeding, resulting in a very
//  187  * expensive code size hit for implementing this properly. Therefore, use this global as follows:
//  188  * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
//  189  * check the value. Thus, the global is an accumulator of any error that occurred in any of the
//  190  * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
//  191  * may occur on any item init or write. This is much more expedient and code saving than adding
//  192  * return values and checking return values to early out. No matter which method is used, an NV
//  193  * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
//  194  * and checksums will detect and allow recovery from such a condition.
//  195  *
//  196  * One unfortunate side-effect of using the global fail flag vice adding and checking return
//  197  * values, is that when setting an item Id to zero has failed due to the low VCC check,
//  198  * the page lost-bytes counter is still updated. Having an artificially high lost-byte
//  199  * count makes it look like there are more bytes to recover from compacting a page than there may
//  200  * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
//  201  * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
//  202  * page offset count and page lost bytes count to their actual values.
//  203  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 static uint8 failF;
failF:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  205 
//  206 /*********************************************************************
//  207  * LOCAL FUNCTIONS
//  208  */
//  209 
//  210 static uint8  initNV( void );
//  211 
//  212 static void   setPageUse( uint8 pg, uint8 inUse );
//  213 static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
//  214 static void   erasePage( uint8 pg );
//  215 static void   compactPage( uint8 pg );
//  216 
//  217 static uint16 findItem( uint16 id );
//  218 static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
//  219 static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
//  220 
//  221 static uint16 calcChkB( uint16 len, uint8 *buf );
//  222 static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
//  223 
//  224 static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
//  225 static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
//  226 static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
//  227 static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
//  228 static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
//  229 
//  230 static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
//  231 
//  232 /*********************************************************************
//  233  * @fn      initNV
//  234  *
//  235  * @brief   Initialize the NV flash pages.
//  236  *
//  237  * @param   none
//  238  *
//  239  * @return  TRUE
//  240  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  241 static uint8 initNV( void )
initNV:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function initNV
        CODE
//  242 {
        FUNCALL initNV, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, HalFlashErase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, initNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  243   osalNvPgHdr_t pgHdr;
//  244   uint8 oldPg = OSAL_NV_PAGE_NULL;
        MOV     ?V0 + 2,#0x0
//  245   uint8 newPg = OSAL_NV_PAGE_NULL;
        MOV     ?V0 + 4,#0x0
//  246   uint8 findDups = FALSE;
        MOV     R6,#0x0
//  247   uint8 pg;
//  248 
//  249   pgRes = OSAL_NV_PAGE_NULL;
        MOV     DPTR,#pgRes
        CLR     A
        MOVX    @DPTR,A
//  250 
//  251   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV     ?V0 + 3,#0x79
//  252   {
//  253     HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
??initNV_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,?V0 + 3
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  254 
//  255     if ( pgHdr.active == OSAL_NV_ERASED_ID )
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_1:
        JNZ     ??initNV_2
//  256     {
//  257       if ( pgRes == OSAL_NV_PAGE_NULL )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JNZ     ??initNV_3
//  258       {
//  259         pgRes = pg;
        MOV     A,?V0 + 3
??initNV_4:
        MOVX    @DPTR,A
        SJMP    ??initNV_5
//  260       }
//  261       else
//  262       {
//  263         setPageUse( pg, TRUE );
??initNV_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??initNV_6
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,?V0 + 3
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,A
        MOV     R3,?V0 + 1
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        SJMP    ??initNV_5
??initNV_6:
        MOV     DPTR,#failF
        MOV     A,#0x1
        SJMP    ??initNV_4
//  264       }
//  265     }
//  266     else  // Page is active.
//  267     {
//  268       // If the page is not yet in use, it is the tgt of items from an xfer.
//  269       if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
??initNV_2:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_7
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_7:
        JNZ     ??initNV_8
//  270       {
//  271         newPg = pg;
        MOV     ?V0 + 4,?V0 + 3
        SJMP    ??initNV_5
//  272       }
//  273       // An Xfer from this page was in progress.
//  274       else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
??initNV_8:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_9
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_9:
        JZ      ??initNV_5
//  275       {
//  276         oldPg = pg;
        MOV     ?V0 + 2,?V0 + 3
//  277       }
//  278     }
//  279 
//  280     // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
//  281     if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
??initNV_5:
        ; Setup parameters for call to function initPage
        MOV     A,R6
        MOV     R4,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,?V0 + 3
        LCALL   ??initPage?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??initNV_10
//  282     {
//  283       findDups = TRUE;
        MOV     R6,#0x1
//  284       pg = OSAL_NV_PAGE_BEG-1;
        MOV     ?V0 + 3,#0x78
//  285       continue;
//  286     }
//  287   }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
??initNV_10:
        INC     ?V0 + 3
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x7f
        JNC     $+5
        LJMP    ??initNV_0 & 0xFFFF
//  288 
//  289   /* First the old page is erased, and then the new page is put into use.
//  290    * So if a transfer was in progress, the new page will always not yet be
//  291    * marked as in use, since that is the last step to ending a transfer.
//  292    */
//  293   if ( newPg != OSAL_NV_PAGE_NULL )
        MOV     A,?V0 + 4
        JZ      ??initNV_11
//  294   {
//  295     /* If there is already a fallow page reserved, keep it and put the newPg in use.
//  296      * An unfinished compaction will finish to the new reserve page and the old page
//  297      * will be erased and reserved.
//  298      */
//  299     if ( pgRes != OSAL_NV_PAGE_NULL )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JZ      ??initNV_12
//  300     {
//  301       setPageUse( newPg, TRUE );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??initNV_13
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,?V0 + 4
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,A
        MOV     R3,?V0 + 1
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  302     }
//  303     else if ( oldPg != OSAL_NV_PAGE_NULL )
//  304     {
//  305       pgRes = newPg;
//  306     }
//  307 
//  308     /* If a page compaction was interrupted and the page being compacted is not
//  309      * yet erased, then there may be items remaining to xfer before erasing.
//  310      */
//  311     if ( oldPg != OSAL_NV_PAGE_NULL )
??initNV_14:
        MOV     A,?V0 + 2
        JZ      ??initNV_11
//  312     {
//  313       compactPage( oldPg );
??initNV_15:
        ; Setup parameters for call to function compactPage
        MOV     R1,?V0 + 2
        LCALL   ??compactPage?relay
//  314     }
//  315   }
//  316 
//  317   /* If no page met the criteria to be the reserve page:
//  318    *  - A compactPage() failed or board reset before doing so.
//  319    *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
//  320    *    without erasing Flash?
//  321    */
//  322   if ( pgRes == OSAL_NV_PAGE_NULL )
??initNV_11:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JNZ     ??initNV_16
//  323   {
//  324     for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
??initNV_17:
        MOV     ?V0 + 3,#0x79
        MOV     R6,#pgOff & 0xff
        MOV     R7,#(pgOff >> 8) & 0xff
        MOV     ?V0 + 0,#pgLost & 0xff
        MOV     ?V0 + 1,#(pgLost >> 8) & 0xff
//  325     {
//  326       erasePage( pg );
??initNV_18:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JNZ     ??initNV_19
        MOV     DPTR,#failF
        MOV     A,#0x1
        SJMP    ??initNV_20
??initNV_13:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??initNV_14
??initNV_12:
        MOV     A,?V0 + 2
        JZ      ??initNV_17
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        SJMP    ??initNV_15
??initNV_19:
        ; Setup parameters for call to function HalFlashErase
        MOV     R1,?V0 + 3
        LCALL   ??HalFlashErase?relay
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
??initNV_20:
        MOVX    @DPTR,A
        INC     ?V0 + 3
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     A,R7
        ADDC    A,#0x0
        INC     R6
        INC     R6
        MOV     R7,A
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x7f
        JC      ??initNV_18
//  327     }
//  328     initNV();
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
//  329   }
//  330 
//  331   return TRUE;
??initNV_16:
        MOV     R1,#0x1
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  332 }
//  333 
//  334 /*********************************************************************
//  335  * @fn      setPageUse
//  336  *
//  337  * @brief   Set page header active/inUse state according to 'inUse'.
//  338  *
//  339  * @param   pg - Valid NV page to verify and init.
//  340  * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
//  341  *
//  342  * @return  none
//  343  */
//  344 static void setPageUse( uint8 pg, uint8 inUse )
//  345 {
//  346   osalNvPgHdr_t pgHdr;
//  347 
//  348   pgHdr.active = OSAL_NV_ZEROED_ID;
//  349 
//  350   if ( inUse )
//  351   {
//  352     pgHdr.inUse = OSAL_NV_ZEROED_ID;
//  353   }
//  354   else
//  355   {
//  356     pgHdr.inUse = OSAL_NV_ERASED_ID;
//  357   }
//  358 
//  359   writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
//  360 }
//  361 
//  362 /*********************************************************************
//  363  * @fn      initPage
//  364  *
//  365  * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
//  366  *
//  367  * @param   pg - Valid NV page to verify and init.
//  368  * @param   id - Valid NV item Id to use function as a "findItem".
//  369  *               If set to NULL then just perform the page initialization.
//  370  *
//  371  * @return  If 'id' is non-NULL and good checksums are found, return the offset
//  372  *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
//  373  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
initPage:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function initPage
        CODE
//  375 {
        FUNCALL initPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 14,R1
        MOV     ?V0 + 15,R4
//  376   uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
        MOV     ?V0 + 6,#0x8
        MOV     ?V0 + 7,#0x0
//  377   uint16 sz, lost = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
        ANL     A,#0x80
        MOV     ?V0 + 5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     ?V0 + 3,A
        SJMP    ??initPage_0
//  378   osalNvHdr_t hdr;
//  379 
//  380   do
//  381   {
//  382     HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
//  383 
//  384     if ( hdr.id == OSAL_NV_ERASED_ID )
//  385     {
//  386       break;
//  387     }
//  388     offset += OSAL_NV_HDR_SIZE;
//  389     sz = OSAL_NV_DATA_SIZE( hdr.len );
//  390 
//  391     // A bad 'len' write has blown away the rest of the page.
//  392     if ( (offset + sz) > OSAL_NV_PAGE_FREE )
//  393     {
//  394       lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
//  395       offset = OSAL_NV_PAGE_FREE;
//  396       break;
//  397     }
//  398 
//  399     if ( hdr.id != OSAL_NV_ZEROED_ID )
//  400     {
//  401       /* This trick allows function to do double duty for findItem() without
//  402        * compromising its essential functionality at powerup initialization.
//  403        */
//  404       if ( id != OSAL_NV_ITEM_NULL )
//  405       {
//  406         /* This trick allows asking to find the old/transferred item in case
//  407          * of a successful new item write that gets interrupted before the
//  408          * old item can be zeroed out.
//  409          */
//  410         if ( (id & 0x7fff) == hdr.id )
//  411         {
//  412           if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
//  413                (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
//  414           {
//  415             return offset;
//  416           }
//  417         }
//  418       }
//  419       // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
//  420       else
//  421       {
//  422         if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
//  423         {
//  424           if ( findDups )
//  425           {
//  426             if ( hdr.stat == OSAL_NV_ERASED_ID )
//  427             {
//  428               /* The trick of setting the MSB of the item Id causes the logic
//  429                * immediately above to return a valid page only if the header 'stat'
//  430                * indicates that it was the older item being transferred.
//  431                */
//  432               uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
//  433 
//  434               if ( off != OSAL_NV_ITEM_NULL )
//  435               {
//  436                 setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
//  437               }
//  438             }
//  439           }
//  440           // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
//  441           else if ( hdr.stat != OSAL_NV_ERASED_ID )
//  442           {
//  443             return OSAL_NV_ERASED_ID;
//  444           }
//  445         }
//  446         else
//  447         {
//  448           setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
//  449           lost += (OSAL_NV_HDR_SIZE + sz);
//  450         }
//  451       }
//  452     }
//  453     else
//  454     {
//  455       lost += (OSAL_NV_HDR_SIZE + sz);
??initPage_1:
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
//  456     }
//  457     offset += sz;
??initPage_2:
        MOV     A,?V0 + 6
        ADD     A,?V0 + 0
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 1
        MOV     ?V0 + 7,A
//  458 
//  459   } while ( TRUE );
??initPage_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     R1,?V0 + 14
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_3
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_3:
        JZ      ??initPage_4
        MOV     A,?V0 + 6
        ADD     A,#0x8
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V0 + 13,A
        MOV     A,?V0 + 12
        ANL     A,#0xfc
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 13
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 6
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x8
        JC      ??initPage_5
        MOV     A,R6
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x8
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 6
        MOV     R6,A
        MOV     A,R1
        SUBB    A,?V0 + 7
        MOV     R7,A
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x8
//  460 
//  461   pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
??initPage_4:
        MOV     A,?V0 + 14
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  462   pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
        MOV     A,#(pgLost + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgLost - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  463 
//  464   return OSAL_NV_ITEM_NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
??initPage_6:
        MOV     A,#0x10
        LJMP    ?Subroutine0 & 0xFFFF
??initPage_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??initPage_1 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??initPage_7
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??initPage_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??initPage_8:
        JZ      $+5
        LJMP    ??initPage_2 & 0xFFFF
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 5
        JNZ     ??initPage_9
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??initPage_10
        MOV     A,#-0x1
        XRL     A,R1
??initPage_10:
        JZ      $+5
        LJMP    ??initPage_2 & 0xFFFF
        SJMP    ??initPage_11
??initPage_9:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??initPage_12
        MOV     A,#-0x1
        XRL     A,R1
??initPage_12:
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
??initPage_11:
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        SJMP    ??initPage_6
??initPage_7:
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 12
        LCALL   ?US_SHR
        MOV     ?V0 + 8,?V0 + 12
        MOV     ?V0 + 9,?V0 + 13
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JZ      ??initPage_13
??initPage_14:
        MOV     A,?V0 + 8
        ADD     A,#-0x1
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,#-0x1
        MOV     ?V0 + 9,A
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 12,#0x4
        MOV     ?V0 + 13,#0x0
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
        MOV     R1,?V0 + 14
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,?V0 + 10
        ADD     A,#0x4
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
??initPage_15:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R0
        JNZ     ??initPage_16
        MOV     A,DPH
        XRL     A,R1
??initPage_16:
        JNZ     ??initPage_15
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     ??initPage_14
??initPage_13:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??initPage_17
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??initPage_17:
        JNZ     ??initPage_18
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 15
        JZ      ??initPage_19
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??initPage_20
        MOV     A,#-0x1
        XRL     A,R1
??initPage_20:
        JZ      $+5
        LJMP    ??initPage_2 & 0xFFFF
        ; Setup parameters for call to function findItem
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     R3,A
        LCALL   ??findItem?relay
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??setItem?relay
        LJMP    ??initPage_2 & 0xFFFF
??initPage_19:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??initPage_21
        MOV     A,#-0x1
        XRL     A,R1
??initPage_21:
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??initPage_6 & 0xFFFF
??initPage_18:
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     R1,?V0 + 14
        LCALL   ??setItem?relay
        LJMP    ??initPage_1 & 0xFFFF
        CFI EndBlock cfiBlock1
//  465 }
//  466 
//  467 /*********************************************************************
//  468  * @fn      erasePage
//  469  *
//  470  * @brief   Erases a page in Flash.
//  471  *
//  472  * @param   pg - Valid NV page to erase.
//  473  *
//  474  * @return  none
//  475  */
//  476 static void erasePage( uint8 pg )
//  477 {
//  478   if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
//  479   {
//  480     failF = TRUE;
//  481     return;
//  482   }
//  483 
//  484   HalFlashErase(pg);
//  485 
//  486   pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
//  487   pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
//  488 }
//  489 
//  490 /*********************************************************************
//  491  * @fn      compactPage
//  492  *
//  493  * @brief   Compacts the page specified.
//  494  *
//  495  * @param   srcPg - Valid NV page to erase.
//  496  *
//  497  * @return  none
//  498  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  499 static void compactPage( uint8 srcPg )
compactPage:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function compactPage
        CODE
//  500 {
        FUNCALL compactPage, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashErase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     ?V0 + 4,R1
//  501   uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  502   uint16 srcOff = OSAL_NV_ZEROED_ID;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  503   osalNvHdr_t hdr;
//  504 
//  505   // Mark page as being in process of compaction.
//  506   writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??compactPage_0
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,?V0 + 4
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,#0x1
        MOV     R3,?V0 + 1
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        SJMP    ??compactPage_1
??compactPage_0:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  507 
//  508   srcOff = OSAL_NV_PAGE_HDR_SIZE;
??compactPage_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LJMP    ??compactPage_2 & 0xFFFF
//  509 
//  510   do
//  511   {
//  512     uint16 sz;
//  513     HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
//  514 
//  515     if ( hdr.id == OSAL_NV_ERASED_ID )
//  516     {
//  517       break;
//  518     }
//  519 
//  520     srcOff += OSAL_NV_HDR_SIZE;
??compactPage_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  521 
//  522     if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x8
        JC      $+5
        LJMP    ??compactPage_4 & 0xFFFF
//  523     {
//  524       break;
//  525     }
//  526 
//  527     sz = OSAL_NV_DATA_SIZE( hdr.len );
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 10,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
        MOV     A,?V0 + 10
        ANL     A,#0xfc
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 11
        MOV     ?V0 + 9,A
//  528 
//  529     if ( hdr.id != OSAL_NV_ZEROED_ID )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??compactPage_5 & 0xFFFF
//  530     {
//  531       if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     ?V0 + 0,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 10
        LCALL   ?US_SHR
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
        MOV     A,R6
        ORL     A,R7
        JZ      ??compactPage_6
??compactPage_7:
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 10,#0x4
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,?V0 + 2
        ADD     A,#0x4
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
??compactPage_8:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 0
        ADD     A,R2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R0
        JNZ     ??compactPage_9
        MOV     A,DPH
        XRL     A,R1
??compactPage_9:
        JNZ     ??compactPage_8
        MOV     A,R6
        ORL     A,R7
        JNZ     ??compactPage_7
??compactPage_6:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??compactPage_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
??compactPage_10:
        JNZ     ??compactPage_11
//  532       {
//  533         setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 4
        LCALL   ??setItem?relay
//  534         writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
        ; Setup parameters for call to function writeBuf
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
//  535         dstOff += OSAL_NV_HDR_SIZE;
        MOV     A,?V0 + 6
        ADD     A,#0x8
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  536         xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
        ; Setup parameters for call to function xferBuf
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 4
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
//  537         dstOff += sz;
        MOV     A,?V0 + 6
        ADD     A,?V0 + 8
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 9
        MOV     ?V0 + 7,A
//  538       }
//  539 
//  540       setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
??compactPage_11:
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 4
        LCALL   ??setItem?relay
//  541     }
//  542 
//  543     srcOff += sz;
??compactPage_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 9
??compactPage_2:
        MOVX    @DPTR,A
//  544 
//  545   } while ( TRUE );
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 4
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??compactPage_12
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??compactPage_12:
        JZ      $+5
        LJMP    ??compactPage_3 & 0xFFFF
//  546 
//  547   pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
??compactPage_4:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  548 
//  549   /* In order to recover from a page compaction that is interrupted,
//  550    * the logic in osal_nv_init() depends upon the following order:
//  551    * 1. Compacted page is erased.
//  552    * 2. State of the target of compaction is changed ePgActive to ePgInUse.
//  553    */
//  554   erasePage( srcPg );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JNZ     ??compactPage_13
        MOV     DPTR,#failF
        MOV     A,#0x1
        SJMP    ??compactPage_14
??compactPage_13:
        ; Setup parameters for call to function HalFlashErase
        MOV     R1,?V0 + 4
        LCALL   ??HalFlashErase?relay
        MOV     A,?V0 + 4
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#(pgLost + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgLost - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??compactPage_14:
        MOVX    @DPTR,A
//  555 
//  556   // Mark the reserve page as being in use.
//  557   setPageUse( pgRes, TRUE );
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??compactPage_15
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,A
        MOV     R3,?V0 + 1
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        SJMP    ??compactPage_16
??compactPage_15:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  558 
//  559   // Set the reserve page to be the newly erased page.
//  560   pgRes = srcPg;
??compactPage_16:
        MOV     A,?V0 + 4
        MOV     DPTR,#pgRes
        MOVX    @DPTR,A
//  561 }
        MOV     A,#0x16
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Valid
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  562 
//  563 /*********************************************************************
//  564  * @fn      findItem
//  565  *
//  566  * @brief   Find an item Id in NV and return the page and offset to its data.
//  567  *
//  568  * @param   id - Valid NV item Id.
//  569  *
//  570  * @return  Offset of data corresponding to item Id, if found;
//  571  *          otherwise OSAL_NV_ITEM_NULL.
//  572  *
//  573  *          The page containing the item, if found;
//  574  *          otherwise no valid assignment made - left equal to item Id.
//  575  *
//  576  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  577 static uint16 findItem( uint16 id )
findItem:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function findItem
        CODE
//  578 {
        FUNCALL findItem, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??findItem_0
//  579   uint16 off;
//  580   uint8 pg;
//  581 
//  582   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
//  583   {
//  584     if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
//  585     {
//  586       findPg = pg;
//  587       return off;
//  588     }
//  589   }
//  590 
//  591   // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
//  592   if ( (id & OSAL_NV_SOURCE_ID) == 0 )
//  593   {
//  594     return findItem( id | OSAL_NV_SOURCE_ID );
??findItem_1:
        MOV     A,#-0x80
        ORL     A,R7
??findItem_0:
        MOV     R7,A
//  595   }
        MOV     ?V0 + 0,#0x79
??findItem_2:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??initPage?relay
        MOV     ?V0 + 3,R3
        MOV     R1,?V0 + 3
        MOV     A,R2
        ORL     A,R1
        JZ      ??findItem_3
        MOV     A,?V0 + 0
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
        SJMP    ??findItem_4
??findItem_3:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7f
        JC      ??findItem_2
        MOV     A,R7
        ANL     A,#0x80
        JZ      ??findItem_1
//  596   else
//  597   {
//  598     findPg = OSAL_NV_PAGE_NULL;
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
//  599     return OSAL_NV_ITEM_NULL;
        MOV     R2,A
        MOV     R3,A
        CFI EndBlock cfiBlock4
//  600   }
??findItem_4:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  601 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  602 
//  603 /*********************************************************************
//  604  * @fn      initItem
//  605  *
//  606  * @brief   An NV item is created and initialized with the data passed to the function, if any.
//  607  *
//  608  * @param   id  - Valid NV item Id.
//  609  * @param   len - Item data length.
//  610  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
//  611  *
//  612  * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
//  613  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  614 static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
initItem:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function initItem
        CODE
//  615 {
        FUNCALL initItem, writeItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  616   uint16 sz = OSAL_NV_ITEM_SIZE( len );
        MOV     A,R4
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        ADD     A,#0x8
        MOV     ?V0 + 4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
//  617   uint8 rtrn = FALSE;
        MOV     ?V0 + 3,#0x0
//  618   uint8 cnt = OSAL_NV_PAGES_USED;
        MOV     ?V0 + 8,#0x6
//  619   uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        INC     A
        MOV     R7,A
//  620   uint8 idx = 0;
//  621 
//  622   do {
//  623     if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
??initItem_0:
        MOV     A,R7
        CLR     C
        SUBB    A,#0x7f
        JC      ??initItem_1
//  624     {
//  625       pg = OSAL_NV_PAGE_BEG;
        MOV     R7,#0x79
//  626     }
//  627     if ( pg != pgRes )
??initItem_1:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,R7
        JZ      ??initItem_2
//  628     {
//  629       idx = pg - OSAL_NV_PAGE_BEG;
        MOV     A,#-0x79
        ADD     A,R7
        MOV     ?V0 + 2,A
//  630       if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#pgOff & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(pgOff >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#pgLost & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(pgLost >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,?V0 + 7
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 5
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x8
        JC      ??initItem_3
//  631       {
//  632         break;
//  633       }
//  634     }
//  635     pg++;
??initItem_2:
        INC     R7
//  636   } while (--cnt);
        DEC     ?V0 + 8
        MOV     A,?V0 + 8
        JNZ     ??initItem_0
        SJMP    ??initItem_4
//  637 
//  638   if (cnt)
??initItem_3:
        MOV     A,?V0 + 8
        JZ      ??initItem_4
//  639   {
//  640     // Item fits if an old page is compacted.
//  641     if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
        MOV     A,?V0 + 6
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 5
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x8
        JC      ??initItem_5
//  642     {
//  643       pg = pgRes;
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R7,A
//  644     }
//  645 
//  646     // New item is the first one written to the reserved page, then the old page is compacted.
//  647     rtrn = writeItem( pg, id, len, buf, flag );
??initItem_5:
        ; Setup parameters for call to function writeItem
        MOV     A,R6
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R7
        MOV     R1,A
        LCALL   ??writeItem?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
        MOV     ?V0 + 3,A
//  648 
//  649     if ( pg == pgRes )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,R7
        JNZ     ??initItem_4
//  650     {
//  651       if ( flag )
        MOV     A,#0x79
        ADD     A,?V0 + 2
        MOV     R1,A
        MOV     A,R6
        JZ      ??initItem_6
//  652       {
//  653         compactPage( OSAL_NV_PAGE_BEG+idx );
        ; Setup parameters for call to function compactPage
        LCALL   ??compactPage?relay
        SJMP    ??initItem_4
//  654       }
//  655       else
//  656       {
//  657         *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
??initItem_6:
        MOV     A,R1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  658       }
//  659     }
//  660   }
//  661 
//  662   return rtrn;
??initItem_4:
        MOV     R1,?V0 + 3
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  663 }
//  664 
//  665 /*********************************************************************
//  666  * @fn      setItem
//  667  *
//  668  * @brief   Set an item Id or status to mark its state.
//  669  *
//  670  * @param   pg - Valid NV page.
//  671  * @param   offset - Valid offset into the page of the item data - the header
//  672  *                   offset is calculated from this.
//  673  * @param   stat - Valid enum value for the item status.
//  674  *
//  675  * @return  none
//  676  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  677 static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
setItem:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function setItem
        CODE
//  678 {
        FUNCALL setItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 0,R4
//  679   osalNvHdr_t hdr;
//  680 
//  681   offset -= OSAL_NV_HDR_SIZE;
        MOV     A,R2
        ADD     A,#-0x8
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
//  682   HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  683 
//  684   if ( stat == eNvXfer )
        MOV     A,?V0 + 0
        JNZ     ??setItem_0
//  685   {
//  686     hdr.stat = OSAL_NV_ACTIVE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  687     writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??setItem_1
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 2
        ADD     A,#0x4
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?US_SHR
        MOV     ?V0 + 2,?V0 + 1
        MOV     ?V0 + 3,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP    ??setItem_2 & 0xFFFF
??setItem_1:
        MOV     DPTR,#failF
        MOV     A,#0x1
        SJMP    ??setItem_3
//  688 }
//  689   else // if ( stat == eNvZero )
//  690   {
//  691     uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
//  692                                                                           OSAL_NV_HDR_SIZE;
??setItem_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
//  693     hdr.id = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  694     writeWord( pg, offset, (uint8 *)(&hdr) );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??setItem_4
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     ?V0 + 4,?V0 + 1
        MOV     A,#0x9
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 5
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??setItem_5
??setItem_4:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  695     pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
??setItem_5:
        MOV     A,?V0 + 1
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgLost + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgLost - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
??setItem_3:
        MOVX    @DPTR,A
//  696   }
//  697 }
??setItem_2:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  698 
//  699 /*********************************************************************
//  700  * @fn      calcChkB
//  701  *
//  702  * @brief   Calculates the data checksum over the 'buf' parameter.
//  703  *
//  704  * @param   pg - A valid NV Flash page.
//  705  * @param   offset - A valid offset into the page.
//  706  * @param   len - Byte count of the data to be checksummed.
//  707  *
//  708  * @return  Calculated checksum of the data bytes.
//  709  */
//  710 static uint16 calcChkB( uint16 len, uint8 *buf )
//  711 {
//  712   uint8 fill = len % OSAL_NV_WORD_SIZE;
//  713   uint16 chk;
//  714 
//  715   if ( !buf )
//  716   {
//  717     chk = len * OSAL_NV_ERASED;
//  718   }
//  719   else
//  720   {
//  721     chk = 0;
//  722     while ( len-- )
//  723     {
//  724       chk += *buf++;
//  725     }
//  726   }
//  727 
//  728   // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
//  729   if ( fill )
//  730   {
//  731     chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
//  732   }
//  733 
//  734   return chk;
//  735 }
//  736 
//  737 /*********************************************************************
//  738  * @fn      calcChkF
//  739  *
//  740  * @brief   Calculates the data checksum by reading the data bytes from NV.
//  741  *
//  742  * @param   pg - A valid NV Flash page.
//  743  * @param   offset - A valid offset into the page.
//  744  * @param   len - Byte count of the data to be checksummed.
//  745  *
//  746  * @return  Calculated checksum of the data bytes.
//  747  */
//  748 static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
//  749 {
//  750   uint16 chk = 0;
//  751 
//  752   len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
//  753 
//  754   while ( len-- )
//  755   {
//  756     uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
//  757 
//  758     HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
//  759     offset += OSAL_NV_WORD_SIZE;
//  760 
//  761     for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
//  762     {
//  763       chk += tmp[cnt];
//  764     }
//  765   }
//  766 
//  767   return chk;
//  768 }
//  769 
//  770 /*********************************************************************
//  771  * @fn      writeWord
//  772  *
//  773  * @brief   Writes a Flash-WORD to NV.
//  774  *
//  775  * @param   pg - A valid NV Flash page.
//  776  * @param   offset - A valid offset into the page.
//  777  * @param   buf - Pointer to source buffer.
//  778  *
//  779  * @return  none
//  780  */
//  781 static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
//  782 {
//  783   offset = (offset >> 2) + ((uint16)pg << 9);
//  784 
//  785   if ( OSAL_NV_CHECK_BUS_VOLTAGE )
//  786   {
//  787     HalFlashWrite(offset, buf, 1);
//  788   }
//  789   else
//  790   {
//  791     failF = TRUE;
//  792   }
//  793 }
//  794 
//  795 /*********************************************************************
//  796  * @fn      writeWordM
//  797  *
//  798  * @brief   Writes multiple Flash-WORDs to NV.
//  799  *
//  800  * @param   pg - A valid NV Flash page.
//  801  * @param   offset - A valid offset into the page.
//  802  * @param   buf - Pointer to source buffer.
//  803  * @param   cnt - Number of 4-byte blocks to write.
//  804  *
//  805  * @return  none
//  806  */
//  807 static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
//  808 {
//  809   offset = (offset >> 2) + ((uint16)pg << 9);
//  810 
//  811   if ( OSAL_NV_CHECK_BUS_VOLTAGE )
//  812   {
//  813     HalFlashWrite(offset, buf, cnt);
//  814   }
//  815   else
//  816   {
//  817     failF = TRUE;
//  818   }
//  819 }
//  820 
//  821 /*********************************************************************
//  822  * @fn      writeWordH
//  823  *
//  824  * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
//  825  *
//  826  * @param   pg - A valid NV Flash page.
//  827  * @param   offset - A valid offset into the page.
//  828  * @param   buf - Pointer to source buffer.
//  829  *
//  830  * @return  none
//  831  */
//  832 static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
//  833 {
//  834   uint8 tmp[4];
//  835 
//  836   tmp[0] = buf[0];
//  837   tmp[1] = buf[1];
//  838   tmp[2] = OSAL_NV_ERASED;
//  839   tmp[3] = OSAL_NV_ERASED;
//  840 
//  841   writeWord( pg, offset, tmp );
//  842 }
//  843 
//  844 /*********************************************************************
//  845  * @fn      writeBuf
//  846  *
//  847  * @brief   Writes a data buffer to NV.
//  848  *
//  849  * @param   dstPg - A valid NV Flash page.
//  850  * @param   offset - A valid offset into the page.
//  851  * @param   len  - Byte count of the data to write.
//  852  * @param   buf  - The data to write.
//  853  *
//  854  * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
//  855  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  856 static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
writeBuf:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function writeBuf
        CODE
//  857 {
        FUNCALL writeBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  858   uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV     A,R2
        ANL     A,#0x3
        MOV     R6,A
//  859   uint8 tmp[OSAL_NV_WORD_SIZE];
//  860 
//  861   if ( rem )
        JNZ     $+5
        LJMP    ??writeBuf_0 & 0xFFFF
//  862   {
//  863     dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
        MOV     A,#-0x4
        ANL     A,?V0 + 2
        MOV     ?V0 + 2,A
//  864     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 6,#0x4
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 6,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
??writeBuf_1:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??writeBuf_2
//  865 
//  866     while ( (rem < OSAL_NV_WORD_SIZE) && len )
//  867     {
//  868       tmp[rem++] = *buf++;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        INC     R6
//  869       len--;
        MOV     A,?V0 + 4
        ADD     A,#-0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
//  870     }
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??writeBuf_1
//  871 
//  872     writeWord( dstPg, dstOff, tmp );
??writeBuf_2:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeBuf_3
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 6,#0x1
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 8,R7
        MOV     ?V0 + 9,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 8
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 9
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??writeBuf_4
??writeBuf_3:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  873     dstOff += OSAL_NV_WORD_SIZE;
??writeBuf_4:
        MOV     A,?V0 + 2
        ADD     A,#0x4
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  874   }
//  875 
//  876   rem = len % OSAL_NV_WORD_SIZE;
??writeBuf_0:
        MOV     A,?V0 + 4
        ANL     A,#0x3
        MOV     R6,A
//  877   len /= OSAL_NV_WORD_SIZE;
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
//  878 
//  879   if ( len )
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??writeBuf_5
//  880   {
//  881     writeWordM( dstPg, dstOff, buf, len );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeBuf_6
        ; Setup parameters for call to function HalFlashWrite
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 8,R7
        MOV     ?V0 + 9,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 8
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 9
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??writeBuf_7
??writeBuf_6:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  882     dstOff += OSAL_NV_WORD_SIZE * len;
??writeBuf_7:
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     ?V0 + 3,A
//  883     buf += OSAL_NV_WORD_SIZE * len;
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  884   }
//  885 
//  886   if ( rem )
??writeBuf_5:
        MOV     A,R6
        JNZ     $+5
        LJMP    ??writeBuf_8 & 0xFFFF
//  887   {
//  888     uint8 idx = 0;
//  889     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,DPL
        MOV     R1,DPH
//  890     while ( rem-- )
//  891     {
//  892       tmp[idx++] = *buf++;
??writeBuf_9:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
//  893     }
        DEC     R6
        MOV     A,R6
        JNZ     ??writeBuf_9
//  894     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeBuf_10
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     ?V0 + 0,R7
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??writeBuf_8
??writeBuf_10:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  895   }
//  896 }
??writeBuf_8:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  897 
//  898 /*********************************************************************
//  899  * @fn      xferBuf
//  900  *
//  901  * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
//  902  *
//  903  * @return  none
//  904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  905 static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
xferBuf:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function xferBuf
        CODE
//  906 {
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 8,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 3,R4
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  907   uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 2,A
//  908   uint8 tmp[OSAL_NV_WORD_SIZE];
//  909 
//  910   if ( rem )
        JNZ     $+5
        LJMP    ??xferBuf_0 & 0xFFFF
//  911   {
//  912     dstOff -= rem;
        MOV     ?V0 + 6,A
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 6
        MOV     R6,A
        MOV     A,R7
        SUBB    A,#0x0
        MOV     R7,A
//  913     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 6,#0x4
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 3
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 6,?V0 + 2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
??xferBuf_1:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??xferBuf_2
//  914 
//  915     while ( (rem < OSAL_NV_WORD_SIZE) && len )
//  916     {
//  917       HalFlashRead(srcPg, srcOff, tmp+rem, 1);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 10,#0x1
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 8
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  918       srcOff++;
        MOV     A,?V0 + 4
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
//  919       rem++;
        INC     ?V0 + 2
//  920       len--;
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
//  921     }
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x4
        JC      ??xferBuf_1
//  922 
//  923     writeWord( dstPg, dstOff, tmp );
??xferBuf_2:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??xferBuf_3
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 6,R6
        MOV     ?V0 + 7,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 2,?V0 + 3
        MOV     ?V0 + 10,?V0 + 2
        MOV     ?V0 + 11,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 10
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 11
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        SJMP    ??xferBuf_4
??xferBuf_3:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  924     dstOff += OSAL_NV_WORD_SIZE;
??xferBuf_4:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  925   }
//  926 
//  927   rem = len % OSAL_NV_WORD_SIZE;
??xferBuf_0:
        MOV     A,?V0 + 0
        ANL     A,#0x3
        MOV     ?V0 + 2,A
//  928   len /= OSAL_NV_WORD_SIZE;
        MOV     ?V0 + 6,?V0 + 0
        MOV     ?V0 + 7,?V0 + 1
        MOV     A,#0x2
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 6
        MOV     ?V0 + 1,?V0 + 7
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??xferBuf_5 & 0xFFFF
        MOV     ?V0 + 10,?V0 + 3
        MOV     ?V0 + 11,#0x0
        MOV     A,#0x9
        MOV     R0,#?V0 + 10
        LCALL   ?S_SHL
        MOV     ?V0 + 7,?V0 + 11
??xferBuf_6:
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
//  929 
//  930   while ( len-- )
//  931   {
//  932     HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 10,#0x4
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 8
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  933     srcOff += OSAL_NV_WORD_SIZE;
        MOV     A,?V0 + 4
        ADD     A,#0x4
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
//  934     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??xferBuf_7
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 10,#0x1
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 10,R6
        MOV     ?V0 + 11,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 10
        LCALL   ?US_SHR
        MOV     A,?V0 + 10
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 11
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        SJMP    ??xferBuf_8
??xferBuf_7:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  935     dstOff += OSAL_NV_WORD_SIZE;
??xferBuf_8:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??xferBuf_6 & 0xFFFF
//  936   }
//  937 
//  938   if ( rem )
??xferBuf_5:
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??xferBuf_9 & 0xFFFF
//  939   {
//  940     uint8 idx = 0;
//  941     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 3
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
//  942     while ( rem-- )
//  943     {
//  944       HalFlashRead(srcPg, srcOff, tmp+idx, 1);
??xferBuf_10:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 8
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  945       srcOff++;
        MOV     A,?V0 + 4
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
//  946       idx++;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
//  947     }
        DEC     ?V0 + 2
        MOV     A,?V0 + 2
        JNZ     ??xferBuf_10
//  948     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??xferBuf_11
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     ?V0 + 2,?V0 + 3
        MOV     ?V0 + 4,?V0 + 2
        MOV     ?V0 + 5,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 5
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        SJMP    ??xferBuf_9
??xferBuf_11:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  949   }
//  950 }
??xferBuf_9:
        MOV     A,#0x4
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock10
//  951 
//  952 /*********************************************************************
//  953  * @fn      writeItem
//  954  *
//  955  * @brief   Writes an item header/data combo to the specified NV page.
//  956  *
//  957  * @param   pg - Valid NV Flash page.
//  958  * @param   id - Valid NV item Id.
//  959  * @param   len  - Byte count of the data to write.
//  960  * @param   buf  - The data to write. If NULL, no data/checksum write.
//  961  * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
//  962  *
//  963  * @return  TRUE if header/data to write matches header/data read back, else FALSE.
//  964  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  965 static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
writeItem:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function writeItem
        CODE
//  966 {
        FUNCALL writeItem, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  967   uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     ?V0 + 14,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 15,A
        MOV     DPL,?V0 + 14
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  968   uint8 rtrn = FALSE;
        MOV     ?V0 + 3,#0x0
//  969   osalNvHdr_t hdr;
//  970 
//  971   if ( pg == pgRes )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??writeItem_0
//  972   {
//  973     /* Mark reserve page as being active, in process of receiving items.
//  974      * Invoking function must effect a page compaction.
//  975      */
//  976     setPageUse( pg, FALSE );
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeItem_1
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 8,?V0 + 2
        MOV     A,#0x9
        MOV     R0,#?V0 + 8
        LCALL   ?S_SHL
        MOV     R2,A
        MOV     R3,?V0 + 9
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        SJMP    ??writeItem_0
??writeItem_1:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  977   }
//  978 
//  979   hdr.id = id;
??writeItem_0:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 12
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 13
        MOVX    @DPTR,A
//  980   hdr.len = len;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  981 
//  982   writeWord( pg, offset, (uint8 *)&hdr );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeItem_2
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 8
        LCALL   ?US_SHR
        MOV     ?V0 + 10,?V0 + 2
        MOV     ?V0 + 11,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 10
        LCALL   ?S_SHL
        MOV     A,?V0 + 8
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 9
        ADDC    A,?V0 + 11
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        SJMP    ??writeItem_3
??writeItem_2:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  983   HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??writeItem_3:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x8
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
//  984 
//  985   if ( (hdr.id == id) && (hdr.len == len) )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 12
        JNZ     ??writeItem_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 13
??writeItem_4:
        JZ      $+5
        LJMP    ??writeItem_5 & 0xFFFF
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??writeItem_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
??writeItem_6:
        JZ      $+5
        LJMP    ??writeItem_5 & 0xFFFF
//  986   {
//  987     if ( flag )
        MOV     A,?V0 + 4
        JNZ     $+5
        LJMP    ??writeItem_7 & 0xFFFF
//  988     {
//  989       uint16 chk = calcChkB( len, buf );
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        ANL     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??writeItem_8
        MOV     A,R0
        MOV     B,#-0x1
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#-0x1
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        SJMP    ??writeItem_9
??writeItem_8:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R0
        ORL     A,R1
        JZ      ??writeItem_9
??writeItem_10:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        INC     DPTR
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??writeItem_10
??writeItem_9:
        MOV     A,?V0 + 4
        JZ      ??writeItem_11
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        MOV     B,#-0x1
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#-0x1
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
??writeItem_11:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  990 
//  991       offset += OSAL_NV_HDR_SIZE;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  992       if ( buf != NULL )
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??writeItem_12
//  993       {
//  994         writeBuf( pg, offset, len, buf );
        ; Setup parameters for call to function writeBuf
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
//  995       }
//  996 
//  997       if ( chk == calcChkF( pg, offset, len ) )
??writeItem_12:
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x3
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 8
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??writeItem_13
??writeItem_14:
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 8,#0x4
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 2
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,?V0 + 4
        ADD     A,#0x4
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,DPL
        MOV     R1,DPH
??writeItem_15:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 6
        ADD     A,R2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R0
        JNZ     ??writeItem_16
        MOV     A,DPH
        XRL     A,R1
??writeItem_16:
        JNZ     ??writeItem_15
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??writeItem_14
??writeItem_13:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 6
        JNZ     ??writeItem_17
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 7
??writeItem_17:
        JZ      $+5
        LJMP    ??writeItem_5 & 0xFFFF
//  998       {
//  999         writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeItem_18
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#-0x4
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 1
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        SJMP    ??writeItem_19
??writeItem_18:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1000         HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??writeItem_19:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
// 1001 
// 1002         if ( chk == hdr.chk )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??writeItem_20
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??writeItem_20:
        JNZ     ??writeItem_5
// 1003         {
// 1004           rtrn = pg;
??writeItem_7:
        MOV     ?V0 + 3,?V0 + 2
// 1005         }
// 1006       }
// 1007     }
// 1008     else
// 1009     {
// 1010       rtrn = pg;
// 1011     }
// 1012   }
// 1013 
// 1014   len = OSAL_NV_ITEM_SIZE( hdr.len );
// 1015   pgOff[pg-OSAL_NV_PAGE_BEG] += len;
??writeItem_5:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
// 1016 
// 1017   return rtrn;
        MOV     R1,?V0 + 3
        MOV     A,#0x16
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock11
// 1018 }
// 1019 
// 1020 /*********************************************************************
// 1021  * @fn      osal_nv_init
// 1022  *
// 1023  * @brief   Initialize NV service.
// 1024  *
// 1025  * @param   p - Not used.
// 1026  *
// 1027  * @return  none
// 1028  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1029 void osal_nv_init( void *p )
osal_nv_init:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function osal_nv_init
        CODE
// 1030 {
        FUNCALL osal_nv_init, initNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1031   (void)p;  // Suppress Lint warning.
// 1032   (void)initNV();  // Always returns TRUE after pages have been erased.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1033 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
// 1034 
// 1035 /*********************************************************************
// 1036  * @fn      osal_nv_item_init
// 1037  *
// 1038  * @brief   If the NV item does not already exist, it is created and
// 1039  *          initialized with the data passed to the function, if any.
// 1040  *          This function must be called before calling osal_nv_read() or
// 1041  *          osal_nv_write().
// 1042  *
// 1043  * @param   id  - Valid NV item Id.
// 1044  * @param   len - Item length.
// 1045  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
// 1046  *
// 1047  * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
// 1048  *          ZSUCCESS       - Id already existed, no action taken.
// 1049  *          NV_OPER_FAILED - Failure to find or create Id.
// 1050  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1051 uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
osal_nv_item_init:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function osal_nv_item_init
        CODE
// 1052 {
        FUNCALL osal_nv_item_init, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, initItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, initNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
// 1053   /* Global fail flag for fail due to low bus voltage has less impact on code
// 1054    * size than passing back a return value all the way from the lowest level.
// 1055    */
// 1056   failF = FALSE;
        MOV     DPTR,#failF
        CLR     A
        MOVX    @DPTR,A
// 1057 
// 1058   if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        SJMP    ??osal_nv_item_init_0
??osal_nv_item_init_1:
        MOV     A,#-0x80
        ORL     A,?V0 + 3
        MOV     ?V0 + 3,A
??osal_nv_item_init_0:
        MOV     ?V0 + 6,#0x79
??osal_nv_item_init_2:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 6
        LCALL   ??initPage?relay
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??osal_nv_item_init_3
        MOV     A,?V0 + 6
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
// 1059   {
// 1060     return ZSUCCESS;
        MOV     R1,#0x0
        SJMP    ??osal_nv_item_init_4
// 1061   }
??osal_nv_item_init_3:
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x7f
        JC      ??osal_nv_item_init_2
        MOV     A,?V0 + 3
        ANL     A,#0x80
        JZ      ??osal_nv_item_init_1
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
// 1062   else if ( initItem( TRUE, id, len, buf ) )
        ; Setup parameters for call to function initItem
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x1
        LCALL   ??initItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JZ      ??osal_nv_item_init_5
// 1063   {
// 1064     if ( failF )
        MOV     DPTR,#failF
        MOVX    A,@DPTR
        JZ      ??osal_nv_item_init_6
// 1065     {
// 1066       (void)initNV();  // See comment at the declaration of failF.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1067       return NV_OPER_FAILED;
        SJMP    ??osal_nv_item_init_5
// 1068     }
// 1069     else
// 1070     {
// 1071       return NV_ITEM_UNINIT;
??osal_nv_item_init_6:
        MOV     R1,#0x9
        SJMP    ??osal_nv_item_init_4
// 1072     }
// 1073   }
// 1074   else
// 1075   {
// 1076     return NV_OPER_FAILED;
??osal_nv_item_init_5:
        MOV     R1,#0xa
// 1077   }
??osal_nv_item_init_4:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock13
// 1078 }
// 1079 
// 1080 /*********************************************************************
// 1081  * @fn      osal_nv_item_len
// 1082  *
// 1083  * @brief   Get the data length of the item stored in NV memory.
// 1084  *
// 1085  * @param   id  - Valid NV item Id.
// 1086  *
// 1087  * @return  Item length, if found; zero otherwise.
// 1088  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1089 uint16 osal_nv_item_len( uint16 id )
osal_nv_item_len:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function osal_nv_item_len
        CODE
// 1090 {
        FUNCALL osal_nv_item_len, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_len, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1091   uint16 offset = findItem( id );
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??osal_nv_item_len_0
??osal_nv_item_len_1:
        MOV     A,#-0x80
        ORL     A,R7
??osal_nv_item_len_0:
        MOV     R7,A
        MOV     ?V0 + 0,#0x79
??osal_nv_item_len_2:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??initPage?relay
        MOV     ?V0 + 3,R3
        MOV     R1,?V0 + 3
        MOV     A,R2
        ORL     A,R1
        JZ      ??osal_nv_item_len_3
        MOV     A,?V0 + 0
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
// 1092 
// 1093   if ( offset == OSAL_NV_ITEM_NULL )
// 1094   {
// 1095     return 0;
// 1096   }
// 1097   else
// 1098   {
// 1099     osalNvHdr_t hdr;
// 1100     HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R2
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1101     return hdr.len;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??osal_nv_item_len_4
// 1102   }
??osal_nv_item_len_3:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7f
        JC      ??osal_nv_item_len_2
        MOV     A,R7
        ANL     A,#0x80
        JZ      ??osal_nv_item_len_1
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
        MOV     R2,A
??osal_nv_item_len_4:
        MOV     R3,A
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock14
// 1103 }
// 1104 
// 1105 /*********************************************************************
// 1106  * @fn      osal_nv_write
// 1107  *
// 1108  * @brief   Write a data item to NV. Function can write an entire item to NV or
// 1109  *          an element of an item by indexing into the item with an offset.
// 1110  *
// 1111  * @param   id  - Valid NV item Id.
// 1112  * @param   ndx - Index offset into item
// 1113  * @param   len - Length of data to write.
// 1114  * @param  *buf - Data to write.
// 1115  *
// 1116  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1117  *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
// 1118  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1119 uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_write:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function osal_nv_write
        CODE
// 1120 {
        FUNCALL osal_nv_write, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, initItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, initNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
// 1121   uint8 rtrn = ZSUCCESS;
        MOV     ?V0 + 6,#0x0
// 1122 
// 1123   /* Global fail flag for fail due to low bus voltage has less impact on code
// 1124    * size than passing back a return value all the way from the lowest level.
// 1125    */
// 1126   failF = FALSE;
        MOV     DPTR,#failF
        CLR     A
        MOVX    @DPTR,A
// 1127 
// 1128   if ( len != 0 )
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     $+5
        LJMP    ??osal_nv_write_0 & 0xFFFF
// 1129   {
// 1130     osalNvHdr_t hdr;
// 1131     uint16 origOff, srcOff;
// 1132     uint16 cnt;
// 1133     uint8 *ptr;
// 1134 
// 1135     origOff = srcOff = findItem( id );
        MOV     R7,?V0 + 11
        SJMP    ??osal_nv_write_1
??osal_nv_write_2:
        MOV     A,#-0x80
        ORL     A,R7
        MOV     R7,A
??osal_nv_write_1:
        MOV     ?V0 + 2,#0x79
??osal_nv_write_3:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     R2,?V0 + 10
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??initPage?relay
        MOV     ?V0 + 5,R3
        MOV     R1,?V0 + 5
        MOV     A,R2
        ORL     A,R1
        JZ      ??osal_nv_write_4
        MOV     A,?V0 + 2
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??osal_nv_write_5
??osal_nv_write_4:
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x7f
        JC      ??osal_nv_write_3
        MOV     A,R7
        ANL     A,#0x80
        JZ      ??osal_nv_write_2
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
        MOV     R6,A
??osal_nv_write_5:
        MOV     R7,A
        MOV     ?V0 + 14,R6
        MOV     ?V0 + 15,R7
// 1136     if ( srcOff == OSAL_NV_ITEM_NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_nv_write_6
// 1137     {
// 1138       return NV_ITEM_UNINIT;
        MOV     R1,#0x9
        LJMP    ??osal_nv_write_7 & 0xFFFF
// 1139     }
// 1140 
// 1141     HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??osal_nv_write_6:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1142     if ( hdr.len < (ndx + len) )
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        ADD     A,?V0 + 8
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 9
        MOV     R1,A
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??osal_nv_write_8
// 1143     {
// 1144       return NV_OPER_FAILED;
        MOV     R1,#0xa
        LJMP    ??osal_nv_write_7 & 0xFFFF
// 1145     }
// 1146 
// 1147     srcOff += ndx;
??osal_nv_write_8:
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
// 1148     ptr = buf;
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
// 1149     cnt = len;
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
// 1150     while ( cnt )
// 1151     {
// 1152       uint8 tmp;
// 1153       HalFlashRead(findPg, srcOff++, &tmp, 1);
??osal_nv_write_9:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 12,#0x1
        MOV     ?V0 + 13,#0x0
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1154       if ( tmp != *ptr++ )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??osal_nv_write_10
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
// 1155       {
// 1156         break;
// 1157       }
// 1158       cnt--;
// 1159     }
        MOV     A,?V0 + 4
        ADD     A,#-0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??osal_nv_write_9
        LJMP    ??osal_nv_write_11 & 0xFFFF
// 1160 
// 1161     if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
// 1162     {
// 1163       uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
??osal_nv_write_10:
        ; Setup parameters for call to function initItem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
        MOV     R1,#0x0
        LCALL   ??initItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1164 
// 1165       if ( dstPg != OSAL_NV_PAGE_NULL )
        JNZ     $+5
        LJMP    ??osal_nv_write_12 & 0xFFFF
// 1166       {
// 1167         uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1168         uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     ?V0 + 4,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R7,A
// 1169         uint8 srcPg = findPg;
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
// 1170         srcOff = origOff;
// 1171 
// 1172         setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x0
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        MOV     R1,A
        LCALL   ??setItem?relay
// 1173 
// 1174         xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
        ; Setup parameters for call to function xferBuf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 10,R6
        MOV     ?V0 + 11,R7
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,?V0 + 2
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        MOV     R1,?V0 + 3
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1175         srcOff += ndx;
// 1176         dstOff += ndx;
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
// 1177 
// 1178         writeBuf( dstPg, dstOff, len, buf );
        ; Setup parameters for call to function writeBuf
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1179         srcOff += len;
// 1180         dstOff += len;
// 1181 
// 1182         xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
        ; Setup parameters for call to function xferBuf
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 8
        MOV     ?V0 + 10,A
        MOV     A,R1
        SUBB    A,?V0 + 9
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,R6
        ADD     A,?V0 + 8
        MOV     ?V0 + 10,A
        MOV     A,R7
        ADDC    A,?V0 + 9
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,?V0 + 2
        MOV     A,?V0 + 14
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,R0
        ADD     A,?V0 + 8
        MOV     R2,A
        MOV     A,R1
        ADDC    A,?V0 + 9
        MOV     R3,A
        MOV     R1,?V0 + 3
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1183 
// 1184         // Calculate and write the new checksum.
// 1185         dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R7,A
// 1186         tmp = calcChkF( dstPg, dstOff, hdr.len );
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 10
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 10
        MOV     ?V0 + 1,?V0 + 11
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??osal_nv_write_13
??osal_nv_write_14:
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 10,#0x4
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,?V0 + 2
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,?V0 + 4
        ADD     A,#0x4
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
??osal_nv_write_15:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 8
        ADD     A,R2
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R0
        JNZ     ??osal_nv_write_16
        MOV     A,DPH
        XRL     A,R1
??osal_nv_write_16:
        JNZ     ??osal_nv_write_15
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??osal_nv_write_14
??osal_nv_write_13:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 9
        MOVX    @DPTR,A
// 1187         dstOff -= OSAL_NV_HDR_SIZE;
        MOV     A,R6
        ADD     A,#-0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
// 1188         writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??osal_nv_write_17
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 1
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        SJMP    ??osal_nv_write_18
??osal_nv_write_17:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1189         HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??osal_nv_write_18:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
// 1190 
// 1191         if ( tmp == hdr.chk )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??osal_nv_write_19
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??osal_nv_write_19:
        JNZ     ??osal_nv_write_20
// 1192         {
// 1193           setItem( srcPg, origOff, eNvZero );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        MOV     R1,?V0 + 3
        LCALL   ??setItem?relay
        SJMP    ??osal_nv_write_21
// 1194         }
// 1195         else
// 1196         {
// 1197           rtrn = NV_OPER_FAILED;
??osal_nv_write_20:
        MOV     ?V0 + 6,#0xa
// 1198         }
// 1199 
// 1200         if ( dstPg == pgRes )
??osal_nv_write_21:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??osal_nv_write_11
// 1201         {
// 1202           compactPage( comPg );
        ; Setup parameters for call to function compactPage
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??compactPage?relay
        SJMP    ??osal_nv_write_11
// 1203         }
// 1204       }
// 1205       else
// 1206       {
// 1207         rtrn = NV_OPER_FAILED;
??osal_nv_write_12:
        MOV     ?V0 + 6,#0xa
// 1208       }
// 1209     }
// 1210   }
// 1211 
// 1212   if ( failF )
??osal_nv_write_11:
        MOV     DPTR,#failF
        MOVX    A,@DPTR
        JZ      ??osal_nv_write_0
// 1213   {
// 1214     (void)initNV();  // See comment at the declaration of failF.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1215     rtrn = NV_OPER_FAILED;
        MOV     ?V0 + 6,#0xa
// 1216   }
// 1217 
// 1218   return rtrn;
??osal_nv_write_0:
        MOV     R1,?V0 + 6
??osal_nv_write_7:
        MOV     A,#0xf
        CFI EndBlock cfiBlock15
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
// 1219 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Valid
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock16
// 1220 
// 1221 /*********************************************************************
// 1222  * @fn      osal_nv_read
// 1223  *
// 1224  * @brief   Read data from NV. This function can be used to read an entire item from NV or
// 1225  *          an element of an item by indexing into the item with an offset.
// 1226  *          Read data is copied into *buf.
// 1227  *
// 1228  * @param   id  - Valid NV item Id.
// 1229  * @param   ndx - Index offset into item
// 1230  * @param   len - Length of data to read.
// 1231  * @param  *buf - Data is read into this buffer.
// 1232  *
// 1233  * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
// 1234  *          Otherwise, NV_OPER_FAILED for failure.
// 1235  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1236 uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_read:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function osal_nv_read
        CODE
// 1237 {
        FUNCALL osal_nv_read, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_read, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 1238   uint16 offset;
// 1239 
// 1240   offset = findItem( id );
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        SJMP    ??osal_nv_read_0
??osal_nv_read_1:
        MOV     A,#-0x80
        ORL     A,?V0 + 3
        MOV     ?V0 + 3,A
??osal_nv_read_0:
        MOV     ?V0 + 6,#0x79
??osal_nv_read_2:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 6
        LCALL   ??initPage?relay
        MOV     ?V0 + 9,R3
        MOV     R1,?V0 + 9
        MOV     A,R2
        ORL     A,R1
        JZ      ??osal_nv_read_3
        MOV     A,?V0 + 6
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
// 1241   if ( offset == OSAL_NV_ITEM_NULL )
// 1242   {
// 1243     return NV_OPER_FAILED;
// 1244   }
// 1245 
// 1246   HalFlashRead(findPg, offset+ndx, buf, len);
        ; Setup parameters for call to function HalFlashRead
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R2
        ADD     A,R6
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R7
        MOV     R3,A
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 1247 
// 1248   return ZSUCCESS;
        MOV     R1,#0x0
        SJMP    ??osal_nv_read_4
??osal_nv_read_3:
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x7f
        JC      ??osal_nv_read_2
        MOV     A,?V0 + 3
        ANL     A,#0x80
        JZ      ??osal_nv_read_1
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0xa
??osal_nv_read_4:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock17
// 1249 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initPage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initPage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??compactPage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    compactPage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??findItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    findItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??xferBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    xferBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_item_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_item_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_item_len?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_item_len

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_read

        END
// 1250 
// 1251 /*********************************************************************
// 1252 *********************************************************************/
// 
//  6 010 bytes in segment BANKED_CODE
//     84 bytes in segment BANK_RELAYS
//      8 bytes in segment IEEE_ADDRESS_SPACE
//     27 bytes in segment XDATA_Z
// 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
// 
//  6 094 bytes of CODE  memory
// 12 323 bytes of XDATA memory
//
//Errors: none
//Warnings: none
