###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:33:02 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\zmac\f8w\zmac_cb.c                          #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\zmac\f8w\zmac_cb.c" -D ZIGBEEPRO -D        #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\zmac_cb.lst                                 #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\zmac_cb.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2009-12-04 08:04:20 -0800 (Fri, 04 Dec 2009) $
      4            Revision:       $Revision: 21276 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_main.h"
     61          extern void *ZMac_ScanBuf;
     62          
     63          /********************************************************************************************************
     64           *                                               CONSTANTS
     65           ********************************************************************************************************/
     66          
     67          #if !defined NONWK
     68          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     69          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     70            0,
     71            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     72            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     73            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     74            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     75            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     76            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     77            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     78            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     79            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     80            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     81            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     82            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     83            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     84            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     85            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     86            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     87          };
     88          #endif /* !defined NONWK */
     89          
     90          
     91          /*********************************************************************
     92           * ZMAC Function Pointers
     93           */
     94          
     95          /*
     96           * ZMac Application callback function. This function will be called
     97           * for every MAC message that is received over-the-air or generated
     98           * locally by MAC for the application.
     99           *
    100           * The callback function should return TRUE if it has handled the
    101           * MAC message and no further action should be taken with it. It
    102           * should return FALSE if it has not handled the MAC message and
    103           * normal processing should take place.
    104           *
    105           * NOTE: The processing in this function should be kept to the
    106           *       minimum.
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          
    111          /*********************************************************************
    112           * ZMAC Functions
    113           */
    114          
    115          /**************************************************************************************************
    116           * @fn       MAC_CbackEvent()
    117           *
    118           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    119           *
    120           * @param    pData - pointer to macCbackEvent_t
    121           *
    122           * @return   none
    123           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    125          #ifndef MT_MAC_CB_FUNC
    126          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    127          #if !defined NONWK
    128            uint8 event = pData->hdr.event;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 4,A
    129            uint16 tmp = zmacCBSizeTable[event];
   \   000026   F5..         MOV     ?V0 + 0,A
   \   000028   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   00002A   25..         ADD     A,?V0 + 0
   \   00002C   F582         MOV     DPL,A
   \   00002E   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   000030   3400         ADDC    A,#0x0
   \   000032   F583         MOV     DPH,A
   \   000034   E4           CLR     A
   \   000035   93           MOVC    A,@A+DPTR
   \   000036   F5..         MOV     ?V0 + 0,A
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E5..         MOV     A,?V0 + 0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    130            macCbackEvent_t *msgPtr;
    131          
    132            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    133             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    134             */
    135            if (tmp == 0)
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    136            {
    137              return;
    138            }
    139          
    140            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    141            if ( event == MAC_MCPS_DATA_IND )
   \   00004E   740D         MOV     A,#0xd
   \   000050   65..         XRL     A,?V0 + 4
   \   000052   7056         JNZ     ??MAC_CbackEvent_1
    142            {
    143              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000054                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000054   AA82         MOV     R2,DPL
   \   000056   AB83         MOV     R3,DPH
   \   000058   7953         MOV     R1,#0x53
   \   00005A   12....       LCALL   ??MAC_MlmeGetReq?relay
    144              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    145                  (pData->dataInd.msdu.len == 0))
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E0           MOVX    A,@DPTR
   \   000063   64FE         XRL     A,#0xfe
   \   000065   7003         JNZ     ??MAC_CbackEvent_2
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F4           CPL     A
   \                     ??MAC_CbackEvent_2:
   \   00006A   6023         JZ      ??MAC_CbackEvent_3
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F4           CPL     A
   \   000073   7003         JNZ     ??MAC_CbackEvent_4
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F4           CPL     A
   \                     ??MAC_CbackEvent_4:
   \   000078   6015         JZ      ??MAC_CbackEvent_3
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F8           MOV     R0,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F583         MOV     DPH,A
   \   000086   8882         MOV     DPL,R0
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   700D         JNZ     ??MAC_CbackEvent_5
    146              {
    147                mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   00008F                ; Setup parameters for call to function mac_msg_deallocate
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    148                return;
    149              }
    150              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   FE           MOV     R6,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FF           MOV     R7,A
   \   0000A7   02....       LJMP    ??MAC_CbackEvent_7 & 0xFFFF
    151            }
    152            else
    153            {
    154              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   0000AA   7405         MOV     A,#0x5
   \   0000AC   65..         XRL     A,?V0 + 4
   \   0000AE   7020         JNZ     ??MAC_CbackEvent_8
    155              {
    156                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F8           MOV     R0,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F583         MOV     DPH,A
   \   0000BC   8882         MOV     DPL,R0
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   2421         ADD     A,#0x21
   \   0000C9   F8           MOV     R0,A
   \   0000CA   E4           CLR     A
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F9           MOV     R1,A
   \   0000CE   8044         SJMP    ??MAC_CbackEvent_9
    157              }
    158              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_8:
   \   0000D0   7407         MOV     A,#0x7
   \   0000D2   65..         XRL     A,?V0 + 4
   \   0000D4   704A         JNZ     ??MAC_CbackEvent_10
    159              {
    160                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F583         MOV     DPH,A
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   700F         JNZ     ??MAC_CbackEvent_11
    161                {
    162                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   241B         ADD     A,#0x1b
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   3400         ADDC    A,#0x0
   \   0000F6   8027         SJMP    ??MAC_CbackEvent_12
    163                }
    164                else
    165                {
    166                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_11:
   \   0000F8   85..82       MOV     DPL,?XSP + 0
   \   0000FB   85..83       MOV     DPH,?XSP + 1
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F583         MOV     DPH,A
   \   000102   8882         MOV     DPL,R0
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   75F021       MOV     B,#0x21
   \   000110   A4           MUL     AB
   \   000111   F8           MOV     R0,A
   \   000112   A9F0         MOV     R1,B
   \                     ??MAC_CbackEvent_9:
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   28           ADD     A,R0
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   39           ADDC    A,R1
   \                     ??MAC_CbackEvent_12:
   \   00011F   F0           MOVX    @DPTR,A
    167                }
    168              }
    169          
    170              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_10:
   \   000120                ; Setup parameters for call to function osal_msg_allocate
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FA           MOV     R2,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FB           MOV     R3,A
   \   00012A   12....       LCALL   ??osal_msg_allocate?relay
   \   00012D   8A..         MOV     ?V0 + 2,R2
   \   00012F   8B..         MOV     ?V0 + 3,R3
   \   000131   AE..         MOV     R6,?V0 + 2
   \   000133   AF..         MOV     R7,?V0 + 3
   \   000135   EE           MOV     A,R6
   \   000136   4F           ORL     A,R7
   \   000137   7060         JNZ     ??MAC_CbackEvent_13
    171              {
    172                // Not enough memory. If data confirm - try again
    173                if ( event == MAC_MCPS_DATA_CNF )
   \   000139   740C         MOV     A,#0xc
   \   00013B   65..         XRL     A,?V0 + 4
   \   00013D   6003         JZ      $+5
   \   00013F   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    174                {
    175                  halIntState_t intState;
    176          
    177                  // This is not normally deallocated here because the pZMac_AppCallback()
    178                  // application may need it.
    179                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000142   A2AF         MOV     C,0xa8.7
   \   000144   E4           CLR     A
   \   000145   33           RLC     A
   \   000146   F5..         MOV     ?V0 + 2,A
   \   000148   C2AF         CLR     0xa8.7
    180          
    181                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00014A                ; Setup parameters for call to function mac_msg_deallocate
   \   00014A   85..82       MOV     DPL,?XSP + 0
   \   00014D   85..83       MOV     DPH,?XSP + 1
   \   000150   E0           MOVX    A,@DPTR
   \   000151   2403         ADD     A,#0x3
   \   000153   FA           MOV     R2,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   3400         ADDC    A,#0x0
   \   000158   FB           MOV     R3,A
   \   000159   12....       LCALL   ??mac_msg_deallocate?relay
    182                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   00015C                ; Setup parameters for call to function osal_msg_allocate
   \   00015C   7402         MOV     A,#0x2
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   E0           MOVX    A,@DPTR
   \   000162   FA           MOV     R2,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   FB           MOV     R3,A
   \   000166   12....       LCALL   ??osal_msg_allocate?relay
   \   000169   8A..         MOV     ?V0 + 6,R2
   \   00016B   8B..         MOV     ?V0 + 7,R3
   \   00016D   AE..         MOV     R6,?V0 + 6
   \   00016F   AF..         MOV     R7,?V0 + 7
   \   000171   EE           MOV     A,R6
   \   000172   4F           ORL     A,R7
   \   000173   7009         JNZ     ??MAC_CbackEvent_14
    183                  {
    184                    // Still no allocation, something is wrong
    185                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000175   E5..         MOV     A,?V0 + 2
   \   000177   A2E0         MOV     C,0xE0 /* A   */.0
   \   000179   92AF         MOV     0xa8.7,C
    186                    return;
   \   00017B   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    187                  }
    188                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_14:
   \   00017E   E5..         MOV     A,?V0 + 2
   \   000180   A2E0         MOV     C,0xE0 /* A   */.0
   \   000182   92AF         MOV     0xa8.7,C
    189                  pData->dataCnf.pDataReq = NULL;
   \   000184   85..82       MOV     DPL,?XSP + 0
   \   000187   85..83       MOV     DPH,?XSP + 1
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F8           MOV     R0,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F583         MOV     DPH,A
   \   000190   8882         MOV     DPL,R0
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   E4           CLR     A
   \   000196   F0           MOVX    @DPTR,A
   \   000197   A3           INC     DPTR
   \   000198   F0           MOVX    @DPTR,A
    190                }
    191                else
    192                {
    193                  // This message is dropped
    194                  return;
    195                }
    196              }
    197              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_13:
   \   000199                ; Setup parameters for call to function osal_memcpy
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F5..         MOV     ?V0 + 8,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F5..         MOV     ?V0 + 9,A
   \   0001A6   75..00       MOV     ?V0 + 10,#0x0
   \   0001A9   78..         MOV     R0,#?V0 + 8
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001AE   AC..         MOV     R4,?V0 + 0
   \   0001B0   7D00         MOV     R5,#0x0
   \   0001B2   EE           MOV     A,R6
   \   0001B3   FA           MOV     R2,A
   \   0001B4   EF           MOV     A,R7
   \   0001B5   FB           MOV     R3,A
   \   0001B6   12....       LCALL   ??osal_memcpy?relay
   \   0001B9   7403         MOV     A,#0x3
   \   0001BB   12....       LCALL   ?DEALLOC_XSTACK8
    198            }
    199          
    200            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   0001BE   7405         MOV     A,#0x5
   \   0001C0   65..         XRL     A,?V0 + 4
   \   0001C2   6003         JZ      $+5
   \   0001C4   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    201            {
    202              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    203          
    204              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   0001C7   EE           MOV     A,R6
   \   0001C8   240B         ADD     A,#0xb
   \   0001CA   F5..         MOV     ?V0 + 0,A
   \   0001CC   EF           MOV     A,R7
   \   0001CD   3400         ADDC    A,#0x0
   \   0001CF   F5..         MOV     ?V0 + 1,A
   \   0001D1   EE           MOV     A,R6
   \   0001D2   2403         ADD     A,#0x3
   \   0001D4   F5..         MOV     ?V0 + 6,A
   \   0001D6   EF           MOV     A,R7
   \   0001D7   3400         ADDC    A,#0x0
   \   0001D9   F5..         MOV     ?V0 + 7,A
   \   0001DB                ; Setup parameters for call to function osal_memcpy
   \   0001DB   85..82       MOV     DPL,?V0 + 6
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F5..         MOV     ?V0 + 8,A
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   F5..         MOV     ?V0 + 9,A
   \   0001E7   78..         MOV     R0,#?V0 + 8
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001EC   7C21         MOV     R4,#0x21
   \   0001EE   7D00         MOV     R5,#0x0
   \   0001F0   AA..         MOV     R2,?V0 + 0
   \   0001F2   AB..         MOV     R3,?V0 + 1
   \   0001F4   12....       LCALL   ??osal_memcpy?relay
   \   0001F7   7403         MOV     A,#0x3
   \   0001F9   12....       LCALL   ?DEALLOC_XSTACK8
    205              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   0001FC   85..82       MOV     DPL,?V0 + 6
   \   0001FF   85..83       MOV     DPH,?V0 + 7
   \   000202   E5..         MOV     A,?V0 + 0
   \   000204   F0           MOVX    @DPTR,A
   \   000205   A3           INC     DPTR
   \   000206   E5..         MOV     A,?V0 + 1
   \   000208   F0           MOVX    @DPTR,A
    206              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000209   EE           MOV     A,R6
   \   00020A   2409         ADD     A,#0x9
   \   00020C   F5..         MOV     ?V0 + 2,A
   \   00020E   EF           MOV     A,R7
   \   00020F   3400         ADDC    A,#0x0
   \   000211   F5..         MOV     ?V0 + 3,A
   \   000213                ; Setup parameters for call to function osal_memcpy
   \   000213   85..82       MOV     DPL,?V0 + 2
   \   000216   F583         MOV     DPH,A
   \   000218   E0           MOVX    A,@DPTR
   \   000219   F5..         MOV     ?V0 + 8,A
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F5..         MOV     ?V0 + 9,A
   \   00021F   78..         MOV     R0,#?V0 + 8
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000224   8E82         MOV     DPL,R6
   \   000226   8F83         MOV     DPH,R7
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   FC           MOV     R4,A
   \   000232   7D00         MOV     R5,#0x0
   \   000234   85..82       MOV     DPL,?V0 + 6
   \   000237   85..83       MOV     DPH,?V0 + 7
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   2421         ADD     A,#0x21
   \   00023D   FA           MOV     R2,A
   \   00023E   A3           INC     DPTR
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   3400         ADDC    A,#0x0
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   ??osal_memcpy?relay
   \   000246   7403         MOV     A,#0x3
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
    207              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   00024B   85..82       MOV     DPL,?V0 + 6
   \   00024E   85..83       MOV     DPH,?V0 + 7
   \   000251   E0           MOVX    A,@DPTR
   \   000252   2421         ADD     A,#0x21
   \   000254   F8           MOV     R0,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   3400         ADDC    A,#0x0
   \   000259   F9           MOV     R1,A
   \   00025A   85..82       MOV     DPL,?V0 + 2
   \   00025D   85..83       MOV     DPH,?V0 + 3
   \   000260   E8           MOV     A,R0
   \   000261   F0           MOVX    @DPTR,A
   \   000262   A3           INC     DPTR
   \   000263   E9           MOV     A,R1
   \   000264   F0           MOVX    @DPTR,A
   \   000265   02....       LJMP    ??MAC_CbackEvent_7 & 0xFFFF
    208            }
    209            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_15:
   \   000268   7407         MOV     A,#0x7
   \   00026A   65..         XRL     A,?V0 + 4
   \   00026C   6003         JZ      $+5
   \   00026E   02....       LJMP    ??MAC_CbackEvent_7 & 0xFFFF
    210            {
    211              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    212          
    213              if (ZMac_ScanBuf != NULL)
   \   000271   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000274   E0           MOVX    A,@DPTR
   \   000275   F8           MOV     R0,A
   \   000276   A3           INC     DPTR
   \   000277   E0           MOVX    A,@DPTR
   \   000278   F9           MOV     R1,A
   \   000279   E8           MOV     A,R0
   \   00027A   49           ORL     A,R1
   \   00027B   7003         JNZ     $+5
   \   00027D   02....       LJMP    ??MAC_CbackEvent_7 & 0xFFFF
    214              {
    215                void *pTmp = ZMac_ScanBuf;
   \   000280   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000283   E0           MOVX    A,@DPTR
   \   000284   F5..         MOV     ?V0 + 6,A
   \   000286   A3           INC     DPTR
   \   000287   E0           MOVX    A,@DPTR
   \   000288   F5..         MOV     ?V0 + 7,A
    216                ZMac_ScanBuf = NULL;
   \   00028A   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00028D   E4           CLR     A
   \   00028E   F0           MOVX    @DPTR,A
   \   00028F   A3           INC     DPTR
   \   000290   F0           MOVX    @DPTR,A
    217          
    218                if (pScan->scanType == ZMAC_ED_SCAN)
   \   000291   88..         MOV     ?V0 + 8,R0
   \   000293   89..         MOV     ?V0 + 9,R1
   \   000295   EE           MOV     A,R6
   \   000296   2409         ADD     A,#0x9
   \   000298   F5..         MOV     ?V0 + 2,A
   \   00029A   EF           MOV     A,R7
   \   00029B   3400         ADDC    A,#0x0
   \   00029D   F5..         MOV     ?V0 + 3,A
   \   00029F   EE           MOV     A,R6
   \   0002A0   240B         ADD     A,#0xb
   \   0002A2   F5..         MOV     ?V0 + 0,A
   \   0002A4   EF           MOV     A,R7
   \   0002A5   3400         ADDC    A,#0x0
   \   0002A7   F5..         MOV     ?V0 + 1,A
   \   0002A9   8E82         MOV     DPL,R6
   \   0002AB   8F83         MOV     DPH,R7
   \   0002AD   A3           INC     DPTR
   \   0002AE   A3           INC     DPTR
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   85..82       MOV     DPL,?V0 + 2
   \   0002B3   85..83       MOV     DPH,?V0 + 3
   \   0002B6   701D         JNZ     ??MAC_CbackEvent_16
    219                {
    220                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   0002B8   E5..         MOV     A,?V0 + 0
   \   0002BA   F0           MOVX    @DPTR,A
   \   0002BB   A3           INC     DPTR
   \   0002BC   E5..         MOV     A,?V0 + 1
   \   0002BE   F0           MOVX    @DPTR,A
    221                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   0002BF                ; Setup parameters for call to function osal_memcpy
   \   0002BF   78..         MOV     R0,#?V0 + 8
   \   0002C1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002C4   7C1B         MOV     R4,#0x1b
   \   0002C6   7D00         MOV     R5,#0x0
   \   0002C8   85..82       MOV     DPL,?V0 + 2
   \   0002CB   85..83       MOV     DPH,?V0 + 3
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   FA           MOV     R2,A
   \   0002D0   A3           INC     DPTR
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   FB           MOV     R3,A
   \   0002D3   8024         SJMP    ??MAC_CbackEvent_17
    222                }
    223                else
    224                {
    225                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_16:
   \   0002D5   E5..         MOV     A,?V0 + 0
   \   0002D7   F0           MOVX    @DPTR,A
   \   0002D8   A3           INC     DPTR
   \   0002D9   E5..         MOV     A,?V0 + 1
   \   0002DB   F0           MOVX    @DPTR,A
    226                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   0002DC                ; Setup parameters for call to function osal_memcpy
   \   0002DC   78..         MOV     R0,#?V0 + 8
   \   0002DE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002E1   8E82         MOV     DPL,R6
   \   0002E3   8F83         MOV     DPH,R7
   \   0002E5   A3           INC     DPTR
   \   0002E6   A3           INC     DPTR
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   75F021       MOV     B,#0x21
   \   0002F1   A4           MUL     AB
   \   0002F2   FC           MOV     R4,A
   \   0002F3   ADF0         MOV     R5,B
   \   0002F5   AA..         MOV     R2,?V0 + 0
   \   0002F7   AB..         MOV     R3,?V0 + 1
   \                     ??MAC_CbackEvent_17:
   \   0002F9   12....       LCALL   ??osal_memcpy?relay
   \   0002FC   7403         MOV     A,#0x3
   \   0002FE   12....       LCALL   ?DEALLOC_XSTACK8
    227                }
    228          
    229                osal_mem_free(pTmp);
   \   000301                ; Setup parameters for call to function osal_mem_free
   \   000301   AA..         MOV     R2,?V0 + 6
   \   000303   AB..         MOV     R3,?V0 + 7
   \   000305   12....       LCALL   ??osal_mem_free?relay
    230              }
    231            }
    232          
    233            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_7:
   \   000308   90....       MOV     DPTR,#pZMac_AppCallback
   \   00030B   E0           MOVX    A,@DPTR
   \   00030C   F8           MOV     R0,A
   \   00030D   A3           INC     DPTR
   \   00030E   E0           MOVX    A,@DPTR
   \   00030F   F9           MOV     R1,A
   \   000310   E8           MOV     A,R0
   \   000311   49           ORL     A,R1
   \   000312   6012         JZ      ??MAC_CbackEvent_18
   \   000314                ; Setup parameters for indirect call
   \   000314   EE           MOV     A,R6
   \   000315   FA           MOV     R2,A
   \   000316   EF           MOV     A,R7
   \   000317   FB           MOV     R3,A
   \   000318   E0           MOVX    A,@DPTR
   \   000319   F583         MOV     DPH,A
   \   00031B   8882         MOV     DPL,R0
   \   00031D   12....       LCALL   ?CALL_IND
   \   000320   E9           MOV     A,R1
   \   000321   6003         JZ      $+5
   \   000323   02....       LJMP    ??MAC_CbackEvent_19 & 0xFFFF
    234            {
    235              // Filter out non-zigbee packets
    236              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_18:
   \   000326   740D         MOV     A,#0xd
   \   000328   65..         XRL     A,?V0 + 4
   \   00032A   6003         JZ      $+5
   \   00032C   02....       LJMP    ??MAC_CbackEvent_20 & 0xFFFF
    237              {
    238                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    239                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    240                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   00032F   85..82       MOV     DPL,?XSP + 0
   \   000332   85..83       MOV     DPH,?XSP + 1
   \   000335   E0           MOVX    A,@DPTR
   \   000336   F8           MOV     R0,A
   \   000337   A3           INC     DPTR
   \   000338   E0           MOVX    A,@DPTR
   \   000339   F583         MOV     DPH,A
   \   00033B   8882         MOV     DPL,R0
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   E0           MOVX    A,@DPTR
   \   000340   F8           MOV     R0,A
   \   000341   A3           INC     DPTR
   \   000342   E0           MOVX    A,@DPTR
   \   000343   F9           MOV     R1,A
   \   000344   8882         MOV     DPL,R0
   \   000346   8983         MOV     DPH,R1
   \   000348   A3           INC     DPTR
   \   000349   E0           MOVX    A,@DPTR
   \   00034A   54E0         ANL     A,#0xe0
   \   00034C   FA           MOV     R2,A
    241                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0) 
    242                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   00034D   8882         MOV     DPL,R0
   \   00034F   8983         MOV     DPH,R1
   \   000351   E0           MOVX    A,@DPTR
   \   000352   5403         ANL     A,#0x3
   \   000354   C3           CLR     C
   \   000355   9402         SUBB    A,#0x2
   \   000357   4003         JC      $+5
   \   000359   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   13           RRC     A
   \   00035E   13           RRC     A
   \   00035F   543F         ANL     A,#0x3f
   \   000361   540F         ANL     A,#0xf
   \   000363   F8           MOV     R0,A
   \   000364   90....       MOV     DPTR,#_NIB + 17
   \   000367   E0           MOVX    A,@DPTR
   \   000368   68           XRL     A,R0
   \   000369   6003         JZ      $+5
   \   00036B   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   00036E   EA           MOV     A,R2
   \   00036F   6003         JZ      $+5
   \   000371   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   000374   85..82       MOV     DPL,?XSP + 0
   \   000377   85..83       MOV     DPH,?XSP + 1
   \   00037A   E0           MOVX    A,@DPTR
   \   00037B   241A         ADD     A,#0x1a
   \   00037D   F8           MOV     R0,A
   \   00037E   A3           INC     DPTR
   \   00037F   E0           MOVX    A,@DPTR
   \   000380   3400         ADDC    A,#0x0
   \   000382   F9           MOV     R1,A
   \   000383   8882         MOV     DPL,R0
   \   000385   8983         MOV     DPH,R1
   \   000387   E0           MOVX    A,@DPTR
   \   000388   6402         XRL     A,#0x2
   \   00038A   6003         JZ      $+5
   \   00038C   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
    243                {
    244                  // Drop the message 
    245                  mac_msg_deallocate( (uint8 **)&pData );
    246                  return;
    247                }
    248                else if ( pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF )
   \   00038F   85..82       MOV     DPL,?XSP + 0
   \   000392   85..83       MOV     DPH,?XSP + 1
   \   000395   E0           MOVX    A,@DPTR
   \   000396   241B         ADD     A,#0x1b
   \   000398   08           INC     R0
   \   000399   A3           INC     DPTR
   \   00039A   E0           MOVX    A,@DPTR
   \   00039B   3400         ADDC    A,#0x0
   \   00039D   F9           MOV     R1,A
   \   00039E   8882         MOV     DPL,R0
   \   0003A0   8983         MOV     DPH,R1
   \   0003A2   E0           MOVX    A,@DPTR
   \   0003A3   F4           CPL     A
   \   0003A4   7003         JNZ     ??MAC_CbackEvent_21
   \   0003A6   A3           INC     DPTR
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   F4           CPL     A
   \                     ??MAC_CbackEvent_21:
   \   0003A9   700F         JNZ     ??MAC_CbackEvent_20
    249                {
    250                  // Send the messsage to a special broadcast queue
    251                  if ( nwk_broadcastSend( (uint8 *)msgPtr ) == SUCCESS )
   \   0003AB                ; Setup parameters for call to function nwk_broadcastSend
   \   0003AB   EE           MOV     A,R6
   \   0003AC   FA           MOV     R2,A
   \   0003AD   EF           MOV     A,R7
   \   0003AE   FB           MOV     R3,A
   \   0003AF   12....       LCALL   ??nwk_broadcastSend?relay
   \   0003B2   E9           MOV     A,R1
   \   0003B3   6003         JZ      $+5
   \   0003B5   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   0003B8   8024         SJMP    ??MAC_CbackEvent_0
    252                  {
    253                    return;
    254                  }
    255                  else
    256                  {
    257                    // Drop the message, too many broadcast messages to process
    258                    mac_msg_deallocate( (uint8 **)&pData );
    259                    return;
    260                  }
    261                }
    262              }
    263              
    264              // Application hasn't already processed this message. Send it to NWK task.
    265              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_20:
   \   0003BA                ; Setup parameters for call to function osal_msg_send
   \   0003BA   EE           MOV     A,R6
   \   0003BB   FA           MOV     R2,A
   \   0003BC   EF           MOV     A,R7
   \   0003BD   FB           MOV     R3,A
   \   0003BE   90....       MOV     DPTR,#NWK_TaskID
   \   0003C1   E0           MOVX    A,@DPTR
   \   0003C2   F9           MOV     R1,A
   \   0003C3   12....       LCALL   ??osal_msg_send?relay
    266            }
    267          
    268            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_19:
   \   0003C6   740C         MOV     A,#0xc
   \   0003C8   65..         XRL     A,?V0 + 4
   \   0003CA   7012         JNZ     ??MAC_CbackEvent_0
    269            {
    270              // If the application needs 'pDataReq' then we cannot free it here.
    271              // The application must free it after using it. Note that 'pDataReq'
    272              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    273          
    274              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   0003CC                ; Setup parameters for call to function mac_msg_deallocate
   \   0003CC   85..82       MOV     DPL,?XSP + 0
   \   0003CF   85..83       MOV     DPH,?XSP + 1
   \   0003D2   E0           MOVX    A,@DPTR
   \   0003D3   2403         ADD     A,#0x3
   \   0003D5   FA           MOV     R2,A
   \   0003D6   A3           INC     DPTR
   \   0003D7   E0           MOVX    A,@DPTR
   \   0003D8   3400         ADDC    A,#0x0
   \   0003DA   FB           MOV     R3,A
   \                     ??MAC_CbackEvent_6:
   \   0003DB   12....       LCALL   ??mac_msg_deallocate?relay
   \                     ??MAC_CbackEvent_0:
   \   0003DE   7404         MOV     A,#0x4
   \   0003E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003E3   7F0B         MOV     R7,#0xb
   \   0003E5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0003E8                REQUIRE _A_IEN0
    275            }
    276          #endif
    277          }
    278          #else  // ifdef MT_MAC_CB_FUNC
    279          {
    280            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    281            switch (pData->hdr.event)
    282            {
    283              case MAC_MLME_ASSOCIATE_IND:
    284                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    285                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    286                break;
    287          
    288              case MAC_MLME_ASSOCIATE_CNF:
    289                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    290                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    291                break;
    292          
    293              case MAC_MLME_DISASSOCIATE_IND:
    294                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    295                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    296                break;
    297          
    298              case MAC_MLME_DISASSOCIATE_CNF:
    299                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    300                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    301                break;
    302          
    303              case MAC_MLME_BEACON_NOTIFY_IND:
    304                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    305                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    306                break;
    307          
    308              case MAC_MLME_ORPHAN_IND:
    309                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    310                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    311                break;
    312          
    313              case MAC_MLME_SCAN_CNF:
    314                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    315                {
    316                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    317                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    318                }
    319          
    320                if (ZMac_ScanBuf != NULL)
    321                {
    322                  void *pTmp = ZMac_ScanBuf;
    323                  ZMac_ScanBuf = NULL;
    324                  osal_mem_free(pTmp);
    325                }
    326                break;
    327          
    328              case MAC_MLME_START_CNF:
    329                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    330                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    331                break;
    332          
    333              case MAC_MLME_SYNC_LOSS_IND:
    334                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    335                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    336                break;
    337          
    338              case MAC_MLME_POLL_CNF:
    339                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    340                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    341                break;
    342          
    343              case MAC_MLME_COMM_STATUS_IND:
    344                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    345                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    346                break;
    347          
    348              case MAC_MCPS_DATA_CNF:
    349                mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    350          
    351                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    352                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    353                break;
    354          
    355              case MAC_MCPS_DATA_IND:
    356                  {
    357                    /*
    358                       Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    359                       buffer and re-organize the contents into ZMAC format.
    360                    */
    361                    ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    362                    uint8 event, status, len, *msdu;
    363          
    364                    /* Store parameters */
    365                    event = pData->hdr.event;
    366                    status = pData->hdr.status;
    367                    len = pData->dataInd.msdu.len;
    368                    msdu = pData->dataInd.msdu.p;
    369          
    370                    /* Copy header */
    371                    osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac, sizeof(ZMacDataInd_t) - sizeof(ZMacEventHdr_t));
    372          
    373                    /* Security - set to zero for now*/
    374                    pDataInd->Sec.SecurityLevel = false;
    375          
    376                    /* Restore parameters */
    377                    pDataInd->hdr.Status = status;
    378                    pDataInd->hdr.Event = event;
    379                    pDataInd->msduLength = len;
    380          
    381                    if (len)
    382                      pDataInd->msdu = msdu;
    383                    else
    384                      pDataInd->msdu = NULL;
    385          
    386                    if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    387                      nwk_MTCallbackSubNwkDataInd ( pDataInd );
    388          
    389                    /* free buffer */
    390                    mac_msg_deallocate( (uint8 **)&pData );
    391                  }
    392                  break;
    393          
    394              case MAC_MCPS_PURGE_CNF:
    395                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    396                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    397                break;
    398          
    399              default:
    400                break;
    401            }
    402          }
    403          #endif
    404          
    405          /********************************************************************************************************
    406           * @fn      MAC_CbackCheckPending
    407           *
    408           * @brief   Return number of pending indirect msg
    409           *
    410           * @param   None
    411           *
    412           * @return  Number of indirect msg holding
    413           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    415          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    416          #if !defined (NONWK)
    417            if ( ZSTACK_ROUTER_BUILD )
    418            {
    419              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL   ??nwkDB_ReturnIndirectHoldingCnt?relay
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    420            }
    421            else
    422            {
    423              return (0);
    424            }
    425          #else
    426            return (0);
    427          #endif
    428          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackCheckPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MAC_CbackCheckPending              2      0      0
       -> nwkDB_ReturnIndirectHoldingCnt
                                        4      0      0
     MAC_CbackEvent                     0      0     26
       -> MAC_MlmeGetReq                0      0     46
       -> mac_msg_deallocate            0      0     46
       -> osal_msg_allocate             0      0     46
       -> mac_msg_deallocate            0      0     46
       -> osal_msg_allocate             0      0     46
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
       -> osal_mem_free                 0      0     46
       -> nwk_broadcastSend             0      0     46
       -> osal_msg_send                 0      0     46
       -> mac_msg_deallocate            0      0     46


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_IEN0                          1
     zmacCBSizeTable                 17
     pZMac_AppCallback                2
     MAC_CbackEvent                1000
     MAC_CbackCheckPending           14
     ??MAC_CbackEvent?relay           6
     ??MAC_CbackCheckPending?relay    6

 
 1 014 bytes in segment BANKED_CODE
    12 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     2 bytes in segment XDATA_Z
 
 1 043 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     2 bytes of XDATA memory

Errors: none
Warnings: none
