###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:47 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\stack\af\AF.c                               #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\stack\af\AF.c" -D ZIGBEEPRO -D ZTOOL_P1    #
#                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\AF.lst                                      #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\AF.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2009-10-29 00:15:32 -0700 (Thu, 29 Oct 2009) $
      4            Revision:       $Revision: 21013 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    150          }
   \   00000B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
    170            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6062         JZ      ??afRegisterExtended_0
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   EE           MOV     A,R6
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EF           MOV     A,R7
   \   000020   F0           MOVX    @DPTR,A
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   7401         MOV     A,#0x1
   \   000029   F0           MOVX    @DPTR,A
    177              ep->pfnDescCB = descFn;
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   F0           MOVX    @DPTR,A
    178              ep->nextDesc = NULL;
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \   000045   90....       MOV     DPTR,#epList
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   E8           MOV     A,R0
   \   00004E   49           ORL     A,R1
   \   00004F   7005         JNZ     ??afRegisterExtended_1
    182                epList = ep;  // Make this the first entry
   \   000051   90....       MOV     DPTR,#epList
   \   000054   801F         SJMP    ??afRegisterExtended_2
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \                     ??afRegisterExtended_1:
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
    187                while( epSearch->nextDesc != NULL )
    188                  epSearch = epSearch->nextDesc;
   \                     ??afRegisterExtended_3:
   \   000058   E8           MOV     A,R0
   \   000059   2405         ADD     A,#0x5
   \   00005B   F8           MOV     R0,A
   \   00005C   E9           MOV     A,R1
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   FC           MOV     R4,A
   \   000062   E9           MOV     A,R1
   \   000063   FD           MOV     R5,A
   \   000064   8C82         MOV     DPL,R4
   \   000066   8D83         MOV     DPH,R5
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F8           MOV     R0,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   49           ORL     A,R1
   \   00006F   70E7         JNZ     ??afRegisterExtended_3
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \                     ??afRegisterExtended_2:
   \   000075   EA           MOV     A,R2
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   EB           MOV     A,R3
   \   000079   F0           MOVX    @DPTR,A
    192              }
    193            }
    194          
    195            return ep;
   \                     ??afRegisterExtended_0:
   \   00007A   7F04         MOV     R7,#0x4
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA
    196          }
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   8009         SJMP    ??afRegister_0
   \                     ??afRegister_1:
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \                     ??afRegister_0:
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   49           ORL     A,R1
   \   000024   6014         JZ      ??afRegister_2
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FB           MOV     R3,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8B82         MOV     DPL,R3
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6A           XRL     A,R2
   \   000034   70DE         JNZ     ??afRegister_1
    217              return ( afStatus_INVALID_PARAMETER );
   \   000036   7902         MOV     R1,#0x2
   \   000038   8052         SJMP    ??afRegister_3
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
   \                     ??afRegister_2:
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   7A07         MOV     R2,#0x7
   \   00003C   7B00         MOV     R3,#0x0
   \   00003E   12....       LCALL   ??osal_mem_alloc?relay
   \   000041   8A..         MOV     ?V0 + 0,R2
   \   000043   8B..         MOV     ?V0 + 1,R3
   \   000045   A8..         MOV     R0,?V0 + 0
   \   000047   A9..         MOV     R1,?V0 + 1
   \   000049   E8           MOV     A,R0
   \   00004A   49           ORL     A,R1
   \   00004B   6063         JZ      ??afRegister_4
   \   00004D   8882         MOV     DPL,R0
   \   00004F   8983         MOV     DPH,R1
   \   000051   EE           MOV     A,R6
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EF           MOV     A,R7
   \   000055   F0           MOVX    @DPTR,A
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E4           CLR     A
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
   \   000076   90....       MOV     DPTR,#epList
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FB           MOV     R3,A
   \   00007E   EA           MOV     A,R2
   \   00007F   4B           ORL     A,R3
   \   000080   700F         JNZ     ??afRegister_5
   \   000082   90....       MOV     DPTR,#epList
   \                     ??afRegister_6:
   \   000085   E8           MOV     A,R0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   E9           MOV     A,R1
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   7900         MOV     R1,#0x0
   \                     ??afRegister_3:
   \   00008C   7F02         MOV     R7,#0x2
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??afRegister_5:
   \   000091   EA           MOV     A,R2
   \   000092   2405         ADD     A,#0x5
   \   000094   FA           MOV     R2,A
   \   000095   EB           MOV     A,R3
   \   000096   3400         ADDC    A,#0x0
   \   000098   FB           MOV     R3,A
   \   000099   EA           MOV     A,R2
   \   00009A   FC           MOV     R4,A
   \   00009B   EB           MOV     A,R3
   \   00009C   FD           MOV     R5,A
   \   00009D   8C82         MOV     DPL,R4
   \   00009F   8D83         MOV     DPH,R5
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FB           MOV     R3,A
   \   0000A6   EA           MOV     A,R2
   \   0000A7   4B           ORL     A,R3
   \   0000A8   70E7         JNZ     ??afRegister_5
   \   0000AA   8C82         MOV     DPL,R4
   \   0000AC   8D83         MOV     DPH,R5
   \   0000AE   80D5         SJMP    ??afRegister_6
   \                     ??afRegister_4:
   \   0000B0   7910         MOV     R1,#0x10
   \   0000B2   80D8         SJMP    ??afRegister_3
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
    222          }
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   8B..         MOV     ?V0 + 2,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B   90....       MOV     DPTR,#epList
   \   00000E   8005         SJMP    ??afDataConfirm_0
   \                     ??afDataConfirm_1:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \                     ??afDataConfirm_0:
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   605D         JZ      ??afDataConfirm_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   65..         XRL     A,?V0 + 0
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   70DD         JNZ     ??afDataConfirm_1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   FE           MOV     R6,A
   \   00003A   E9           MOV     A,R1
   \   00003B   FF           MOV     R7,A
    244            if ( epDesc == NULL )
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   603B         JZ      ??afDataConfirm_2
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000040                ; Setup parameters for call to function osal_msg_allocate
   \   000040   7A04         MOV     R2,#0x4
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   ??osal_msg_allocate?relay
    249            if ( msgPtr )
   \   000047   EA           MOV     A,R2
   \   000048   4B           ORL     A,R3
   \   000049   6030         JZ      ??afDataConfirm_2
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   74FD         MOV     A,#-0x3
   \   000051   F0           MOVX    @DPTR,A
    253              msgPtr->hdr.status = status;
   \   000052   A3           INC     DPTR
   \   000053   E5..         MOV     A,?V0 + 2
   \   000055   F0           MOVX    @DPTR,A
    254              msgPtr->endpoint = endPoint;
   \   000056   8A82         MOV     DPL,R2
   \   000058   8B83         MOV     DPH,R3
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   F0           MOVX    @DPTR,A
    255              msgPtr->transID = transID;
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E5..         MOV     A,?V0 + 1
   \   000068   F0           MOVX    @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   000069                ; Setup parameters for call to function osal_msg_send
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F583         MOV     DPH,A
   \   000074   8882         MOV     DPL,R0
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   ??osal_msg_send?relay
   \                     ??afDataConfirm_2:
   \   00007B   7F06         MOV     R7,#0x6
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    271              }
    272            }
    273          }
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V0 + 10,R2
   \   00001E   8B..         MOV     ?V0 + 11,R3
   \   000020   741B         MOV     A,#0x1b
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 8,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 9,A
   \   00002C   741F         MOV     A,#0x1f
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   78..         MOV     R0,#?V0 + 4
   \   000033   12....       LCALL   ?L_MOV_X
    290            endPointDesc_t *epDesc = NULL;
    291            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   000036   75..FF       MOV     ?V0 + 14,#-0x1
   \   000039   75..FF       MOV     ?V0 + 15,#-0x1
    292            epList_t *pList = epList;
   \   00003C   90....       MOV     DPTR,#epList
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V0 + 1,A
    293          #if !defined ( APS_NO_GROUPS )    
    294            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000046   75..FE       MOV     ?V0 + 2,#-0x2
    295          #endif  
    296          
    297            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   540C         ANL     A,#0xc
   \   000050   640C         XRL     A,#0xc
   \   000052   6003         JZ      $+5
   \   000054   02....       LJMP    ??afIncomingData_0 & 0xFFFF
    298            {
    299          #if !defined ( APS_NO_GROUPS )    
    300              // Find the first endpoint for this group
    301              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000057                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000057   79FE         MOV     R1,#-0x2
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   000065   E9           MOV     A,R1
   \   000066   F5..         MOV     ?V0 + 2,A
    302              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000068   74FE         MOV     A,#-0x2
   \   00006A   65..         XRL     A,?V0 + 2
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    303                return;   // No endpoint found
    304          
    305              epDesc = afFindEndPointDesc( grpEp );
   \   000071   90....       MOV     DPTR,#epList
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FA           MOV     R2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   800D         SJMP    ??afIncomingData_2
   \                     ??afIncomingData_3:
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   FA           MOV     R2,A
   \   000086   E9           MOV     A,R1
   \                     ??afIncomingData_2:
   \   000087   FB           MOV     R3,A
   \   000088   EA           MOV     A,R2
   \   000089   4B           ORL     A,R3
   \   00008A   601C         JZ      ??afIncomingData_4
   \   00008C   8A82         MOV     DPL,R2
   \   00008E   8B83         MOV     DPH,R3
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F583         MOV     DPH,A
   \   000096   8882         MOV     DPL,R0
   \   000098   E0           MOVX    A,@DPTR
   \   000099   65..         XRL     A,?V0 + 2
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   70D9         JNZ     ??afIncomingData_3
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FE           MOV     R6,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FF           MOV     R7,A
   \   0000A6   8004         SJMP    ??afIncomingData_5
   \                     ??afIncomingData_4:
   \   0000A8   7E00         MOV     R6,#0x0
   \   0000AA   7F00         MOV     R7,#0x0
    306              if ( epDesc == NULL )
   \                     ??afIncomingData_5:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   4F           ORL     A,R7
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    307                return;   // Endpoint descriptor not found
    308          
    309              pList = afFindEndPointDescList( epDesc->endPoint );
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   90....       MOV     DPTR,#epList
   \   0000BC   8009         SJMP    ??afIncomingData_6
   \                     ??afIncomingData_7:
   \   0000BE   8A82         MOV     DPL,R2
   \   0000C0   8B83         MOV     DPH,R3
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \                     ??afIncomingData_6:
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FB           MOV     R3,A
   \   0000CC   EA           MOV     A,R2
   \   0000CD   4B           ORL     A,R3
   \   0000CE   6016         JZ      ??afIncomingData_8
   \   0000D0   8A82         MOV     DPL,R2
   \   0000D2   8B83         MOV     DPH,R3
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F583         MOV     DPH,A
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   69           XRL     A,R1
   \   0000DE   70DE         JNZ     ??afIncomingData_7
   \   0000E0   EA           MOV     A,R2
   \   0000E1   F8           MOV     R0,A
   \   0000E2   EB           MOV     A,R3
   \   0000E3   F9           MOV     R1,A
   \   0000E4   8004         SJMP    ??afIncomingData_9
   \                     ??afIncomingData_8:
   \   0000E6   7800         MOV     R0,#0x0
   \   0000E8   7900         MOV     R1,#0x0
    310          #else
    311              return; // Not supported
    312          #endif    
    313            }
   \                     ??afIncomingData_9:
   \   0000EA   02....       LJMP    ??afIncomingData_10 & 0xFFFF
   \                     ??afIncomingData_0:
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F8           MOV     R0,A
   \   0000F1   74FF         MOV     A,#-0x1
   \   0000F3   68           XRL     A,R0
   \   0000F4   701D         JNZ     ??afIncomingData_11
    314            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    315            {
    316              // Set the list
    317              if ( pList != NULL )
   \   0000F6   E5..         MOV     A,?V0 + 0
   \   0000F8   45..         ORL     A,?V0 + 1
   \   0000FA   7003         JNZ     $+5
   \   0000FC   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    318              {
    319                epDesc = pList->epDesc;
   \                     ??afIncomingData_12:
   \   0000FF   85..82       MOV     DPL,?V0 + 0
   \   000102   85..83       MOV     DPH,?V0 + 1
   \   000105   E0           MOVX    A,@DPTR
   \   000106   FE           MOV     R6,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   FF           MOV     R7,A
    320              }
    321            }
    322            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
    323            {
    324              pList = afFindEndPointDescList( epDesc->endPoint );
    325            }
    326          
    327            while ( epDesc )
   \   00010A   EE           MOV     A,R6
   \   00010B   4F           ORL     A,R7
   \   00010C   7003         JNZ     $+5
   \   00010E   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   000111   807F         SJMP    ??afIncomingData_13
   \                     ??afIncomingData_11:
   \   000113   88..         MOV     ?V0 + 3,R0
   \   000115   90....       MOV     DPTR,#epList
   \   000118   E0           MOVX    A,@DPTR
   \   000119   FA           MOV     R2,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   800D         SJMP    ??afIncomingData_14
   \                     ??afIncomingData_15:
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   FA           MOV     R2,A
   \   00012A   E9           MOV     A,R1
   \                     ??afIncomingData_14:
   \   00012B   FB           MOV     R3,A
   \   00012C   EA           MOV     A,R2
   \   00012D   4B           ORL     A,R3
   \   00012E   601C         JZ      ??afIncomingData_16
   \   000130   8A82         MOV     DPL,R2
   \   000132   8B83         MOV     DPH,R3
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F583         MOV     DPH,A
   \   00013A   8882         MOV     DPL,R0
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   65..         XRL     A,?V0 + 3
   \   00013F   8A82         MOV     DPL,R2
   \   000141   8B83         MOV     DPH,R3
   \   000143   70D9         JNZ     ??afIncomingData_15
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FE           MOV     R6,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FF           MOV     R7,A
   \   00014A   8004         SJMP    ??afIncomingData_17
   \                     ??afIncomingData_16:
   \   00014C   7E00         MOV     R6,#0x0
   \   00014E   7F00         MOV     R7,#0x0
   \                     ??afIncomingData_17:
   \   000150   EE           MOV     A,R6
   \   000151   4F           ORL     A,R7
   \   000152   7003         JNZ     $+5
   \   000154   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   000157   8E82         MOV     DPL,R6
   \   000159   8F83         MOV     DPH,R7
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F9           MOV     R1,A
   \   00015D   90....       MOV     DPTR,#epList
   \   000160   8009         SJMP    ??afIncomingData_18
   \                     ??afIncomingData_19:
   \   000162   8A82         MOV     DPL,R2
   \   000164   8B83         MOV     DPH,R3
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \                     ??afIncomingData_18:
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   FA           MOV     R2,A
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FB           MOV     R3,A
   \   000170   EA           MOV     A,R2
   \   000171   4B           ORL     A,R3
   \   000172   6016         JZ      ??afIncomingData_20
   \   000174   8A82         MOV     DPL,R2
   \   000176   8B83         MOV     DPH,R3
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F583         MOV     DPH,A
   \   00017E   8882         MOV     DPL,R0
   \   000180   E0           MOVX    A,@DPTR
   \   000181   69           XRL     A,R1
   \   000182   70DE         JNZ     ??afIncomingData_19
   \                     ??afIncomingData_21:
   \   000184   EA           MOV     A,R2
   \   000185   F8           MOV     R0,A
   \   000186   EB           MOV     A,R3
   \   000187   F9           MOV     R1,A
   \   000188   8004         SJMP    ??afIncomingData_10
    328            {
    329              if ( pList->pfnDescCB )
    330              {
    331                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    332                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    333                if ( pID )
    334                {
    335                  epProfileID = *pID;
    336                  osal_mem_free( pID );
    337                }
    338              }
    339              else if ( epDesc->simpleDesc )
    340              {
    341                epProfileID = epDesc->simpleDesc->AppProfId;
    342              }
    343          
    344              if ( (aff->ProfileID == epProfileID) ||
    345                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    346              {
    347                {
    348                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    349                }
    350              }
    351          
    352              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    353              {
   \                     ??afIncomingData_20:
   \   00018A   7800         MOV     R0,#0x0
   \   00018C   7900         MOV     R1,#0x0
    354          #if !defined ( APS_NO_GROUPS )      
    355                // Find the next endpoint for this group
    356                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    357                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    358                  return;   // No endpoint found
    359          
    360                epDesc = afFindEndPointDesc( grpEp );
    361                if ( epDesc == NULL )
    362                  return;   // Endpoint descriptor not found
    363          
    364                pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_10:
   \   00018E   88..         MOV     ?V0 + 0,R0
   \   000190   89..         MOV     ?V0 + 1,R1
   \                     ??afIncomingData_13:
   \   000192   85..82       MOV     DPL,?V0 + 0
   \   000195   85..83       MOV     DPH,?V0 + 1
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   FC           MOV     R4,A
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FD           MOV     R5,A
   \   0001A0   EC           MOV     A,R4
   \   0001A1   4D           ORL     A,R5
   \   0001A2   8E82         MOV     DPL,R6
   \   0001A4   8F83         MOV     DPH,R7
   \   0001A6   601F         JZ      ??afIncomingData_22
   \   0001A8                ; Setup parameters for indirect call
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   FA           MOV     R2,A
   \   0001AA   7902         MOV     R1,#0x2
   \   0001AC   8C82         MOV     DPL,R4
   \   0001AE   8D83         MOV     DPH,R5
   \   0001B0   12....       LCALL   ?CALL_IND
   \   0001B3   EA           MOV     A,R2
   \   0001B4   4B           ORL     A,R3
   \   0001B5   602A         JZ      ??afIncomingData_23
   \   0001B7   8A82         MOV     DPL,R2
   \   0001B9   8B83         MOV     DPH,R3
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   F5..         MOV     ?V0 + 14,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F5..         MOV     ?V0 + 15,A
   \   0001C2                ; Setup parameters for call to function osal_mem_free
   \   0001C2   12....       LCALL   ??osal_mem_free?relay
   \   0001C5   801A         SJMP    ??afIncomingData_23
   \                     ??afIncomingData_22:
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F8           MOV     R0,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   F9           MOV     R1,A
   \   0001CF   8882         MOV     DPL,R0
   \   0001D1   8983         MOV     DPH,R1
   \   0001D3   E582         MOV     A,DPL
   \   0001D5   4583         ORL     A,DPH
   \   0001D7   6008         JZ      ??afIncomingData_23
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   F5..         MOV     ?V0 + 14,A
   \   0001DD   A3           INC     DPTR
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   F5..         MOV     ?V0 + 15,A
   \                     ??afIncomingData_23:
   \   0001E1   85..82       MOV     DPL,?V0 + 10
   \   0001E4   85..83       MOV     DPH,?V0 + 11
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F8           MOV     R0,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F9           MOV     R1,A
   \   0001F4   E5..         MOV     A,?V0 + 14
   \   0001F6   68           XRL     A,R0
   \   0001F7   7003         JNZ     ??afIncomingData_24
   \   0001F9   E5..         MOV     A,?V0 + 15
   \   0001FB   69           XRL     A,R1
   \                     ??afIncomingData_24:
   \   0001FC   600B         JZ      ??afIncomingData_25
   \   0001FE   8E82         MOV     DPL,R6
   \   000200   8F83         MOV     DPH,R7
   \   000202   E0           MOVX    A,@DPTR
   \   000203   7035         JNZ     ??afIncomingData_26
   \   000205   E8           MOV     A,R0
   \   000206   49           ORL     A,R1
   \   000207   7031         JNZ     ??afIncomingData_26
   \                     ??afIncomingData_25:
   \   000209                ; Setup parameters for call to function afBuildMSGIncoming
   \   000209   78..         MOV     R0,#?V0 + 4
   \   00020B   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00020E   7421         MOV     A,#0x21
   \   000210   12....       LCALL   ?XSTACK_DISP0_8
   \   000213   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000216   78..         MOV     R0,#?V0 + 8
   \   000218   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021B   7409         MOV     A,#0x9
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000223   740A         MOV     A,#0xa
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F9           MOV     R1,A
   \   00022A   EE           MOV     A,R6
   \   00022B   FC           MOV     R4,A
   \   00022C   EF           MOV     A,R7
   \   00022D   FD           MOV     R5,A
   \   00022E   AA..         MOV     R2,?V0 + 10
   \   000230   AB..         MOV     R3,?V0 + 11
   \   000232   12....       LCALL   ??afBuildMSGIncoming?relay
   \   000235   740A         MOV     A,#0xa
   \   000237   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??afIncomingData_26:
   \   00023A   85..82       MOV     DPL,?V0 + 10
   \   00023D   85..83       MOV     DPH,?V0 + 11
   \   000240   E0           MOVX    A,@DPTR
   \   000241   540C         ANL     A,#0xc
   \   000243   640C         XRL     A,#0xc
   \   000245   6003         JZ      $+5
   \   000247   02....       LJMP    ??afIncomingData_27 & 0xFFFF
   \   00024A                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00024A   A9..         MOV     R1,?V0 + 2
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   E0           MOVX    A,@DPTR
   \   000251   FA           MOV     R2,A
   \   000252   A3           INC     DPTR
   \   000253   E0           MOVX    A,@DPTR
   \   000254   FB           MOV     R3,A
   \   000255   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   000258   E9           MOV     A,R1
   \   000259   F5..         MOV     ?V0 + 2,A
   \   00025B   74FE         MOV     A,#-0x2
   \   00025D   65..         XRL     A,?V0 + 2
   \   00025F   7003         JNZ     $+5
   \   000261   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   000264   90....       MOV     DPTR,#epList
   \   000267   E0           MOVX    A,@DPTR
   \   000268   FA           MOV     R2,A
   \   000269   A3           INC     DPTR
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   800D         SJMP    ??afIncomingData_28
   \                     ??afIncomingData_29:
   \   00026D   A3           INC     DPTR
   \   00026E   A3           INC     DPTR
   \   00026F   A3           INC     DPTR
   \   000270   A3           INC     DPTR
   \   000271   A3           INC     DPTR
   \   000272   E0           MOVX    A,@DPTR
   \   000273   F8           MOV     R0,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   F9           MOV     R1,A
   \   000277   E8           MOV     A,R0
   \   000278   FA           MOV     R2,A
   \   000279   E9           MOV     A,R1
   \                     ??afIncomingData_28:
   \   00027A   FB           MOV     R3,A
   \   00027B   EA           MOV     A,R2
   \   00027C   4B           ORL     A,R3
   \   00027D   601C         JZ      ??afIncomingData_30
   \   00027F   8A82         MOV     DPL,R2
   \   000281   8B83         MOV     DPH,R3
   \   000283   E0           MOVX    A,@DPTR
   \   000284   F8           MOV     R0,A
   \   000285   A3           INC     DPTR
   \   000286   E0           MOVX    A,@DPTR
   \   000287   F583         MOV     DPH,A
   \   000289   8882         MOV     DPL,R0
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   65..         XRL     A,?V0 + 2
   \   00028E   8A82         MOV     DPL,R2
   \   000290   8B83         MOV     DPH,R3
   \   000292   70D9         JNZ     ??afIncomingData_29
   \   000294   E0           MOVX    A,@DPTR
   \   000295   FE           MOV     R6,A
   \   000296   A3           INC     DPTR
   \   000297   E0           MOVX    A,@DPTR
   \   000298   FF           MOV     R7,A
   \   000299   8004         SJMP    ??afIncomingData_31
   \                     ??afIncomingData_30:
   \   00029B   7E00         MOV     R6,#0x0
   \   00029D   7F00         MOV     R7,#0x0
   \                     ??afIncomingData_31:
   \   00029F   EE           MOV     A,R6
   \   0002A0   4F           ORL     A,R7
   \   0002A1   6054         JZ      ??afIncomingData_1
   \   0002A3   8E82         MOV     DPL,R6
   \   0002A5   8F83         MOV     DPH,R7
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   F9           MOV     R1,A
   \   0002A9   90....       MOV     DPTR,#epList
   \   0002AC   8009         SJMP    ??afIncomingData_32
   \                     ??afIncomingData_33:
   \   0002AE   8A82         MOV     DPL,R2
   \   0002B0   8B83         MOV     DPH,R3
   \   0002B2   A3           INC     DPTR
   \   0002B3   A3           INC     DPTR
   \   0002B4   A3           INC     DPTR
   \   0002B5   A3           INC     DPTR
   \   0002B6   A3           INC     DPTR
   \                     ??afIncomingData_32:
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   FA           MOV     R2,A
   \   0002B9   A3           INC     DPTR
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   FB           MOV     R3,A
   \   0002BC   EA           MOV     A,R2
   \   0002BD   4B           ORL     A,R3
   \   0002BE   7003         JNZ     $+5
   \   0002C0   02....       LJMP    ??afIncomingData_20 & 0xFFFF
   \   0002C3   8A82         MOV     DPL,R2
   \   0002C5   8B83         MOV     DPH,R3
   \   0002C7   E0           MOVX    A,@DPTR
   \   0002C8   F8           MOV     R0,A
   \   0002C9   A3           INC     DPTR
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   F583         MOV     DPH,A
   \   0002CD   8882         MOV     DPL,R0
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   69           XRL     A,R1
   \   0002D1   70DB         JNZ     ??afIncomingData_33
   \   0002D3   02....       LJMP    ??afIncomingData_21 & 0xFFFF
    365          #else
    366                return;
    367          #endif      
    368              }
    369              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_27:
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   F4           CPL     A
   \   0002DA   701B         JNZ     ??afIncomingData_1
    370              {
    371                pList = pList->nextDesc;
   \   0002DC   85..82       MOV     DPL,?V0 + 0
   \   0002DF   85..83       MOV     DPH,?V0 + 1
   \   0002E2   A3           INC     DPTR
   \   0002E3   A3           INC     DPTR
   \   0002E4   A3           INC     DPTR
   \   0002E5   A3           INC     DPTR
   \   0002E6   A3           INC     DPTR
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   F5..         MOV     ?V0 + 0,A
   \   0002EA   A3           INC     DPTR
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   F5..         MOV     ?V0 + 1,A
    372                if ( pList )
   \   0002EE   E5..         MOV     A,?V0 + 0
   \   0002F0   45..         ORL     A,?V0 + 1
   \   0002F2   6003         JZ      $+5
   \   0002F4   02....       LJMP    ??afIncomingData_12 & 0xFFFF
    373                  epDesc = pList->epDesc;
    374                else
    375                  epDesc = NULL;
   \                     ??afIncomingData_1:
   \   0002F7                REQUIRE ?Subroutine1
   \   0002F7                ; // Fall through to label ?Subroutine1
    376              }
    377              else
    378                epDesc = NULL;
    379            }
    380          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7403         MOV     A,#0x3
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F10         MOV     R7,#0x10
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA
    381          
    382          /*********************************************************************
    383           * @fn          afBuildMSGIncoming
    384           *
    385           * @brief       Build the message for the app
    386           *
    387           * @param
    388           *
    389           * @return      pointer to next in data buffer
    390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    392                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    393                           byte SecurityUse, uint32 timestamp )
    394          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V0 + 0,R2
   \   00001E   8B..         MOV     ?V0 + 1,R3
   \   000020   741B         MOV     A,#0x1b
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 3,A
   \   00002C   741F         MOV     A,#0x1f
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 8,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 9,A
   \   000038   7421         MOV     A,#0x21
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?L_MOV_X
    395            afIncomingMSGPacket_t *MSGpkt;
    396            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    397            byte *asdu = aff->asdu;
   \   000042   EA           MOV     A,R2
   \   000043   240E         ADD     A,#0xe
   \   000045   F582         MOV     DPL,A
   \   000047   EB           MOV     A,R3
   \   000048   3400         ADDC    A,#0x0
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 14,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 15,A
    398            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000053   EA           MOV     A,R2
   \   000054   2410         ADD     A,#0x10
   \   000056   F5..         MOV     ?V0 + 10,A
   \   000058   EB           MOV     A,R3
   \   000059   3400         ADDC    A,#0x0
   \   00005B   F5..         MOV     ?V0 + 11,A
   \   00005D                ; Setup parameters for call to function osal_msg_allocate
   \   00005D   85..82       MOV     DPL,?V0 + 10
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2423         ADD     A,#0x23
   \   000065   FA           MOV     R2,A
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   ??osal_msg_allocate?relay
   \   00006B   8A..         MOV     ?V0 + 12,R2
   \   00006D   8B..         MOV     ?V0 + 13,R3
   \   00006F   AE..         MOV     R6,?V0 + 12
   \   000071   AF..         MOV     R7,?V0 + 13
    399          
    400            if ( MSGpkt == NULL )
   \   000073   EE           MOV     A,R6
   \   000074   4F           ORL     A,R7
   \   000075   7003         JNZ     $+5
   \   000077   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    401            {
    402              return;
    403            }
    404          
    405            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   741A         MOV     A,#0x1a
   \   000080   F0           MOVX    @DPTR,A
    406            MSGpkt->groupId = aff->GroupID;
   \   000081   85..82       MOV     DPL,?V0 + 0
   \   000084   85..83       MOV     DPH,?V0 + 1
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E8           MOV     A,R0
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   E9           MOV     A,R1
   \   00009A   F0           MOVX    @DPTR,A
    407            MSGpkt->clusterId = aff->ClusterID;
   \   00009B   85..82       MOV     DPL,?V0 + 0
   \   00009E   85..83       MOV     DPH,?V0 + 1
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F8           MOV     R0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   E8           MOV     A,R0
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   E9           MOV     A,R1
   \   0000B8   F0           MOVX    @DPTR,A
    408            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   0000B9   EE           MOV     A,R6
   \   0000BA   2406         ADD     A,#0x6
   \   0000BC   FA           MOV     R2,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   3400         ADDC    A,#0x0
   \   0000C0   FB           MOV     R3,A
   \   0000C1   E5..         MOV     A,?V0 + 2
   \   0000C3   2408         ADD     A,#0x8
   \   0000C5   F8           MOV     R0,A
   \   0000C6   E5..         MOV     A,?V0 + 3
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F9           MOV     R1,A
   \   0000CB   8882         MOV     DPL,R0
   \   0000CD   8983         MOV     DPH,R1
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   8A82         MOV     DPL,R2
   \   0000D2   8B83         MOV     DPH,R3
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   8882         MOV     DPL,R0
   \   0000DF   8983         MOV     DPH,R1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   6403         XRL     A,#0x3
   \   0000E4   7009         JNZ     ??afBuildMSGIncoming_1
   \   0000E6                ; Setup parameters for call to function sAddrExtCpy
   \   0000E6   AC..         MOV     R4,?V0 + 2
   \   0000E8   AD..         MOV     R5,?V0 + 3
   \   0000EA   12....       LCALL   ??sAddrExtCpy?relay
   \   0000ED   8014         SJMP    ??afBuildMSGIncoming_2
   \                     ??afBuildMSGIncoming_1:
   \   0000EF   85..82       MOV     DPL,?V0 + 2
   \   0000F2   85..83       MOV     DPH,?V0 + 3
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F8           MOV     R0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F9           MOV     R1,A
   \   0000FA   8A82         MOV     DPL,R2
   \   0000FC   8B83         MOV     DPH,R3
   \   0000FE   E8           MOV     A,R0
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   E9           MOV     A,R1
   \   000102   F0           MOVX    @DPTR,A
    409            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \                     ??afBuildMSGIncoming_2:
   \   000103   85..82       MOV     DPL,?V0 + 0
   \   000106   85..83       MOV     DPH,?V0 + 1
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   C0E0         PUSH    A
   \   00010F   EE           MOV     A,R6
   \   000110   240F         ADD     A,#0xf
   \   000112   F582         MOV     DPL,A
   \   000114   EF           MOV     A,R7
   \   000115   3400         ADDC    A,#0x0
   \   000117   F583         MOV     DPH,A
   \   000119   D0E0         POP     A
   \   00011B   F0           MOVX    @DPTR,A
    410            MSGpkt->endPoint = epDesc->endPoint;
   \   00011C   7401         MOV     A,#0x1
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F8           MOV     R0,A
   \   000123   A3           INC     DPTR
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F583         MOV     DPH,A
   \   000127   8882         MOV     DPL,R0
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   C0E0         PUSH    A
   \   00012C   EE           MOV     A,R6
   \   00012D   2414         ADD     A,#0x14
   \   00012F   F582         MOV     DPL,A
   \   000131   EF           MOV     A,R7
   \   000132   3400         ADDC    A,#0x0
   \   000134   F583         MOV     DPH,A
   \   000136   D0E0         POP     A
   \   000138   F0           MOVX    @DPTR,A
    411            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000139   E5..         MOV     A,?V0 + 0
   \   00013B   240C         ADD     A,#0xc
   \   00013D   F582         MOV     DPL,A
   \   00013F   E5..         MOV     A,?V0 + 1
   \   000141   3400         ADDC    A,#0x0
   \   000143   F583         MOV     DPH,A
   \   000145   E0           MOVX    A,@DPTR
   \   000146   C0E0         PUSH    A
   \   000148   EE           MOV     A,R6
   \   000149   2415         ADD     A,#0x15
   \   00014B   F582         MOV     DPL,A
   \   00014D   EF           MOV     A,R7
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F583         MOV     DPH,A
   \   000152   D0E0         POP     A
   \   000154   F0           MOVX    @DPTR,A
    412            MSGpkt->LinkQuality = sig->LinkQuality;
   \   000155   85..82       MOV     DPL,?V0 + 8
   \   000158   85..83       MOV     DPH,?V0 + 9
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   C0E0         PUSH    A
   \   00015E   EE           MOV     A,R6
   \   00015F   2416         ADD     A,#0x16
   \   000161   F582         MOV     DPL,A
   \   000163   EF           MOV     A,R7
   \   000164   3400         ADDC    A,#0x0
   \   000166   F583         MOV     DPH,A
   \   000168   D0E0         POP     A
   \   00016A   F0           MOVX    @DPTR,A
    413            MSGpkt->correlation = sig->correlation;
   \   00016B   85..82       MOV     DPL,?V0 + 8
   \   00016E   85..83       MOV     DPH,?V0 + 9
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C0E0         PUSH    A
   \   000175   EE           MOV     A,R6
   \   000176   2417         ADD     A,#0x17
   \   000178   F582         MOV     DPL,A
   \   00017A   EF           MOV     A,R7
   \   00017B   3400         ADDC    A,#0x0
   \   00017D   F583         MOV     DPH,A
   \   00017F   D0E0         POP     A
   \   000181   F0           MOVX    @DPTR,A
    414            MSGpkt->rssi = sig->rssi;
   \   000182   85..82       MOV     DPL,?V0 + 8
   \   000185   85..83       MOV     DPH,?V0 + 9
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   C0E0         PUSH    A
   \   00018D   EE           MOV     A,R6
   \   00018E   2418         ADD     A,#0x18
   \   000190   F582         MOV     DPL,A
   \   000192   EF           MOV     A,R7
   \   000193   3400         ADDC    A,#0x0
   \   000195   F583         MOV     DPH,A
   \   000197   D0E0         POP     A
   \   000199   F0           MOVX    @DPTR,A
    415            MSGpkt->SecurityUse = SecurityUse;
   \   00019A   85..82       MOV     DPL,?XSP + 0
   \   00019D   85..83       MOV     DPH,?XSP + 1
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   C0E0         PUSH    A
   \   0001A3   EE           MOV     A,R6
   \   0001A4   2419         ADD     A,#0x19
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   EF           MOV     A,R7
   \   0001A9   3400         ADDC    A,#0x0
   \   0001AB   F583         MOV     DPH,A
   \   0001AD   D0E0         POP     A
   \   0001AF   F0           MOVX    @DPTR,A
    416            MSGpkt->timestamp = timestamp;
   \   0001B0   EE           MOV     A,R6
   \   0001B1   241A         ADD     A,#0x1a
   \   0001B3   F582         MOV     DPL,A
   \   0001B5   EF           MOV     A,R7
   \   0001B6   3400         ADDC    A,#0x0
   \   0001B8   F583         MOV     DPH,A
   \   0001BA   78..         MOV     R0,#?V0 + 4
   \   0001BC   12....       LCALL   ?L_MOV_TO_X
    417            MSGpkt->macDestAddr = aff->macDestAddr;
   \   0001BF   85..82       MOV     DPL,?V0 + 0
   \   0001C2   85..83       MOV     DPH,?V0 + 1
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F8           MOV     R0,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   F9           MOV     R1,A
   \   0001D4   EE           MOV     A,R6
   \   0001D5   2412         ADD     A,#0x12
   \   0001D7   F582         MOV     DPL,A
   \   0001D9   EF           MOV     A,R7
   \   0001DA   3400         ADDC    A,#0x0
   \   0001DC   F583         MOV     DPH,A
   \   0001DE   E8           MOV     A,R0
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E9           MOV     A,R1
   \   0001E2   F0           MOVX    @DPTR,A
    418            MSGpkt->srcAddr.panId = SrcPanId;
   \   0001E3   741D         MOV     A,#0x1d
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   F8           MOV     R0,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   F9           MOV     R1,A
   \   0001ED   EE           MOV     A,R6
   \   0001EE   2410         ADD     A,#0x10
   \   0001F0   F582         MOV     DPL,A
   \   0001F2   EF           MOV     A,R7
   \   0001F3   3400         ADDC    A,#0x0
   \   0001F5   F583         MOV     DPH,A
   \   0001F7   E8           MOV     A,R0
   \   0001F8   F0           MOVX    @DPTR,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E9           MOV     A,R1
   \   0001FB   F0           MOVX    @DPTR,A
    419            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001FC   EE           MOV     A,R6
   \   0001FD   241E         ADD     A,#0x1e
   \   0001FF   F582         MOV     DPL,A
   \   000201   EF           MOV     A,R7
   \   000202   3400         ADDC    A,#0x0
   \   000204   F583         MOV     DPH,A
   \   000206   E4           CLR     A
   \   000207   F0           MOVX    @DPTR,A
    420            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000208   85..82       MOV     DPL,?V0 + 10
   \   00020B   85..83       MOV     DPH,?V0 + 11
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   FC           MOV     R4,A
   \   000210   7D00         MOV     R5,#0x0
   \   000212   EE           MOV     A,R6
   \   000213   241F         ADD     A,#0x1f
   \   000215   F582         MOV     DPL,A
   \   000217   EF           MOV     A,R7
   \   000218   3400         ADDC    A,#0x0
   \   00021A   F583         MOV     DPH,A
   \   00021C   EC           MOV     A,R4
   \   00021D   F0           MOVX    @DPTR,A
   \   00021E   A3           INC     DPTR
   \   00021F   E4           CLR     A
   \   000220   F0           MOVX    @DPTR,A
    421          
    422            if ( MSGpkt->cmd.DataLength )
   \   000221   EE           MOV     A,R6
   \   000222   2421         ADD     A,#0x21
   \   000224   F8           MOV     R0,A
   \   000225   EF           MOV     A,R7
   \   000226   3400         ADDC    A,#0x0
   \   000228   F9           MOV     R1,A
   \   000229   E8           MOV     A,R0
   \   00022A   FA           MOV     R2,A
   \   00022B   E9           MOV     A,R1
   \   00022C   FB           MOV     R3,A
   \   00022D   EC           MOV     A,R4
   \   00022E   6032         JZ      ??afBuildMSGIncoming_3
    423            {
    424              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   000230   EE           MOV     A,R6
   \   000231   2423         ADD     A,#0x23
   \   000233   08           INC     R0
   \   000234   08           INC     R0
   \   000235   EF           MOV     A,R7
   \   000236   3400         ADDC    A,#0x0
   \   000238   F9           MOV     R1,A
   \   000239   8A82         MOV     DPL,R2
   \   00023B   8B83         MOV     DPH,R3
   \   00023D   E8           MOV     A,R0
   \   00023E   F0           MOVX    @DPTR,A
   \   00023F   A3           INC     DPTR
   \   000240   E9           MOV     A,R1
   \   000241   F0           MOVX    @DPTR,A
    425              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   000242                ; Setup parameters for call to function osal_memcpy
   \   000242   85....       MOV     ?V0 + 0,?V0 + 14
   \   000245   85....       MOV     ?V0 + 1,?V0 + 15
   \   000248   8D..         MOV     ?V0 + 2,R5
   \   00024A   78..         MOV     R0,#?V0 + 0
   \   00024C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00024F   8A82         MOV     DPL,R2
   \   000251   8B83         MOV     DPH,R3
   \   000253   E0           MOVX    A,@DPTR
   \   000254   FA           MOV     R2,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   FB           MOV     R3,A
   \   000258   12....       LCALL   ??osal_memcpy?relay
   \   00025B   7403         MOV     A,#0x3
   \   00025D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000260   8008         SJMP    ??afBuildMSGIncoming_4
    426            }
    427            else
    428            {
    429              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_3:
   \   000262   8A82         MOV     DPL,R2
   \   000264   8B83         MOV     DPH,R3
   \   000266   E4           CLR     A
   \   000267   F0           MOVX    @DPTR,A
   \   000268   A3           INC     DPTR
   \   000269   F0           MOVX    @DPTR,A
    430            }
    431          
    432          #if defined ( MT_AF_CB_FUNC )
    433            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    434            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    435            {
    436              MT_AfIncomingMsg( (void *)MSGpkt );
    437              // Release the memory.
    438              osal_msg_deallocate( (void *)MSGpkt );
    439            }
    440            else
    441          #endif
    442            {
    443              // Send message through task message.
    444              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_4:
   \   00026A                ; Setup parameters for call to function osal_msg_send
   \   00026A   EE           MOV     A,R6
   \   00026B   FA           MOV     R2,A
   \   00026C   EF           MOV     A,R7
   \   00026D   FB           MOV     R3,A
   \   00026E   7401         MOV     A,#0x1
   \   000270   12....       LCALL   ?XSTACK_DISP0_8
   \   000273   E0           MOVX    A,@DPTR
   \   000274   F8           MOV     R0,A
   \   000275   A3           INC     DPTR
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F583         MOV     DPH,A
   \   000279   8882         MOV     DPL,R0
   \   00027B   A3           INC     DPTR
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   F8           MOV     R0,A
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F583         MOV     DPH,A
   \   000282   8882         MOV     DPL,R0
   \   000284   E0           MOVX    A,@DPTR
   \   000285   F9           MOV     R1,A
   \   000286   12....       LCALL   ??osal_msg_send?relay
    445            }
    446          }
   \                     ??afBuildMSGIncoming_0:
   \   000289   02....       LJMP    ?Subroutine1 & 0xFFFF
    447          
    448          /*********************************************************************
    449           * @fn      AF_DataRequest
    450           *
    451           * @brief   Common functionality for invoking APSDE_DataReq() for both
    452           *          SendMulti and MSG-Send.
    453           *
    454           * input parameters
    455           *
    456           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    457           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    458           * @param   cID - A valid cluster ID as specified by the Profile.
    459           * @param   len - Number of bytes of data pointed to by next param.
    460           * @param  *buf - A pointer to the data bytes to send.
    461           * @param  *transID - A pointer to a byte which can be modified and which will
    462           *                    be used as the transaction sequence number of the msg.
    463           * @param   options - Valid bit mask of Tx options.
    464           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    465           *
    466           * output parameters
    467           *
    468           * @param  *transID - Incremented by one if the return value is success.
    469           *
    470           * @return  afStatus_t - See previous definition of afStatus_... types.
    471           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    472          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    474                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    475                                     uint8 options, uint8 radius )
    476          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   89..         MOV     ?V0 + 6,R1
   \   000014   7434         MOV     A,#0x34
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 10,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 11,A
   \   000020   7436         MOV     A,#0x36
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 8,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 9,A
   \   00002C   7438         MOV     A,#0x38
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 12,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 13,A
   \   000038   743A         MOV     A,#0x3a
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V0 + 3,A
   \   000044   743C         MOV     A,#0x3c
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 7,A
    477            pDescCB pfnDescCB;
    478            ZStatus_t stat;
    479            APSDE_DataReq_t req;
    480            afDataReqMTU_t mtu;
    481          
    482            // Verify source end point
    483            if ( srcEP == NULL )
   \   00004C   EC           MOV     A,R4
   \   00004D   45..         ORL     A,?V0 + 1
   \   00004F   7005         JNZ     ??AF_DataRequest_0
    484            {
    485              return afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_1:
   \   000051   7902         MOV     R1,#0x2
   \   000053   02....       LJMP    ??AF_DataRequest_2 & 0xFFFF
    486            }
    487          
    488          #if !defined( REFLECTOR )
    489            if ( dstAddr->addrMode == afAddrNotPresent )
    490            {
    491              return afStatus_INVALID_PARAMETER;
    492            }
    493          #endif
    494          
    495            // Validate broadcasting
    496            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    497                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_0:
   \   000056   EE           MOV     A,R6
   \   000057   2408         ADD     A,#0x8
   \   000059   F5..         MOV     ?V0 + 4,A
   \   00005B   EF           MOV     A,R7
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F5..         MOV     ?V0 + 5,A
   \   000060   85..82       MOV     DPL,?V0 + 4
   \   000063   F583         MOV     DPH,A
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   7402         MOV     A,#0x2
   \   000069   68           XRL     A,R0
   \   00006A   6005         JZ      ??AF_DataRequest_3
   \   00006C   740F         MOV     A,#0xf
   \   00006E   68           XRL     A,R0
   \   00006F   7021         JNZ     ??AF_DataRequest_4
    498            {
    499              // Check for valid broadcast values
    500              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_3:
   \   000071                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FA           MOV     R2,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FB           MOV     R3,A
   \   00007A   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00007D   E9           MOV     A,R1
   \   00007E   85..82       MOV     DPL,?V0 + 4
   \   000081   85..83       MOV     DPH,?V0 + 5
   \   000084   6005         JZ      ??AF_DataRequest_5
    501              {
    502                // Force mode to broadcast
    503                dstAddr->addrMode = afAddrBroadcast;
   \   000086   740F         MOV     A,#0xf
   \   000088   F0           MOVX    @DPTR,A
   \   000089   8014         SJMP    ??AF_DataRequest_6
    504              }
    505              else
    506              {
    507                // Address is not a valid broadcast type
    508                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_5:
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   640F         XRL     A,#0xf
   \   00008E   700F         JNZ     ??AF_DataRequest_6
   \   000090   80BF         SJMP    ??AF_DataRequest_1
    509                {
    510                  return afStatus_INVALID_PARAMETER;
    511                }
    512              }
    513            }
    514            else if ( dstAddr->addrMode != afAddr64Bit &&
    515                      dstAddr->addrMode != afAddrGroup &&
    516                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_4:
   \   000092   7403         MOV     A,#0x3
   \   000094   68           XRL     A,R0
   \   000095   6008         JZ      ??AF_DataRequest_6
   \   000097   7401         MOV     A,#0x1
   \   000099   68           XRL     A,R0
   \   00009A   6003         JZ      ??AF_DataRequest_6
   \   00009C   E8           MOV     A,R0
   \   00009D   70B2         JNZ     ??AF_DataRequest_1
    517            {
    518              return afStatus_INVALID_PARAMETER;
    519            }
    520            
    521            // Set destination address
    522            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_6:
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C0E0         PUSH    A
   \   0000A2   740A         MOV     A,#0xa
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   D0E0         POP     A
   \   0000A9   F0           MOVX    @DPTR,A
    523            if ( dstAddr->addrMode == afAddr64Bit )
   \   0000AA   85..82       MOV     DPL,?V0 + 4
   \   0000AD   85..83       MOV     DPH,?V0 + 5
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   6403         XRL     A,#0x3
   \   0000B3   7012         JNZ     ??AF_DataRequest_7
    524              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   EE           MOV     A,R6
   \   0000B6   FC           MOV     R4,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   FD           MOV     R5,A
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   AA82         MOV     R2,DPL
   \   0000C0   AB83         MOV     R3,DPH
   \   0000C2   12....       LCALL   ??sAddrExtCpy?relay
   \   0000C5   8013         SJMP    ??AF_DataRequest_8
    525            else
    526              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_7:
   \   0000C7   8E82         MOV     DPL,R6
   \   0000C9   8F83         MOV     DPH,R7
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   7402         MOV     A,#0x2
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E8           MOV     A,R0
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E9           MOV     A,R1
   \   0000D9   F0           MOVX    @DPTR,A
    527            
    528            req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_8:
   \   0000DA   7411         MOV     A,#0x11
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E4           CLR     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   F0           MOVX    @DPTR,A
    529          
    530            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000E3   90....       MOV     DPTR,#epList
   \   0000E6   8002         SJMP    ??AF_DataRequest_9
   \                     ??AF_DataRequest_10:
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \                     ??AF_DataRequest_9:
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F8           MOV     R0,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   E8           MOV     A,R0
   \   0000F0   49           ORL     A,R1
   \   0000F1   6054         JZ      ??AF_DataRequest_11
   \   0000F3   8882         MOV     DPL,R0
   \   0000F5   8983         MOV     DPH,R1
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FA           MOV     R2,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   FB           MOV     R3,A
   \   0000FC   E5..         MOV     A,?V0 + 0
   \   0000FE   6A           XRL     A,R2
   \   0000FF   7003         JNZ     ??AF_DataRequest_12
   \   000101   E5..         MOV     A,?V0 + 1
   \   000103   6B           XRL     A,R3
   \                     ??AF_DataRequest_12:
   \   000104   8882         MOV     DPL,R0
   \   000106   8983         MOV     DPH,R1
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   70DB         JNZ     ??AF_DataRequest_10
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F8           MOV     R0,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F9           MOV     R1,A
   \   000112   E8           MOV     A,R0
   \   000113   FC           MOV     R4,A
   \   000114   E9           MOV     A,R1
   \   000115   FD           MOV     R5,A
   \   000116   EC           MOV     A,R4
   \   000117   4D           ORL     A,R5
   \   000118   602D         JZ      ??AF_DataRequest_11
    531            {
    532              uint16 *pID = (uint16 *)(pfnDescCB(
    533                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00011A                ; Setup parameters for indirect call
   \   00011A   85..82       MOV     DPL,?V0 + 0
   \   00011D   85..83       MOV     DPH,?V0 + 1
   \   000120   E0           MOVX    A,@DPTR
   \   000121   FA           MOV     R2,A
   \   000122   7902         MOV     R1,#0x2
   \   000124   8C82         MOV     DPL,R4
   \   000126   8D83         MOV     DPH,R5
   \   000128   12....       LCALL   ?CALL_IND
    534              if ( pID )
   \   00012B   EA           MOV     A,R2
   \   00012C   4B           ORL     A,R3
   \   00012D   6040         JZ      ??AF_DataRequest_13
    535              {
    536                req.profileID = *pID;
   \   00012F   8A82         MOV     DPL,R2
   \   000131   8B83         MOV     DPH,R3
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F8           MOV     R0,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F9           MOV     R1,A
   \   000138   7411         MOV     A,#0x11
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   E8           MOV     A,R0
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   A3           INC     DPTR
   \   000140   E9           MOV     A,R1
   \   000141   F0           MOVX    @DPTR,A
    537                osal_mem_free( pID );
   \   000142                ; Setup parameters for call to function osal_mem_free
   \   000142   12....       LCALL   ??osal_mem_free?relay
   \   000145   8028         SJMP    ??AF_DataRequest_13
    538              }
    539            }
    540            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_11:
   \   000147   85..82       MOV     DPL,?V0 + 0
   \   00014A   85..83       MOV     DPH,?V0 + 1
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F8           MOV     R0,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F9           MOV     R1,A
   \   000155   8882         MOV     DPL,R0
   \   000157   8983         MOV     DPH,R1
   \   000159   E582         MOV     A,DPL
   \   00015B   4583         ORL     A,DPH
   \   00015D   6010         JZ      ??AF_DataRequest_13
    541            {
    542              req.profileID = srcEP->simpleDesc->AppProfId;
   \   00015F   A3           INC     DPTR
   \   000160   E0           MOVX    A,@DPTR
   \   000161   F8           MOV     R0,A
   \   000162   A3           INC     DPTR
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F9           MOV     R1,A
   \   000165   7411         MOV     A,#0x11
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   E8           MOV     A,R0
   \   00016B   F0           MOVX    @DPTR,A
   \   00016C   A3           INC     DPTR
   \   00016D   E9           MOV     A,R1
   \   00016E   F0           MOVX    @DPTR,A
    543            }
    544          
    545            req.txOptions = 0;
   \                     ??AF_DataRequest_13:
   \   00016F   7417         MOV     A,#0x17
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   E4           CLR     A
   \   000175   F0           MOVX    @DPTR,A
   \   000176   A3           INC     DPTR
   \   000177   F0           MOVX    @DPTR,A
    546          
    547            if ( ( options & AF_ACK_REQUEST              ) &&
    548                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    549                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000178   E5..         MOV     A,?V0 + 6
   \   00017A   A2E4         MOV     C,0xE0 /* A   */.4
   \   00017C   501C         JNC     ??AF_DataRequest_14
   \   00017E   740A         MOV     A,#0xa
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   E0           MOVX    A,@DPTR
   \   000184   F8           MOV     R0,A
   \   000185   740F         MOV     A,#0xf
   \   000187   68           XRL     A,R0
   \   000188   6010         JZ      ??AF_DataRequest_14
   \   00018A   7401         MOV     A,#0x1
   \   00018C   68           XRL     A,R0
   \   00018D   600B         JZ      ??AF_DataRequest_14
    550            {
    551              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00018F   7417         MOV     A,#0x17
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   7404         MOV     A,#0x4
   \   000196   F0           MOVX    @DPTR,A
   \   000197   A3           INC     DPTR
   \   000198   E4           CLR     A
   \   000199   F0           MOVX    @DPTR,A
    552            }
    553          
    554            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_14:
   \   00019A   E5..         MOV     A,?V0 + 6
   \   00019C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00019E   5009         JNC     ??AF_DataRequest_15
    555            {
    556              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   0001A0   7417         MOV     A,#0x17
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   4410         ORL     A,#0x10
   \   0001A8   F0           MOVX    @DPTR,A
    557            }
    558          
    559            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_15:
   \   0001A9   E5..         MOV     A,?V0 + 6
   \   0001AB   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001AD   5012         JNC     ??AF_DataRequest_16
    560            {
    561              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   0001AF   7417         MOV     A,#0x17
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   4401         ORL     A,#0x1
   \   0001B7   F0           MOVX    @DPTR,A
    562              mtu.aps.secure = TRUE;
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   7401         MOV     A,#0x1
   \   0001BF   8006         SJMP    ??AF_DataRequest_17
    563            }
    564            else
    565            {
    566              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_16:
   \   0001C1   7401         MOV     A,#0x1
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E4           CLR     A
   \                     ??AF_DataRequest_17:
   \   0001C7   F0           MOVX    @DPTR,A
    567            }
    568          
    569            mtu.kvp = FALSE;
   \   0001C8   85..82       MOV     DPL,?XSP + 0
   \   0001CB   85..83       MOV     DPH,?XSP + 1
   \   0001CE   E4           CLR     A
   \   0001CF   F0           MOVX    @DPTR,A
    570          
    571            req.transID       = *transID;
   \   0001D0   85..82       MOV     DPL,?V0 + 2
   \   0001D3   85..83       MOV     DPH,?V0 + 3
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   C0E0         PUSH    A
   \   0001D9   7419         MOV     A,#0x19
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   D0E0         POP     A
   \   0001E0   F0           MOVX    @DPTR,A
    572            req.srcEP         = srcEP->endPoint;
   \   0001E1   85..82       MOV     DPL,?V0 + 0
   \   0001E4   85..83       MOV     DPH,?V0 + 1
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   C0E0         PUSH    A
   \   0001EA   740B         MOV     A,#0xb
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   D0E0         POP     A
   \   0001F1   F0           MOVX    @DPTR,A
    573            req.dstEP         = dstAddr->endPoint;
   \   0001F2   8E82         MOV     DPL,R6
   \   0001F4   8F83         MOV     DPH,R7
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   C0E0         PUSH    A
   \   000202   740C         MOV     A,#0xc
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   D0E0         POP     A
   \   000209   F0           MOVX    @DPTR,A
    574            req.clusterID     = cID;
   \   00020A   740F         MOV     A,#0xf
   \   00020C   12....       LCALL   ?XSTACK_DISP0_8
   \   00020F   E5..         MOV     A,?V0 + 10
   \   000211   F0           MOVX    @DPTR,A
   \   000212   A3           INC     DPTR
   \   000213   E5..         MOV     A,?V0 + 11
   \   000215   F0           MOVX    @DPTR,A
    575            req.asduLen       = len;
   \   000216   7413         MOV     A,#0x13
   \   000218   12....       LCALL   ?XSTACK_DISP0_8
   \   00021B   E5..         MOV     A,?V0 + 8
   \   00021D   F0           MOVX    @DPTR,A
   \   00021E   A3           INC     DPTR
   \   00021F   E5..         MOV     A,?V0 + 9
   \   000221   F0           MOVX    @DPTR,A
    576            req.asdu          = buf;
   \   000222   7415         MOV     A,#0x15
   \   000224   12....       LCALL   ?XSTACK_DISP0_8
   \   000227   E5..         MOV     A,?V0 + 12
   \   000229   F0           MOVX    @DPTR,A
   \   00022A   A3           INC     DPTR
   \   00022B   E5..         MOV     A,?V0 + 13
   \   00022D   F0           MOVX    @DPTR,A
    577            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \   00022E   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   000231   E0           MOVX    A,@DPTR
   \   000232   C0E0         PUSH    A
   \   000234   741A         MOV     A,#0x1a
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   D0E0         POP     A
   \   00023B   F0           MOVX    @DPTR,A
    578            req.radiusCounter = radius;
   \   00023C   741B         MOV     A,#0x1b
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   E5..         MOV     A,?V0 + 7
   \   000243   F0           MOVX    @DPTR,A
    579          #if defined ( INTER_PAN )
    580            req.dstPanId      = dstAddr->panId;
    581          
    582            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    583            {
    584              if ( len > INTERP_DataReqMTU() )
    585              {
    586                stat = afStatus_INVALID_PARAMETER;
    587              }
    588              else
    589              {
    590                stat = INTERP_DataReq( &req );
    591              }
    592            }
    593            else
    594          #endif // INTER_PAN
    595            {
    596              if (len > afDataReqMTU( &mtu ) )
   \   000244                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000244   7401         MOV     A,#0x1
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   AA82         MOV     R2,DPL
   \   00024B   AB83         MOV     R3,DPH
   \   00024D   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   000250   E9           MOV     A,R1
   \   000251   C3           CLR     C
   \   000252   95..         SUBB    A,?V0 + 8
   \   000254   E4           CLR     A
   \   000255   95..         SUBB    A,?V0 + 9
   \   000257   5027         JNC     ??AF_DataRequest_18
    597              {
    598                if (apsfSendFragmented)
   \   000259   90....       MOV     DPTR,#apsfSendFragmented
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   F8           MOV     R0,A
   \   00025E   A3           INC     DPTR
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   F9           MOV     R1,A
   \   000261   E8           MOV     A,R0
   \   000262   49           ORL     A,R1
   \   000263   6016         JZ      ??AF_DataRequest_19
    599                {
    600                  stat = (*apsfSendFragmented)( &req );
   \   000265                ; Setup parameters for indirect call
   \   000265   7402         MOV     A,#0x2
   \   000267   12....       LCALL   ?XSTACK_DISP0_8
   \   00026A   AA82         MOV     R2,DPL
   \   00026C   AB83         MOV     R3,DPH
   \   00026E   90....       MOV     DPTR,#apsfSendFragmented + 1
   \   000271   E0           MOVX    A,@DPTR
   \   000272   F583         MOV     DPH,A
   \   000274   8882         MOV     DPL,R0
   \   000276   12....       LCALL   ?CALL_IND
   \   000279   8011         SJMP    ??AF_DataRequest_20
    601                }
    602                else
    603                {
    604                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_19:
   \   00027B   75..02       MOV     ?V0 + 4,#0x2
   \   00027E   800F         SJMP    ??AF_DataRequest_21
    605                }
    606              }
    607              else
    608              {
    609                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_18:
   \   000280                ; Setup parameters for call to function APSDE_DataReq
   \   000280   7402         MOV     A,#0x2
   \   000282   12....       LCALL   ?XSTACK_DISP0_8
   \   000285   AA82         MOV     R2,DPL
   \   000287   AB83         MOV     R3,DPH
   \   000289   12....       LCALL   ??APSDE_DataReq?relay
   \                     ??AF_DataRequest_20:
   \   00028C   E9           MOV     A,R1
   \   00028D   F5..         MOV     ?V0 + 4,A
    610              }
    611            }
    612          
    613            /*
    614             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    615             * get added to the NWK databufs. So it will not go OTA and it will not get
    616             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    617             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    618             * message with the first in line TransSeqNumber, even on a multi message.
    619             * Also note that a reflected msg will not have its confirmation generated
    620             * here.
    621             */
    622            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    623                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_21:
   \   00028F   740A         MOV     A,#0xa
   \   000291   12....       LCALL   ?XSTACK_DISP0_8
   \   000294   E0           MOVX    A,@DPTR
   \   000295   6402         XRL     A,#0x2
   \   000297   6003         JZ      $+5
   \   000299   02....       LJMP    ??AF_DataRequest_22 & 0xFFFF
   \   00029C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00029C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00029F   8A..         MOV     ?V0 + 8,R2
   \   0002A1   8B..         MOV     ?V0 + 9,R3
   \   0002A3   A8..         MOV     R0,?V0 + 8
   \   0002A5   A9..         MOV     R1,?V0 + 9
   \   0002A7   7402         MOV     A,#0x2
   \   0002A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   68           XRL     A,R0
   \   0002AE   7003         JNZ     ??AF_DataRequest_23
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   69           XRL     A,R1
   \                     ??AF_DataRequest_23:
   \   0002B3   6003         JZ      $+5
   \   0002B5   02....       LJMP    ??AF_DataRequest_22 & 0xFFFF
    624            {
    625              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002B8   85..82       MOV     DPL,?V0 + 2
   \   0002BB   85..83       MOV     DPH,?V0 + 3
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F5..         MOV     ?V0 + 5,A
   \   0002C1   85..82       MOV     DPL,?V0 + 0
   \   0002C4   85..83       MOV     DPH,?V0 + 1
   \   0002C7   E0           MOVX    A,@DPTR
   \   0002C8   F5..         MOV     ?V0 + 0,A
   \   0002CA   90....       MOV     DPTR,#epList
   \   0002CD   8005         SJMP    ??AF_DataRequest_24
   \                     ??AF_DataRequest_25:
   \   0002CF   A3           INC     DPTR
   \   0002D0   A3           INC     DPTR
   \   0002D1   A3           INC     DPTR
   \   0002D2   A3           INC     DPTR
   \   0002D3   A3           INC     DPTR
   \                     ??AF_DataRequest_24:
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   F8           MOV     R0,A
   \   0002D6   A3           INC     DPTR
   \   0002D7   E0           MOVX    A,@DPTR
   \   0002D8   F9           MOV     R1,A
   \   0002D9   E8           MOV     A,R0
   \   0002DA   49           ORL     A,R1
   \   0002DB   605D         JZ      ??AF_DataRequest_22
   \   0002DD   8882         MOV     DPL,R0
   \   0002DF   8983         MOV     DPH,R1
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   FA           MOV     R2,A
   \   0002E3   A3           INC     DPTR
   \   0002E4   E0           MOVX    A,@DPTR
   \   0002E5   F583         MOV     DPH,A
   \   0002E7   8A82         MOV     DPL,R2
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   65..         XRL     A,?V0 + 0
   \   0002EC   8882         MOV     DPL,R0
   \   0002EE   8983         MOV     DPH,R1
   \   0002F0   70DD         JNZ     ??AF_DataRequest_25
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   F8           MOV     R0,A
   \   0002F4   A3           INC     DPTR
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   F9           MOV     R1,A
   \   0002F7   E8           MOV     A,R0
   \   0002F8   FE           MOV     R6,A
   \   0002F9   E9           MOV     A,R1
   \   0002FA   FF           MOV     R7,A
   \   0002FB   EE           MOV     A,R6
   \   0002FC   4F           ORL     A,R7
   \   0002FD   603B         JZ      ??AF_DataRequest_22
   \   0002FF                ; Setup parameters for call to function osal_msg_allocate
   \   0002FF   7A04         MOV     R2,#0x4
   \   000301   7B00         MOV     R3,#0x0
   \   000303   12....       LCALL   ??osal_msg_allocate?relay
   \   000306   EA           MOV     A,R2
   \   000307   4B           ORL     A,R3
   \   000308   6030         JZ      ??AF_DataRequest_22
   \   00030A   8A82         MOV     DPL,R2
   \   00030C   8B83         MOV     DPH,R3
   \   00030E   74FD         MOV     A,#-0x3
   \   000310   F0           MOVX    @DPTR,A
   \   000311   A3           INC     DPTR
   \   000312   E5..         MOV     A,?V0 + 4
   \   000314   F0           MOVX    @DPTR,A
   \   000315   8A82         MOV     DPL,R2
   \   000317   8B83         MOV     DPH,R3
   \   000319   A3           INC     DPTR
   \   00031A   A3           INC     DPTR
   \   00031B   E5..         MOV     A,?V0 + 0
   \   00031D   F0           MOVX    @DPTR,A
   \   00031E   8A82         MOV     DPL,R2
   \   000320   8B83         MOV     DPH,R3
   \   000322   A3           INC     DPTR
   \   000323   A3           INC     DPTR
   \   000324   A3           INC     DPTR
   \   000325   E5..         MOV     A,?V0 + 5
   \   000327   F0           MOVX    @DPTR,A
   \   000328                ; Setup parameters for call to function osal_msg_send
   \   000328   8E82         MOV     DPL,R6
   \   00032A   8F83         MOV     DPH,R7
   \   00032C   A3           INC     DPTR
   \   00032D   E0           MOVX    A,@DPTR
   \   00032E   F8           MOV     R0,A
   \   00032F   A3           INC     DPTR
   \   000330   E0           MOVX    A,@DPTR
   \   000331   F583         MOV     DPH,A
   \   000333   8882         MOV     DPL,R0
   \   000335   E0           MOVX    A,@DPTR
   \   000336   F9           MOV     R1,A
   \   000337   12....       LCALL   ??osal_msg_send?relay
    626            }
    627          
    628            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_22:
   \   00033A   E5..         MOV     A,?V0 + 4
   \   00033C   7009         JNZ     ??AF_DataRequest_26
    629            {
    630              (*transID)++;
   \   00033E   85..82       MOV     DPL,?V0 + 2
   \   000341   85..83       MOV     DPH,?V0 + 3
   \   000344   E0           MOVX    A,@DPTR
   \   000345   04           INC     A
   \   000346   F0           MOVX    @DPTR,A
    631            }
    632          
    633            return (afStatus_t)stat;
   \                     ??AF_DataRequest_26:
   \   000347   A9..         MOV     R1,?V0 + 4
   \                     ??AF_DataRequest_2:
   \   000349   741E         MOV     A,#0x1e
   \   00034B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00034E   7F0E         MOV     R7,#0xe
   \   000350   02....       LJMP    ?BANKED_LEAVE_XDATA
    634          }
    635          
    636          #if defined ( ZIGBEE_SOURCE_ROUTING )
    637          /*********************************************************************
    638           * @fn      AF_DataRequestSrcRtg
    639           *
    640           * @brief   Common functionality for invoking APSDE_DataReq() for both
    641           *          SendMulti and MSG-Send.
    642           *
    643           * input parameters
    644           *
    645           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    646           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    647           * @param   cID - A valid cluster ID as specified by the Profile.
    648           * @param   len - Number of bytes of data pointed to by next param.
    649           * @param  *buf - A pointer to the data bytes to send.
    650           * @param  *transID - A pointer to a byte which can be modified and which will
    651           *                    be used as the transaction sequence number of the msg.
    652           * @param   options - Valid bit mask of Tx options.
    653           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    654           * @param   relayCnt - Number of devices in the relay list
    655           * @param   pRelayList - Pointer to the relay list
    656           *
    657           * output parameters
    658           *
    659           * @param  *transID - Incremented by one if the return value is success.
    660           *
    661           * @return  afStatus_t - See previous definition of afStatus_... types.
    662           */
    663          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    665                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    666                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    667          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   89..         MOV     ?V0 + 2,R1
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 10,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 11,A
   \   00001B   7416         MOV     A,#0x16
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 8,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   7418         MOV     A,#0x18
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 6,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 7,A
   \   000033   741A         MOV     A,#0x1a
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 5,A
   \   00003F   741C         MOV     A,#0x1c
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 3,A
   \   000047   741D         MOV     A,#0x1d
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   741E         MOV     A,#0x1e
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FC           MOV     R4,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FD           MOV     R5,A
    668            uint8 status;
    669            
    670            /* Add the source route to the source routing table */
    671            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    672                                                   pRelayList );
   \   000058                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FA           MOV     R2,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   ??RTG_AddSrcRtgEntry_Guaranteed?relay
   \   000064   E9           MOV     A,R1
    673          
    674            if( status == RTG_SUCCESS)
   \   000065   702D         JNZ     ??AF_DataRequestSrcRtg_0
    675            {
    676              /* Call AF_DataRequest to send the data */
    677              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000067                ; Setup parameters for call to function AF_DataRequest
   \   000067   78..         MOV     R0,#?V0 + 3
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   78..         MOV     R0,#?V0 + 4
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   78..         MOV     R0,#?V0 + 6
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   78..         MOV     R0,#?V0 + 8
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   78..         MOV     R0,#?V0 + 10
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   A9..         MOV     R1,?V0 + 2
   \   000082   AC..         MOV     R4,?V0 + 0
   \   000084   AD..         MOV     R5,?V0 + 1
   \   000086   EE           MOV     A,R6
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??AF_DataRequest?relay
   \   00008D   7409         MOV     A,#0x9
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   800B         SJMP    ??AF_DataRequestSrcRtg_1
    678            }
    679            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   000094   7405         MOV     A,#0x5
   \   000096   69           XRL     A,R1
   \   000097   7004         JNZ     ??AF_DataRequestSrcRtg_2
    680            {
    681              /* The source route relay count is exceeding the network limit */
    682              status = afStatus_INVALID_PARAMETER;
   \   000099   7902         MOV     R1,#0x2
   \   00009B   8002         SJMP    ??AF_DataRequestSrcRtg_1
    683            }
    684            else
    685            {
    686              /* The guaranteed adding entry fails due to memory failure */
    687              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   00009D   7910         MOV     R1,#0x10
    688            }
    689            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00009F   7F0C         MOV     R7,#0xc
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
    690          }
    691          
    692          #endif
    693          
    694          /*********************************************************************
    695           * @fn      afFindEndPointDescList
    696           *
    697           * @brief   Find the endpoint description entry from the endpoint
    698           *          number.
    699           *
    700           * @param   EndPoint - Application Endpoint to look for
    701           *
    702           * @return  the address to the endpoint/interface description entry
    703           */
    704          static epList_t *afFindEndPointDescList( byte EndPoint )
    705          {
    706            epList_t *epSearch;
    707          
    708            // Start at the beginning
    709            epSearch = epList;
    710          
    711            // Look through the list until the end
    712            while ( epSearch )
    713            {
    714              // Is there a match?
    715              if ( epSearch->epDesc->endPoint == EndPoint )
    716              {
    717                return ( epSearch );
    718              }
    719              else
    720                epSearch = epSearch->nextDesc;  // Next entry
    721            }
    722          
    723            return ( (epList_t *)NULL );
    724          }
    725          
    726          /*********************************************************************
    727           * @fn      afFindEndPointDesc
    728           *
    729           * @brief   Find the endpoint description entry from the endpoint
    730           *          number.
    731           *
    732           * @param   EndPoint - Application Endpoint to look for
    733           *
    734           * @return  the address to the endpoint/interface description entry
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    737          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    738            epList_t *epSearch;
    739          
    740            // Look for the endpoint
    741            epSearch = afFindEndPointDescList( EndPoint );
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8005         SJMP    ??afFindEndPointDesc_0
   \                     ??afFindEndPointDesc_1:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \                     ??afFindEndPointDesc_0:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   \   000013   EA           MOV     A,R2
   \   000014   4B           ORL     A,R3
   \   000015   601B         JZ      ??afFindEndPointDesc_2
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   E0           MOVX    A,@DPTR
   \   000024   69           XRL     A,R1
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   70DE         JNZ     ??afFindEndPointDesc_1
    742          
    743            if ( epSearch )
    744              return ( epSearch->epDesc );
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FA           MOV     R2,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FB           MOV     R3,A
   \   000030   8004         SJMP    ??afFindEndPointDesc_3
    745            else
    746              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_2:
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_3:
   \   000036   02....       LJMP    ?Subroutine0 & 0xFFFF
    747          }
    748          
    749          /*********************************************************************
    750           * @fn      afFindSimpleDesc
    751           *
    752           * @brief   Find the Simple Descriptor from the endpoint number.
    753           *
    754           * @param   EP - Application Endpoint to look for.
    755           *
    756           * @return  Non-zero to indicate that the descriptor memory must be freed.
    757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    758          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    759          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    760            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B   90....       MOV     DPTR,#epList
   \   00000E   8009         SJMP    ??afFindSimpleDesc_0
   \                     ??afFindSimpleDesc_1:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \                     ??afFindSimpleDesc_0:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   49           ORL     A,R1
   \   000020   6013         JZ      ??afFindSimpleDesc_2
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F583         MOV     DPH,A
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V0 + 0
   \   000031   70DD         JNZ     ??afFindSimpleDesc_1
   \   000033   8004         SJMP    ??afFindSimpleDesc_3
   \                     ??afFindSimpleDesc_2:
   \   000035   7800         MOV     R0,#0x0
   \   000037   7900         MOV     R1,#0x0
   \                     ??afFindSimpleDesc_3:
   \   000039   E8           MOV     A,R0
   \   00003A   FC           MOV     R4,A
   \   00003B   E9           MOV     A,R1
   \   00003C   FD           MOV     R5,A
    761            byte rtrn = FALSE;
   \   00003D   7900         MOV     R1,#0x0
    762          
    763            if ( epItem )
   \   00003F   EC           MOV     A,R4
   \   000040   4D           ORL     A,R5
   \   000041   6047         JZ      ??afFindSimpleDesc_4
    764            {
    765              if ( epItem->pfnDescCB )
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FA           MOV     R2,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FB           MOV     R3,A
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   E582         MOV     A,DPL
   \   000055   4583         ORL     A,DPH
   \   000057   6013         JZ      ??afFindSimpleDesc_5
    766              {
    767                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000059                ; Setup parameters for indirect call
   \   000059   AA..         MOV     R2,?V0 + 0
   \   00005B   09           INC     R1
   \   00005C   12....       LCALL   ?CALL_IND
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   EA           MOV     A,R2
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   EB           MOV     A,R3
   \   000067   F0           MOVX    @DPTR,A
    768                rtrn = TRUE;
   \   000068   7901         MOV     R1,#0x1
   \   00006A   8026         SJMP    ??afFindSimpleDesc_6
    769              }
    770              else
    771              {
    772                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_5:
   \   00006C   8C82         MOV     DPL,R4
   \   00006E   8D83         MOV     DPH,R5
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F583         MOV     DPH,A
   \   000076   8882         MOV     DPL,R0
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   FB           MOV     R3,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   EA           MOV     A,R2
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   EB           MOV     A,R3
   \   000088   8007         SJMP    ??afFindSimpleDesc_7
    773              }
    774            }
    775            else
    776            {
    777              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_4:
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   E4           CLR     A
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \                     ??afFindSimpleDesc_7:
   \   000091   F0           MOVX    @DPTR,A
    778            }
    779          
    780            return rtrn;
   \                     ??afFindSimpleDesc_6:
   \   000092                REQUIRE ?Subroutine2
   \   000092                ; // Fall through to label ?Subroutine2
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    782          
    783          /*********************************************************************
    784           * @fn      afGetDescCB
    785           *
    786           * @brief   Get the Descriptor callback function.
    787           *
    788           * @param   epDesc - pointer to the endpoint descriptor
    789           *
    790           * @return  function pointer or NULL
    791           */
    792          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    793          {
    794            epList_t *epSearch;
    795          
    796            // Start at the beginning
    797            epSearch = epList;
    798          
    799            // Look through the list until the end
    800            while ( epSearch )
    801            {
    802              // Is there a match?
    803              if ( epSearch->epDesc == epDesc )
    804              {
    805                return ( epSearch->pfnDescCB );
    806              }
    807              else
    808                epSearch = epSearch->nextDesc;  // Next entry
    809            }
    810          
    811            return ( (pDescCB)NULL );
    812          }
    813          
    814          /*********************************************************************
    815           * @fn      afDataReqMTU
    816           *
    817           * @brief   Get the Data Request MTU(Max Transport Unit).
    818           *
    819           * @param   fields - afDataReqMTU_t
    820           *
    821           * @return  uint8(MTU)
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    824          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    825            uint8 len;
    826            uint8 hdr;
    827          
    828            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    829            {
    830              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    831            }
    832            else
    833            {
    834              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    835            }
    836          
    837            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    838          
    839            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   80..         SJMP    ?Subroutine2
    840          }
    841          
    842          /*********************************************************************
    843           * @fn      afGetMatch
    844           *
    845           * @brief   Set the allow response flag.
    846           *
    847           * @param   ep - Application Endpoint to look for
    848           * @param   action - true - allow response, false - no response
    849           *
    850           * @return  TRUE allow responses, FALSE no response
    851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    852          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    853          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
    854            epList_t *epSearch;
    855          
    856            // Look for the endpoint
    857            epSearch = afFindEndPointDescList( ep );
   \   000006   90....       MOV     DPTR,#epList
   \   000009   8003         SJMP    ??afGetMatch_0
   \                     ??afGetMatch_1:
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \                     ??afGetMatch_0:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   601F         JZ      ??afGetMatch_2
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FB           MOV     R3,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8B82         MOV     DPL,R3
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6A           XRL     A,R2
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   70DE         JNZ     ??afGetMatch_1
    858          
    859            if ( epSearch )
    860            {
    861              if ( epSearch->flags & eEP_AllowMatch )
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   5004         JNC     ??afGetMatch_2
    862                return ( TRUE );
   \   000032   7901         MOV     R1,#0x1
   \   000034   8002         SJMP    ??afGetMatch_3
    863              else
    864                return ( FALSE );
   \                     ??afGetMatch_2:
   \   000036   7900         MOV     R1,#0x0
    865            }
   \                     ??afGetMatch_3:
   \   000038   80..         SJMP    ?Subroutine0
    866            else
    867              return ( FALSE );
    868          }
    869          
    870          /*********************************************************************
    871           * @fn      afSetMatch
    872           *
    873           * @brief   Set the allow response flag.
    874           *
    875           * @param   ep - Application Endpoint to look for
    876           * @param   action - true - allow response, false - no response
    877           *
    878           * @return  TRUE if success, FALSE if endpoint not found
    879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    881          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
    882            epList_t *epSearch;
    883          
    884            // Look for the endpoint
    885            epSearch = afFindEndPointDescList( ep );
   \   000006   90....       MOV     DPTR,#epList
   \   000009   8009         SJMP    ??afSetMatch_0
   \                     ??afSetMatch_1:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \                     ??afSetMatch_0:
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   49           ORL     A,R1
   \   00001B   6012         JZ      ??afSetMatch_2
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8C82         MOV     DPL,R4
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6B           XRL     A,R3
   \   00002B   70DE         JNZ     ??afSetMatch_1
   \   00002D   8004         SJMP    ??afSetMatch_3
   \                     ??afSetMatch_2:
   \   00002F   7800         MOV     R0,#0x0
   \   000031   7900         MOV     R1,#0x0
    886          
    887            if ( epSearch )
   \                     ??afSetMatch_3:
   \   000033   E8           MOV     A,R0
   \   000034   49           ORL     A,R1
   \   000035   601A         JZ      ??afSetMatch_4
    888            {
    889              if ( action )
   \   000037   E8           MOV     A,R0
   \   000038   2402         ADD     A,#0x2
   \   00003A   F582         MOV     DPL,A
   \   00003C   E9           MOV     A,R1
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   F583         MOV     DPH,A
   \   000041   EA           MOV     A,R2
   \   000042   6005         JZ      ??afSetMatch_5
    890              {
    891                epSearch->flags |= eEP_AllowMatch;
   \   000044   E0           MOVX    A,@DPTR
   \   000045   D2E0         SETB    0xE0 /* A   */.0
   \   000047   8003         SJMP    ??afSetMatch_6
    892              }
    893              else
    894              {
    895                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_5:
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_6:
   \   00004C   F0           MOVX    @DPTR,A
    896              }
    897              return ( TRUE );
   \   00004D   7901         MOV     R1,#0x1
   \   00004F   8002         SJMP    ??afSetMatch_7
    898            }
    899            else
    900              return ( FALSE );
   \                     ??afSetMatch_4:
   \   000051   7900         MOV     R1,#0x0
   \                     ??afSetMatch_7:
   \   000053                REQUIRE ?Subroutine0
   \   000053                ; // Fall through to label ?Subroutine0
    901          }
    902          
    903          /*********************************************************************
    904           * @fn      afNumEndPoints
    905           *
    906           * @brief   Returns the number of endpoints defined (including 0)
    907           *
    908           * @param   none
    909           *
    910           * @return  number of endpoints
    911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    913          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    914            epList_t *epSearch;
    915            byte endpoints;
    916          
    917            // Start at the beginning
    918            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
    919            endpoints = 0;
   \   000010   7900         MOV     R1,#0x0
    920          
    921            while ( epSearch )
   \   000012   E582         MOV     A,DPL
   \   000014   4583         ORL     A,DPH
   \   000016   6015         JZ      ??afNumEndPoints_0
    922            {
    923              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000018   09           INC     R1
    924              epSearch = epSearch->nextDesc;
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E582         MOV     A,DPL
   \   000029   4583         ORL     A,DPH
   \   00002B   70EB         JNZ     ??afNumEndPoints_1
    925            }
    926          
    927            return ( endpoints );
   \                     ??afNumEndPoints_0:
   \   00002D   80..         SJMP    ?Subroutine0
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      afEndPoints
    932           *
    933           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    934           *          Use afNumEndPoints to find out how big a buffer to supply.
    935           *
    936           * @param   epBuf - pointer to mem used
    937           *
    938           * @return  void
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    941          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    942            epList_t *epSearch;
    943            byte endPoint;
    944          
    945            // Start at the beginning
    946            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
    947          
    948            while ( epSearch )
   \   00000C   EC           MOV     A,R4
   \   00000D   4D           ORL     A,R5
   \   00000E   6031         JZ      ??afEndPoints_0
    949            {
    950              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F583         MOV     DPH,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
    951          
    952              if ( !skipZDO || endPoint != 0 )
   \   00001E   E9           MOV     A,R1
   \   00001F   6003         JZ      ??afEndPoints_2
   \   000021   E8           MOV     A,R0
   \   000022   600B         JZ      ??afEndPoints_3
    953                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000024   E8           MOV     A,R0
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   AA82         MOV     R2,DPL
   \   00002D   AB83         MOV     R3,DPH
    954          
    955              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002F   8C82         MOV     DPL,R4
   \   000031   8D83         MOV     DPH,R5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FC           MOV     R4,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FD           MOV     R5,A
   \   00003D   EC           MOV     A,R4
   \   00003E   4D           ORL     A,R5
   \   00003F   70CF         JNZ     ??afEndPoints_1
    956            }
    957          }
   \                     ??afEndPoints_0:
   \   000041   80..         SJMP    ?Subroutine0
    958          
    959          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    960          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    961          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    962            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV     A,R4
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   ED           MOV     A,R5
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    963            if ( zAddr->addrMode == Addr64Bit )
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6403         XRL     A,#0x3
   \   000026   7005         JNZ     ??afCopyAddress_0
    964              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000028                ; Setup parameters for call to function sAddrExtCpy
   \   000028   12....       LCALL   ??sAddrExtCpy?relay
   \   00002B   8012         SJMP    ??afCopyAddress_1
    965            else
    966              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E8           MOV     A,R0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E9           MOV     A,R1
   \   00003E   F0           MOVX    @DPTR,A
    967          }
   \                     ??afCopyAddress_1:
   \   00003F   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    968          
    969          /*********************************************************************
    970          *********************************************************************/
    971          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AF_DataRequest                     1      0     81
       -> NLME_IsAddressBroadcast       0      0    104
       -> sAddrExtCpy                   0      0    104
       -> osal_mem_free                 0      0    104
       -> APSDE_DataReqMTU              0      0    104
       -> APSDE_DataReq                 0      0    104
       -> NLME_GetShortAddr             0      0    104
       -> osal_msg_allocate             0      0    104
       -> osal_msg_send                 0      0    104
     AF_DataRequestSrcRtg               0      0     41
       -> RTG_AddSrcRtgEntry_Guaranteed
                                        0      0     40
       -> AF_DataRequest                0      0     58
     afBuildMSGIncoming                 1      0     67
       -> osal_msg_allocate             0      0     54
       -> sAddrExtCpy                   0      0     54
       -> osal_memcpy                   0      0     60
       -> osal_msg_send                 0      0     54
     afCopyAddress                      1      0      9
       -> sAddrExtCpy                   0      0     18
     afDataConfirm                      1      0     14
       -> osal_msg_allocate             0      0     28
       -> osal_msg_send                 0      0     28
     afDataReqMTU                       0      0      9
       -> APSDE_DataReqMTU              0      0     18
     afEndPoints                        3      0      0
     afFindEndPointDesc                 2      0      0
     afFindSimpleDesc                   0      0      9
     afGetMatch                         2      0      0
     afIncomingData                     1      0     45
       -> aps_FindGroupForEndpoint      0      0     54
       -> osal_mem_free                 0      0     54
       -> afBuildMSGIncoming            0      0     74
       -> aps_FindGroupForEndpoint      0      0     54
     afInit                             2      0      0
     afNumEndPoints                     2      0      0
     afRegister                         0      0     10
       -> osal_mem_alloc                0      0     20
     afRegisterExtended                 0      0     12
       -> osal_mem_alloc                0      0     24
     afSetMatch                         2      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     epList                                            2
     afInit                                           14
     ?Subroutine0                                      7
     afRegisterExtended                              127
     afRegister                                      180
     afDataConfirm                                   128
     afIncomingData                                  759
     ?Subroutine1                                     10
     afBuildMSGIncoming                              652
     AF_DataRequestDiscoverRoute                       1
     AF_DataRequest                                  851
     AF_DataRequestSrcRtg                            164
     afFindEndPointDesc                               57
     afFindSimpleDesc                                146
     ?Subroutine2                                      5
     afDataReqMTU                                     34
     afGetMatch                                       58
     afSetMatch                                       83
     afNumEndPoints                                   47
     afEndPoints                                      67
     afCopyAddress                                    66
     ?<Initializer for AF_DataRequestDiscoverRoute>    1
     ??afInit?relay                                    6
     ??afRegisterExtended?relay                        6
     ??afRegister?relay                                6
     ??afDataConfirm?relay                             6
     ??afIncomingData?relay                            6
     ??afBuildMSGIncoming?relay                        6
     ??AF_DataRequest?relay                            6
     ??AF_DataRequestSrcRtg?relay                      6
     ??afFindEndPointDesc?relay                        6
     ??afFindSimpleDesc?relay                          6
     ??afDataReqMTU?relay                              6
     ??afGetMatch?relay                                6
     ??afSetMatch?relay                                6
     ??afNumEndPoints?relay                            6
     ??afEndPoints?relay                               6
     ??afCopyAddress?relay                             6

 
 3 455 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 3 552 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
