###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:55 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\stack\zdo\ZDProfile.c                       #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\stack\zdo\ZDProfile.c" -D ZIGBEEPRO -D     #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\ZDProfile.lst                               #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\ZDProfile.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-01-17 08:58:03 -0800 (Sun, 17 Jan 2010) $
      4            Revision:       $Revision: 21533 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   1300         DW 19
   \   000006   ....         DW ??ZDO_ProcessDeviceAnnce?relay
   \   000008   0100         DW 1
   \   00000A   ....         DW ??zdpProcessAddrReq?relay
   \   00000C   0200         DW 2
   \   00000E   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000010   0300         DW 3
   \   000012   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   000014   0400         DW 4
   \   000016   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000018   0500         DW 5
   \   00001A   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   00001C   0600         DW 6
   \   00001E   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000020   1100         DW 17
   \   000022   ....         DW ??ZDO_ProcessUserDescReq?relay
   \   000024   1400         DW 20
   \   000026   ....         DW ??ZDO_ProcessUserDescSet?relay
   \   000028   1500         DW 21
   \   00002A   ....         DW ??ZDO_ProcessServerDiscReq?relay
   \   00002C   FFFF         DW 65535
   \   00002E   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
    226          {
    227            afAddrType_t afAddr;
    228          
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
    230            ZADDR_TO_AFADDR( addr, afAddr );
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
    237          
    238          }
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 1,R1
   \   000014   741D         MOV     A,#0x1d
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 4,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 5,A
   \   000020   741F         MOV     A,#0x1f
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FB           MOV     R3,A
   \   00002A   7421         MOV     A,#0x21
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   000031   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
    258            byte cnt = len;
   \   000039   85....       MOV     ?V0 + 0,?V0 + 1
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   6022         JZ      ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   E0           MOVX    A,@DPTR
   \   000045   8882         MOV     DPL,R0
   \   000047   8983         MOV     DPH,R1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   A3           INC     DPTR
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   8882         MOV     DPL,R0
   \   000055   8983         MOV     DPH,R1
   \   000057   A3           INC     DPTR
   \   000058   A882         MOV     R0,DPL
   \   00005A   A983         MOV     R1,DPH
   \   00005C   15..         DEC     ?V0 + 0
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   70DE         JNZ     ??ZDP_SendData_1
    263            }
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    266                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \                     ??ZDP_SendData_0:
   \   000062   EC           MOV     A,R4
   \   000063   6004         JZ      ??ZDP_SendData_2
   \   000065   7840         MOV     R0,#0x40
   \   000067   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000069   7800         MOV     R0,#0x0
   \                     ??ZDP_SendData_3:
   \   00006B   E8           MOV     A,R0
   \   00006C   441E         ORL     A,#0x1e
   \   00006E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000071   F0           MOVX    @DPTR,A
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C0C         MOV     R4,#0xc
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7900         MOV     R1,#0x0
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   AA82         MOV     R2,DPL
   \   000080   AB83         MOV     R3,DPH
   \   000082   12....       LCALL   ??osal_memset?relay
   \   000085   7409         MOV     A,#0x9
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   C0E0         PUSH    A
   \   00009B   7408         MOV     A,#0x8
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F8           MOV     R0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   E8           MOV     A,R0
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E9           MOV     A,R1
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   24FF         ADD     A,#-0x1
   \   0000BD   F5..         MOV     ?V0 + 6,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   34FF         ADDC    A,#-0x1
   \   0000C3   F5..         MOV     ?V0 + 7,A
   \   0000C5   85..82       MOV     DPL,?V0 + 2
   \   0000C8   85..83       MOV     DPH,?V0 + 3
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   85..82       MOV     DPL,?V0 + 6
   \   0000CF   85..83       MOV     DPH,?V0 + 7
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3                ; Setup parameters for call to function AF_DataRequest
   \   0000D3   75..1E       MOV     ?V0 + 8,#0x1e
   \   0000D6   78..         MOV     R0,#?V0 + 8
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DB   78..         MOV     R0,#?V0 + 2
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E0   78..         MOV     R0,#?V0 + 6
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E5   85....       MOV     ?V0 + 2,?V0 + 1
   \   0000E8   E5..         MOV     A,?V0 + 2
   \   0000EA   2401         ADD     A,#0x1
   \   0000EC   F5..         MOV     ?V0 + 2,A
   \   0000EE   E4           CLR     A
   \   0000EF   3400         ADDC    A,#0x0
   \   0000F1   F5..         MOV     ?V0 + 3,A
   \   0000F3   78..         MOV     R0,#?V0 + 2
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   78..         MOV     R0,#?V0 + 4
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   90....       MOV     DPTR,#ZDP_TxOptions
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F9           MOV     R1,A
   \   000102   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000104   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000106   7409         MOV     A,#0x9
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   AA82         MOV     R2,DPL
   \   00010D   AB83         MOV     R3,DPH
   \   00010F   12....       LCALL   ??AF_DataRequest?relay
   \   000112   7409         MOV     A,#0x9
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   90....       MOV     DPTR,#ZDP_TxOptions
   \   00011A   E4           CLR     A
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   740C         MOV     A,#0xc
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000121   7F09         MOV     R7,#0x9
   \   000123   02....       LJMP    ?BANKED_LEAVE_XDATA
    267          }
    268          
    269          /*********************************************************************
    270           * @fn          ZDP_NWKAddrOfInterestReq
    271           *
    272           * @brief       This builds and send a request message that has
    273           *              NWKAddrOfInterest as its only parameter.
    274           *
    275           * @param       dstAddr - destination address
    276           * @param       nwkAddr - 16 bit address
    277           * @param       SecurityEnable - Security Options
    278           *
    279           * @return      afStatus_t
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    282                                               byte cmd, byte SecurityEnable )
    283          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 2,R1
    284            (void)SecurityEnable;  // Intentionally unreferenced parameter
    285          
    286            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000010   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F583         MOV     DPH,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   EC           MOV     A,R4
   \   00001C   F0           MOVX    @DPTR,A
    287            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F583         MOV     DPH,A
   \   000026   8882         MOV     DPL,R0
   \   000028   A3           INC     DPTR
   \   000029   ED           MOV     A,R5
   \   00002A   F0           MOVX    @DPTR,A
    288          
    289            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C0C         MOV     R4,#0xc
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??osal_memset?relay
   \   00003E   7409         MOV     A,#0x9
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E4           CLR     A
   \   000044   F0           MOVX    @DPTR,A
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C0E0         PUSH    A
   \   000054   7408         MOV     A,#0x8
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   E8           MOV     A,R0
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E9           MOV     A,R1
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000073   E0           MOVX    A,@DPTR
   \   000074   24FF         ADD     A,#-0x1
   \   000076   F5..         MOV     ?V0 + 0,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   34FF         ADDC    A,#-0x1
   \   00007C   F5..         MOV     ?V0 + 1,A
   \   00007E   90....       MOV     DPTR,#ZDP_TransID
   \   000081   E0           MOVX    A,@DPTR
   \   000082   85..82       MOV     DPL,?V0 + 0
   \   000085   85..83       MOV     DPH,?V0 + 1
   \   000088   F0           MOVX    @DPTR,A
   \   000089                ; Setup parameters for call to function AF_DataRequest
   \   000089   75..1E       MOV     ?V0 + 3,#0x1e
   \   00008C   78..         MOV     R0,#?V0 + 3
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000091   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   000094   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   000097   78..         MOV     R0,#?V0 + 4
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   75..03       MOV     ?V0 + 0,#0x3
   \   0000A4   75..00       MOV     ?V0 + 1,#0x0
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   85....       MOV     ?V0 + 0,?V0 + 2
   \   0000AF   02....       LJMP    ?Subroutine0 & 0xFFFF
    290          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005                REQUIRE ??Subroutine13_0
   \   000005                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   90....       MOV     DPTR,#ZDP_TxOptions
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000007   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000009   7409         MOV     A,#0x9
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   AA82         MOV     R2,DPL
   \   000010   AB83         MOV     R3,DPH
   \   000012   12....       LCALL   ??AF_DataRequest?relay
   \   000015   7409         MOV     A,#0x9
   \   000017   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001A   740C         MOV     A,#0xc
   \   00001C                REQUIRE ??Subroutine14_0
   \   00001C                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine15_0
   \   000003                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    291          
    292          /*********************************************************************
    293           * Address Requests
    294           */
    295          
    296          /*********************************************************************
    297           * @fn          ZDP_NwkAddrReq
    298           *
    299           * @brief       This builds and send a NWK_addr_req message.  This
    300           *              function sends a broadcast message looking for a 16
    301           *              bit address with a 64 bit address as bait.
    302           *
    303           * @param       IEEEAddress - looking for this device
    304           * @param       SecurityEnable - Security Options
    305           *
    306           * @return      afStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    309                                     byte StartIndex, byte SecurityEnable )
    310          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 6,R1
   \   000010   8C..         MOV     ?V0 + 5,R4
    311            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 1,A
    312            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    313            zAddrType_t dstAddr;
    314          
    315            (void)SecurityEnable;  // Intentionally unreferenced parameter
    316          
    317            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000022   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000024   12....       LCALL   ??sAddrExtCmp?relay
   \   000027   E9           MOV     A,R1
   \   000028   700B         JNZ     ??ZDP_NwkAddrReq_0
    318            {
    319              dstAddr.addrMode = AddrBroadcast;
   \   00002A   75..0F       MOV     ?V0 + 4,#0xf
    320              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00002D   75..FD       MOV     ?V0 + 2,#-0x3
   \   000030   75..FF       MOV     ?V0 + 3,#-0x1
   \   000033   800D         SJMP    ??ZDP_NwkAddrReq_1
    321            }
    322            else
    323            {
    324              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000035   75..02       MOV     ?V0 + 4,#0x2
    325              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000038   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V0 + 2,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0 + 3,A
    326            }
    327          
    328            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \                     ??ZDP_NwkAddrReq_1:
   \   000042                ; Setup parameters for call to function sAddrExtCpy
   \   000042   EE           MOV     A,R6
   \   000043   FC           MOV     R4,A
   \   000044   EF           MOV     A,R7
   \   000045   FD           MOV     R5,A
   \   000046   AA..         MOV     R2,?V0 + 0
   \   000048   AB..         MOV     R3,?V0 + 1
   \   00004A   12....       LCALL   ??sAddrExtCpy?relay
    329          
    330            *pBuf++ = ReqType;
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   E5..         MOV     A,?V0 + 6
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
    331            *pBuf++ = StartIndex;
   \   000055   E5..         MOV     A,?V0 + 5
   \   000057   F0           MOVX    @DPTR,A
    332          
    333            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000058                ; Setup parameters for call to function osal_memset
   \   000058   7C0C         MOV     R4,#0xc
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ??osal_memset?relay
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   7408         MOV     A,#0x8
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E5..         MOV     A,?V0 + 4
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E5..         MOV     A,?V0 + 2
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E5..         MOV     A,?V0 + 3
   \   000086   F0           MOVX    @DPTR,A
   \   000087   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   24FF         ADD     A,#-0x1
   \   00008D   F5..         MOV     ?V0 + 0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   34FF         ADDC    A,#-0x1
   \   000093   F5..         MOV     ?V0 + 1,A
   \   000095   90....       MOV     DPTR,#ZDP_TransID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   85..82       MOV     DPL,?V0 + 0
   \   00009C   85..83       MOV     DPH,?V0 + 1
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0                ; Setup parameters for call to function AF_DataRequest
   \   0000A0   75..1E       MOV     ?V0 + 2,#0x1e
   \   0000A3   78..         MOV     R0,#?V0 + 2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A8   75....       MOV     ?V0 + 2,#ZDP_TransID & 0xff
   \   0000AB   75....       MOV     ?V0 + 3,#(ZDP_TransID >> 8) & 0xff
   \   0000AE   78..         MOV     R0,#?V0 + 2
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   75..0B       MOV     ?V0 + 0,#0xb
   \   0000BB   75..00       MOV     ?V0 + 1,#0x0
   \   0000BE   78..         MOV     R0,#?V0 + 0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   E4           CLR     A
   \   0000C4   F5..         MOV     ?V0 + 0,A
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   02....       LJMP    ?Subroutine1 & 0xFFFF
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#ZDP_TxOptions
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000007   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000009   7409         MOV     A,#0x9
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   AA82         MOV     R2,DPL
   \   000010   AB83         MOV     R3,DPH
   \   000012   12....       LCALL   ??AF_DataRequest?relay
   \   000015   7409         MOV     A,#0x9
   \   000017   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001A                REQUIRE ??Subroutine11_0
   \   00001A                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   740C         MOV     A,#0xc
   \   000002                REQUIRE ??Subroutine12_0
   \   000002                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV     R7,#0xa
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    335          
    336          /*********************************************************************
    337           * @fn          ZDP_IEEEAddrReq
    338           *
    339           * @brief       This builds and send a IEEE_addr_req message.  This
    340           *              function sends a unicast message looking for a 64
    341           *              bit IEEE address with a 16 bit address as bait.
    342           *
    343           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    344           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    345           * @param       SecurityEnable - Security Options
    346           *
    347           * @return      afStatus_t
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    350                                      byte StartIndex, byte SecurityEnable )
    351          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 0,R1
    352            uint8 *pBuf = ZDP_TmpBuf;
   \   000010   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
    353            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    354            zAddrType_t dstAddr;
    355          
    356            (void)SecurityEnable;  // Intentionally unreferenced parameter
    357          
    358            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    359            dstAddr.addr.shortAddr = shortAddr;
    360          
    361            *pBuf++ = LO_UINT16( shortAddr );
   \   00001C   EE           MOV     A,R6
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
    362            *pBuf++ = HI_UINT16( shortAddr );
   \   00001F   EF           MOV     A,R7
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
    363          
    364            *pBuf++ = ReqType;
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    365            *pBuf++ = StartIndex;
   \   000026   EC           MOV     A,R4
   \   000027   F0           MOVX    @DPTR,A
    366          
    367            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000028                ; Setup parameters for call to function osal_memset
   \   000028   7C0C         MOV     R4,#0xc
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   AA82         MOV     R2,DPL
   \   000036   AB83         MOV     R3,DPH
   \   000038   12....       LCALL   ??osal_memset?relay
   \   00003B   7409         MOV     A,#0x9
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   7408         MOV     A,#0x8
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   7402         MOV     A,#0x2
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EF           MOV     A,R7
   \   000054   F0           MOVX    @DPTR,A
   \   000055   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24FF         ADD     A,#-0x1
   \   00005B   F5..         MOV     ?V0 + 2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   34FF         ADDC    A,#-0x1
   \   000061   F5..         MOV     ?V0 + 3,A
   \   000063   90....       MOV     DPTR,#ZDP_TransID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   85..82       MOV     DPL,?V0 + 2
   \   00006A   85..83       MOV     DPH,?V0 + 3
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E                ; Setup parameters for call to function AF_DataRequest
   \   00006E   75..1E       MOV     ?V0 + 4,#0x1e
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   000079   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   00007C   78..         MOV     R0,#?V0 + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV     R0,#?V0 + 2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   75..05       MOV     ?V0 + 2,#0x5
   \   000089   75..00       MOV     ?V0 + 3,#0x0
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   75..01       MOV     ?V0 + 2,#0x1
   \   000094                REQUIRE ?Subroutine9
   \   000094                ; // Fall through to label ?Subroutine9
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   78..         MOV     R0,#?V0 + 2
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   02....       LJMP    ??Subroutine13_0 & 0xFFFF
    369          
    370          /*********************************************************************
    371           * @fn          ZDP_MatchDescReq
    372           *
    373           * @brief       This builds and send a Match_Desc_req message.  This
    374           *              function sends a broadcast or unicast message
    375           *              requesting the list of endpoint/interfaces that
    376           *              match profile ID and cluster IDs.
    377           *
    378           * @param       dstAddr - destination address
    379           * @param       nwkAddr - network address of interest
    380           * @param       ProfileID - Profile ID
    381           * @param       NumInClusters - number of input clusters
    382           * @param       InClusterList - input cluster ID list
    383           * @param       NumOutClusters - number of output clusters
    384           * @param       OutClusterList - output cluster ID list
    385           * @param       SecurityEnable - Security Options
    386           *
    387           * @return      afStatus_t
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    390                                          uint16 ProfileID,
    391                                          byte NumInClusters, cId_t *InClusterList,
    392                                          byte NumOutClusters, cId_t *OutClusterList,
    393                                          byte SecurityEnable )
    394          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   E9           MOV     A,R1
   \   00000F   FE           MOV     R6,A
   \   000010   7420         MOV     A,#0x20
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FB           MOV     R3,A
   \   00001A   7422         MOV     A,#0x22
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 10,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 11,A
   \   000026   7424         MOV     A,#0x24
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 6,A
   \   00002E   7425         MOV     A,#0x25
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 8,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0 + 9,A
    395            uint8 *pBuf = ZDP_TmpBuf;
   \   00003A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
    396            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    398          
    399            (void)SecurityEnable;  // Intentionally unreferenced parameter
    400          
    401            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000042   EE           MOV     A,R6
   \   000043   25..         ADD     A,?V0 + 6
   \   000045   C3           CLR     C
   \   000046   33           RLC     A
   \   000047   2406         ADD     A,#0x6
   \   000049   F5..         MOV     ?V0 + 3,A
    402          
    403            if ( len >= ZDP_BUF_SZ-1 )
   \   00004B   C3           CLR     C
   \   00004C   944F         SUBB    A,#0x4f
   \   00004E   4005         JC      ??ZDP_MatchDescReq_0
    404            {
    405              return afStatus_MEM_FAIL;
   \   000050   7910         MOV     R1,#0x10
   \   000052   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    406            }
    407          
    408            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    409            // this command to 0xFFFF.  So, here we will filter this and replace 
    410            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    411            // network address of interest.
    412            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    413                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000055   E5..         MOV     A,?V0 + 0
   \   000057   2408         ADD     A,#0x8
   \   000059   F5..         MOV     ?V0 + 4,A
   \   00005B   E5..         MOV     A,?V0 + 1
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F5..         MOV     ?V0 + 5,A
   \   000061   85..82       MOV     DPL,?V0 + 4
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FF           MOV     R7,A
   \   000068   740F         MOV     A,#0xf
   \   00006A   6F           XRL     A,R7
   \   00006B   6005         JZ      ??ZDP_MatchDescReq_2
   \   00006D   7402         MOV     A,#0x2
   \   00006F   6F           XRL     A,R7
   \   000070   701C         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000072   85..82       MOV     DPL,?V0 + 0
   \   000075   85..83       MOV     DPH,?V0 + 1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F4           CPL     A
   \   00007A   7003         JNZ     ??ZDP_MatchDescReq_4
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   00007F   700D         JNZ     ??ZDP_MatchDescReq_3
    414            {
    415              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000081   85..82       MOV     DPL,?V0 + 0
   \   000084   85..83       MOV     DPH,?V0 + 1
   \   000087   74FD         MOV     A,#-0x3
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   74FF         MOV     A,#-0x1
   \   00008D   F0           MOVX    @DPTR,A
    416            }
    417            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00008E   74FF         MOV     A,#-0x1
   \   000090   6C           XRL     A,R4
   \   000091   7003         JNZ     ??ZDP_MatchDescReq_5
   \   000093   74FF         MOV     A,#-0x1
   \   000095   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000096   7004         JNZ     ??ZDP_MatchDescReq_6
    418            {
    419              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000098   7CFD         MOV     R4,#-0x3
   \   00009A   7DFF         MOV     R5,#-0x1
    420            }
    421            
    422            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00009C   EC           MOV     A,R4
   \   00009D   8882         MOV     DPL,R0
   \   00009F   8983         MOV     DPH,R1
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
    423            *pBuf++ = HI_UINT16( nwkAddr );
   \   0000A3   ED           MOV     A,R5
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
    424          
    425            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000A6   EA           MOV     A,R2
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
    426            *pBuf++ = HI_UINT16( ProfileID );
   \   0000A9   EB           MOV     A,R3
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
    427          
    428            *pBuf++ = NumInClusters; // Input cluster list
   \   0000AC   EE           MOV     A,R6
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   A882         MOV     R0,DPL
   \   0000B1   A983         MOV     R1,DPH
    429            if ( NumInClusters )
   \   0000B3   6030         JZ      ??ZDP_MatchDescReq_7
    430            {
    431              for (i=0; i<NumInClusters; ++i)  {
   \   0000B5   AA..         MOV     R2,?V0 + 10
   \   0000B7   AB..         MOV     R3,?V0 + 11
   \   0000B9   FF           MOV     R7,A
    432                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_8:
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   A882         MOV     R0,DPL
   \   0000C7   A983         MOV     R1,DPH
    433                *pBuf++ = HI_UINT16( InClusterList[i] );
   \   0000C9   8A82         MOV     DPL,R2
   \   0000CB   8B83         MOV     DPH,R3
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   08           INC     R0
   \   0000D6   A983         MOV     R1,DPH
    434              }
   \   0000D8   EA           MOV     A,R2
   \   0000D9   2402         ADD     A,#0x2
   \   0000DB   0A           INC     R2
   \   0000DC   0A           INC     R2
   \   0000DD   EB           MOV     A,R3
   \   0000DE   3400         ADDC    A,#0x0
   \   0000E0   FB           MOV     R3,A
   \   0000E1   1F           DEC     R7
   \   0000E2   EF           MOV     A,R7
   \   0000E3   70D5         JNZ     ??ZDP_MatchDescReq_8
    435            }
    436          
    437            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   E5..         MOV     A,?V0 + 6
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   A882         MOV     R0,DPL
   \   0000EF   A983         MOV     R1,DPH
    438            if ( NumOutClusters )
   \   0000F1   6033         JZ      ??ZDP_MatchDescReq_9
    439            {
    440              for (i=0; i<NumOutClusters; ++i)  {
   \   0000F3   AA..         MOV     R2,?V0 + 8
   \   0000F5   AB..         MOV     R3,?V0 + 9
   \   0000F7   F5..         MOV     ?V0 + 2,A
    441                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_10:
   \   0000F9   8A82         MOV     DPL,R2
   \   0000FB   8B83         MOV     DPH,R3
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   8882         MOV     DPL,R0
   \   000100   8983         MOV     DPH,R1
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   A882         MOV     R0,DPL
   \   000106   A983         MOV     R1,DPH
    442                *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   000108   8A82         MOV     DPL,R2
   \   00010A   8B83         MOV     DPH,R3
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   8882         MOV     DPL,R0
   \   000110   8983         MOV     DPH,R1
   \   000112   F0           MOVX    @DPTR,A
   \   000113   A3           INC     DPTR
   \   000114   08           INC     R0
   \   000115   A983         MOV     R1,DPH
    443              }
   \   000117   EA           MOV     A,R2
   \   000118   2402         ADD     A,#0x2
   \   00011A   0A           INC     R2
   \   00011B   0A           INC     R2
   \   00011C   EB           MOV     A,R3
   \   00011D   3400         ADDC    A,#0x0
   \   00011F   FB           MOV     R3,A
   \   000120   15..         DEC     ?V0 + 2
   \   000122   E5..         MOV     A,?V0 + 2
   \   000124   70D3         JNZ     ??ZDP_MatchDescReq_10
    444            }
    445          
    446            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_9:
   \   000126                ; Setup parameters for call to function osal_memset
   \   000126   7C0C         MOV     R4,#0xc
   \   000128   7D00         MOV     R5,#0x0
   \   00012A   7900         MOV     R1,#0x0
   \   00012C   85..82       MOV     DPL,?XSP + 0
   \   00012F   85..83       MOV     DPH,?XSP + 1
   \   000132   AA82         MOV     R2,DPL
   \   000134   AB83         MOV     R3,DPH
   \   000136   12....       LCALL   ??osal_memset?relay
   \   000139   7409         MOV     A,#0x9
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E4           CLR     A
   \   00013F   F0           MOVX    @DPTR,A
   \   000140   85..82       MOV     DPL,?V0 + 4
   \   000143   85..83       MOV     DPH,?V0 + 5
   \   000146   E0           MOVX    A,@DPTR
   \   000147   C0E0         PUSH    A
   \   000149   7408         MOV     A,#0x8
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   D0E0         POP     A
   \   000150   F0           MOVX    @DPTR,A
   \   000151   85..82       MOV     DPL,?V0 + 0
   \   000154   85..83       MOV     DPH,?V0 + 1
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F8           MOV     R0,A
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   85..82       MOV     DPL,?XSP + 0
   \   00015F   85..83       MOV     DPH,?XSP + 1
   \   000162   E8           MOV     A,R0
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   E9           MOV     A,R1
   \   000166   F0           MOVX    @DPTR,A
   \   000167   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   24FF         ADD     A,#-0x1
   \   00016D   F5..         MOV     ?V0 + 0,A
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   34FF         ADDC    A,#-0x1
   \   000173   F5..         MOV     ?V0 + 1,A
   \   000175   90....       MOV     DPTR,#ZDP_TransID
   \   000178   E0           MOVX    A,@DPTR
   \   000179   85..82       MOV     DPL,?V0 + 0
   \   00017C   85..83       MOV     DPH,?V0 + 1
   \   00017F   F0           MOVX    @DPTR,A
   \   000180                ; Setup parameters for call to function AF_DataRequest
   \   000180   75..1E       MOV     ?V0 + 4,#0x1e
   \   000183   78..         MOV     R0,#?V0 + 4
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000188   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   00018B   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   00018E   78..         MOV     R0,#?V0 + 4
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000193   78..         MOV     R0,#?V0 + 0
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   85....       MOV     ?V0 + 0,?V0 + 3
   \   00019B   E5..         MOV     A,?V0 + 0
   \   00019D   2401         ADD     A,#0x1
   \   00019F   F5..         MOV     ?V0 + 0,A
   \   0001A1   E4           CLR     A
   \   0001A2   3400         ADDC    A,#0x0
   \   0001A4   F5..         MOV     ?V0 + 1,A
   \   0001A6   78..         MOV     R0,#?V0 + 0
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   75..06       MOV     ?V0 + 0,#0x6
   \   0001AE   75..00       MOV     ?V0 + 1,#0x0
   \   0001B1   78..         MOV     R0,#?V0 + 0
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B6   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   F9           MOV     R1,A
   \   0001BB   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0001BD   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0001BF   7409         MOV     A,#0x9
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   AA82         MOV     R2,DPL
   \   0001C6   AB83         MOV     R3,DPH
   \   0001C8   12....       LCALL   ??AF_DataRequest?relay
   \   0001CB   7409         MOV     A,#0x9
   \   0001CD   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0001D0   740C         MOV     A,#0xc
   \   0001D2                REQUIRE ?Subroutine2
   \   0001D2                ; // Fall through to label ?Subroutine2
    447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV     R7,#0xc
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    448          
    449          /*********************************************************************
    450           * @fn          ZDP_SimpleDescReq
    451           *
    452           * @brief       This builds and send a NWK_Simple_Desc_req
    453           *              message.  This function sends unicast message to the
    454           *              destination device.
    455           *
    456           * @param       dstAddr - destination address
    457           * @param       nwkAddr - 16 bit address
    458           * @param       epIntf - endpoint/interface
    459           * @param       SecurityEnable - Security Options
    460           *
    461           * @return      afStatus_t
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    464                                              byte endPoint, byte SecurityEnable )
    465          
    466          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    467            (void)SecurityEnable;  // Intentionally unreferenced parameter
    468          
    469            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F583         MOV     DPH,A
   \   000017   8882         MOV     DPL,R0
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
    470            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F583         MOV     DPH,A
   \   000024   8882         MOV     DPL,R0
   \   000026   A3           INC     DPTR
   \   000027   ED           MOV     A,R5
   \   000028   F0           MOVX    @DPTR,A
    471            ZDP_TmpBuf[2] = endPoint;
   \   000029   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E9           MOV     A,R1
   \   000037   F0           MOVX    @DPTR,A
    472          
    473            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \   000038                ; Setup parameters for call to function osal_memset
   \   000038   7C0C         MOV     R4,#0xc
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   12....       LCALL   ??osal_memset?relay
   \   00004B   7409         MOV     A,#0x9
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C0E0         PUSH    A
   \   000061   7408         MOV     A,#0x8
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E8           MOV     A,R0
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E9           MOV     A,R1
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000080   E0           MOVX    A,@DPTR
   \   000081   24FF         ADD     A,#-0x1
   \   000083   F5..         MOV     ?V0 + 0,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   34FF         ADDC    A,#-0x1
   \   000089   F5..         MOV     ?V0 + 1,A
   \   00008B   90....       MOV     DPTR,#ZDP_TransID
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   85..82       MOV     DPL,?V0 + 0
   \   000092   85..83       MOV     DPH,?V0 + 1
   \   000095   F0           MOVX    @DPTR,A
   \   000096                ; Setup parameters for call to function AF_DataRequest
   \   000096   75..1E       MOV     ?V0 + 3,#0x1e
   \   000099   78..         MOV     R0,#?V0 + 3
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   0000A1   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   0000A4   78..         MOV     R0,#?V0 + 4
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..04       MOV     ?V0 + 0,#0x4
   \   0000B1   75..00       MOV     ?V0 + 1,#0x0
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   02....       LJMP    ?Subroutine0 & 0xFFFF
    474          }
    475          
    476          /*********************************************************************
    477           * @fn          ZDP_UserDescSet
    478           *
    479           * @brief       This builds and send a User_Desc_set message to set
    480           *              the user descriptor.  This function sends unicast
    481           *              message to the destination device.
    482           *
    483           * @param       dstAddr - destination address
    484           * @param       nwkAddr - 16 bit address
    485           * @param       UserDescriptor - user descriptor
    486           * @param       SecurityEnable - Security Options
    487           *
    488           * @return      afStatus_t
    489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    491                                    UserDescriptorFormat_t *UserDescriptor,
    492                                    byte SecurityEnable )
    493          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   741F         MOV     A,#0x1f
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   FA           MOV     R2,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FB           MOV     R3,A
    494            uint8 *pBuf = ZDP_TmpBuf;
   \   00001C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 4,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 5,A
    495            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    496                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   C3           CLR     C
   \   00002D   9410         SUBB    A,#0x10
   \   00002F   5004         JNC     ??ZDP_UserDescSet_0
   \   000031   88..         MOV     ?V0 + 0,R0
   \   000033   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000035   75..10       MOV     ?V0 + 0,#0x10
    497            byte addrLen = 2;
    498          
    499            (void)SecurityEnable;  // Intentionally unreferenced parameter
    500          
    501            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000038   EC           MOV     A,R4
   \   000039   85..82       MOV     DPL,?V0 + 4
   \   00003C   85..83       MOV     DPH,?V0 + 5
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
    502            *pBuf++ = HI_UINT16( nwkAddr );
   \   000041   ED           MOV     A,R5
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
    503          
    504            *pBuf++ = len;
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   8582..       MOV     ?V0 + 4,DPL
   \   00004B   8583..       MOV     ?V0 + 5,DPH
    505            addrLen = 3;
    506          
    507            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    508            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00004E                ; Setup parameters for call to function osal_memset
   \   00004E   F5..         MOV     ?V0 + 6,A
   \   000050   7410         MOV     A,#0x10
   \   000052   C3           CLR     C
   \   000053   95..         SUBB    A,?V0 + 6
   \   000055   FC           MOV     R4,A
   \   000056   95E0         SUBB    A,0xE0 /* A   */
   \   000058   FD           MOV     R5,A
   \   000059   7920         MOV     R1,#0x20
   \   00005B   E9           MOV     A,R1
   \   00005C   C0E0         PUSH    A
   \   00005E   EC           MOV     A,R4
   \   00005F   FE           MOV     R6,A
   \   000060   ED           MOV     A,R5
   \   000061   FF           MOV     R7,A
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   A3           INC     DPTR
   \   000067   A982         MOV     R1,DPL
   \   000069   AA83         MOV     R2,DPH
   \   00006B   89..         MOV     ?V0 + 8,R1
   \   00006D   8A..         MOV     ?V0 + 9,R2
   \   00006F   75..00       MOV     ?V0 + 10,#0x0
   \   000072   78..         MOV     R0,#?V0 + 8
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000077   AC..         MOV     R4,?V0 + 6
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   AA..         MOV     R2,?V0 + 4
   \   00007D   AB..         MOV     R3,?V0 + 5
   \   00007F   12....       LCALL   ??osal_memcpy?relay
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   EE           MOV     A,R6
   \   000088   FC           MOV     R4,A
   \   000089   EF           MOV     A,R7
   \   00008A   FD           MOV     R5,A
   \   00008B   D0E0         POP     A
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??osal_memset?relay
    509          
    510            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000091                ; Setup parameters for call to function osal_memset
   \   000091   7C0C         MOV     R4,#0xc
   \   000093   7D00         MOV     R5,#0x0
   \   000095   7900         MOV     R1,#0x0
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   AA82         MOV     R2,DPL
   \   00009F   AB83         MOV     R3,DPH
   \   0000A1   12....       LCALL   ??osal_memset?relay
   \   0000A4   7409         MOV     A,#0x9
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   85..82       MOV     DPL,?V0 + 2
   \   0000AE   85..83       MOV     DPH,?V0 + 3
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   7408         MOV     A,#0x8
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   85..82       MOV     DPL,?V0 + 2
   \   0000C7   85..83       MOV     DPH,?V0 + 3
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F8           MOV     R0,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   85..82       MOV     DPL,?XSP + 0
   \   0000D2   85..83       MOV     DPH,?XSP + 1
   \   0000D5   E8           MOV     A,R0
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E9           MOV     A,R1
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   24FF         ADD     A,#-0x1
   \   0000E0   F5..         MOV     ?V0 + 2,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   34FF         ADDC    A,#-0x1
   \   0000E6   F5..         MOV     ?V0 + 3,A
   \   0000E8   90....       MOV     DPTR,#ZDP_TransID
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   85..82       MOV     DPL,?V0 + 2
   \   0000EF   85..83       MOV     DPH,?V0 + 3
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3                ; Setup parameters for call to function AF_DataRequest
   \   0000F3   75..1E       MOV     ?V0 + 1,#0x1e
   \   0000F6   78..         MOV     R0,#?V0 + 1
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FB   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   0000FE   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   000101   78..         MOV     R0,#?V0 + 4
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   78..         MOV     R0,#?V0 + 2
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   75..14       MOV     ?V0 + 2,#0x14
   \   00010E   75..00       MOV     ?V0 + 3,#0x0
   \   000111   78..         MOV     R0,#?V0 + 2
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   78..         MOV     R0,#?V0 + 2
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F9           MOV     R1,A
   \   000120   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000122   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000124   7409         MOV     A,#0x9
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   AA82         MOV     R2,DPL
   \   00012B   AB83         MOV     R3,DPH
   \   00012D   12....       LCALL   ??AF_DataRequest?relay
   \   000130   7409         MOV     A,#0x9
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
   \   000135   740C         MOV     A,#0xc
   \   000137   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013A   7F0B         MOV     R7,#0xb
   \   00013C   02....       LJMP    ?BANKED_LEAVE_XDATA
    511          }
    512          
    513          /*********************************************************************
    514           * @fn          ZDP_ServerDiscReq
    515           *
    516           * @brief       Build and send a Server_Discovery_req request message.
    517           *
    518           * @param       serverMask - 16-bit bit-mask of server services being sought.
    519           * @param       SecurityEnable - Security Options
    520           *
    521           * @return      afStatus_t
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    524          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    525            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
    526            zAddrType_t dstAddr;
    527          
    528            dstAddr.addrMode = AddrBroadcast;
    529            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    530          
    531            *pBuf++ = LO_UINT16( serverMask );
   \   000018   EA           MOV     A,R2
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
    532            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    533          
    534            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    535                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001D   EE           MOV     A,R6
   \   00001E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000021   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000023   7440         MOV     A,#0x40
   \   000025   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000027   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000028   F0           MOVX    @DPTR,A
   \   000029                ; Setup parameters for call to function osal_memset
   \   000029   7C0C         MOV     R4,#0xc
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   AA82         MOV     R2,DPL
   \   000037   AB83         MOV     R3,DPH
   \   000039   12....       LCALL   ??osal_memset?relay
   \   00003C   7409         MOV     A,#0x9
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   7408         MOV     A,#0x8
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   740F         MOV     A,#0xf
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   74FD         MOV     A,#-0x3
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   74FF         MOV     A,#-0x1
   \   000057   F0           MOVX    @DPTR,A
   \   000058   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   24FF         ADD     A,#-0x1
   \   00005E   F5..         MOV     ?V0 + 0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   34FF         ADDC    A,#-0x1
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   90....       MOV     DPTR,#ZDP_TransID
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   85..82       MOV     DPL,?V0 + 0
   \   00006D   85..83       MOV     DPH,?V0 + 1
   \   000070   F0           MOVX    @DPTR,A
   \   000071                ; Setup parameters for call to function AF_DataRequest
   \   000071   75..1E       MOV     ?V0 + 2,#0x1e
   \   000074   78..         MOV     R0,#?V0 + 2
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   75....       MOV     ?V0 + 2,#ZDP_TransID & 0xff
   \   00007C   75....       MOV     ?V0 + 3,#(ZDP_TransID >> 8) & 0xff
   \   00007F   78..         MOV     R0,#?V0 + 2
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   75..03       MOV     ?V0 + 0,#0x3
   \   00008C   75..00       MOV     ?V0 + 1,#0x0
   \   00008F   78..         MOV     R0,#?V0 + 0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   75..15       MOV     ?V0 + 0,#0x15
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000A3   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000A5   7409         MOV     A,#0x9
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   \   0000AE   12....       LCALL   ??AF_DataRequest?relay
   \   0000B1   7409         MOV     A,#0x9
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B9   E4           CLR     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB                REQUIRE ?Subroutine3
   \   0000BB                ; // Fall through to label ?Subroutine3
    536          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   740C         MOV     A,#0xc
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA
    537          
    538          /*********************************************************************
    539           * @fn          ZDP_DeviceAnnce
    540           *
    541           * @brief       This builds and send a Device_Annce message.  This
    542           *              function sends a broadcast message.
    543           *
    544           * @param       nwkAddr - 16 bit address of the device
    545           * @param       IEEEAddr - 64 bit address of the device
    546           * @param       capabilities - device capabilities.  This field is only
    547           *                 sent for v1.1 networks.
    548           * @param       SecurityEnable - Security Options
    549           *
    550           * @return      afStatus_t
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    553                                        byte capabilities, byte SecurityEnable )
    554          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    555            zAddrType_t dstAddr;
    556            uint8 len;
    557          
    558            (void)SecurityEnable;  // Intentionally unreferenced parameter
    559          
    560            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    561            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    562          
    563            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8882         MOV     DPL,R0
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
    564            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   A3           INC     DPTR
   \   000025   EB           MOV     A,R3
   \   000026   F0           MOVX    @DPTR,A
    565            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000027                ; Setup parameters for call to function sAddrExtCpy
   \   000027   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   2402         ADD     A,#0x2
   \   00002D   FA           MOV     R2,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   3400         ADDC    A,#0x0
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   ??sAddrExtCpy?relay
    566            len = 2 + Z_EXTADDR_LEN;
    567          
    568            ZDP_TmpBuf[10] = capabilities;
   \   000036   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F583         MOV     DPH,A
   \   00003F   8882         MOV     DPL,R0
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   EE           MOV     A,R6
   \   00004C   F0           MOVX    @DPTR,A
    569            len++;
    570          
    571            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00004D                ; Setup parameters for call to function osal_memset
   \   00004D   7C0C         MOV     R4,#0xc
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   7900         MOV     R1,#0x0
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   12....       LCALL   ??osal_memset?relay
   \   000060   7409         MOV     A,#0x9
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   7408         MOV     A,#0x8
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   740F         MOV     A,#0xf
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   74FD         MOV     A,#-0x3
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74FF         MOV     A,#-0x1
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   24FF         ADD     A,#-0x1
   \   000082   F5..         MOV     ?V0 + 0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   34FF         ADDC    A,#-0x1
   \   000088   F5..         MOV     ?V0 + 1,A
   \   00008A   90....       MOV     DPTR,#ZDP_TransID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   85..82       MOV     DPL,?V0 + 0
   \   000091   85..83       MOV     DPH,?V0 + 1
   \   000094   F0           MOVX    @DPTR,A
   \   000095                ; Setup parameters for call to function AF_DataRequest
   \   000095   75..1E       MOV     ?V0 + 2,#0x1e
   \   000098   78..         MOV     R0,#?V0 + 2
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009D   75....       MOV     ?V0 + 2,#ZDP_TransID & 0xff
   \   0000A0   75....       MOV     ?V0 + 3,#(ZDP_TransID >> 8) & 0xff
   \   0000A3   78..         MOV     R0,#?V0 + 2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   75..0C       MOV     ?V0 + 0,#0xc
   \   0000B0   75..00       MOV     ?V0 + 1,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   75..13       MOV     ?V0 + 0,#0x13
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F9           MOV     R1,A
   \   0000C5   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000C7   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000C9   7409         MOV     A,#0x9
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   AA82         MOV     R2,DPL
   \   0000D0   AB83         MOV     R3,DPH
   \   0000D2   12....       LCALL   ??AF_DataRequest?relay
   \   0000D5   7409         MOV     A,#0x9
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   02....       LJMP    ?Subroutine3 & 0xFFFF
    572          }
    573          
    574          /*********************************************************************
    575           * Address Responses
    576           */
    577          
    578          /*********************************************************************
    579           * @fn      zdpProcessAddrReq
    580           *
    581           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    582           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    583           *
    584           * @param   inMsg - incoming message
    585           *
    586           * @return  none
    587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    589          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV     A,#-0x1a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 8,R2
   \   00000C   8B..         MOV     ?V0 + 9,R3
    590            associated_devices_t *pAssoc;
    591            uint8 reqType;
    592            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0 + 2,#-0x2
   \   000011   75..FF       MOV     ?V0 + 3,#-0x1
    593            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    594          
    595            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   EA           MOV     A,R2
   \   00001B   240C         ADD     A,#0xc
   \   00001D   F5..         MOV     ?V0 + 10,A
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 11,A
   \   000024   85..82       MOV     DPL,?V0 + 10
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FB           MOV     R3,A
   \   00002E   EA           MOV     A,R2
   \   00002F   4B           ORL     A,R3
   \   000030   7004         JNZ     ??zdpProcessAddrReq_0
   \   000032   7C08         MOV     R4,#0x8
   \   000034   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000036   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000038   E5..         MOV     A,?V0 + 8
   \   00003A   2413         ADD     A,#0x13
   \   00003C   F5..         MOV     ?V0 + 12,A
   \   00003E   E5..         MOV     A,?V0 + 9
   \   000040   3400         ADDC    A,#0x0
   \   000042   F5..         MOV     ?V0 + 13,A
   \   000044   85..82       MOV     DPL,?V0 + 12
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   E8           MOV     A,R0
   \   00004F   2C           ADD     A,R4
   \   000050   F582         MOV     DPL,A
   \   000052   E9           MOV     A,R1
   \   000053   3400         ADDC    A,#0x0
   \   000055   F583         MOV     DPH,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V0 + 4,A
    596          
    597            if ( inMsg->clusterID == NWK_addr_req )
   \   00005A   EA           MOV     A,R2
   \   00005B   4B           ORL     A,R3
   \   00005C   7058         JNZ     ??zdpProcessAddrReq_2
    598          
    599            {
    600              ieee = inMsg->asdu;
   \   00005E   88..         MOV     ?V0 + 0,R0
   \   000060   89..         MOV     ?V0 + 1,R1
    601          
    602              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000062                ; Setup parameters for call to function sAddrExtCmp
   \   000062   AC..         MOV     R4,?V0 + 0
   \   000064   AD..         MOV     R5,?V0 + 1
   \   000066   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000068   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00006A   12....       LCALL   ??sAddrExtCmp?relay
   \   00006D   E9           MOV     A,R1
   \   00006E   600D         JZ      ??zdpProcessAddrReq_3
    603              {
    604                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000070   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V0 + 2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V0 + 3,A
   \   00007A   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    605              }
    606              // Handle response for sleeping end devices
    607              else if ( (ZSTACK_ROUTER_BUILD)
    608                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    609                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   00007D                ; Setup parameters for call to function AssocGetWithExt
   \   00007D   AA..         MOV     R2,?V0 + 0
   \   00007F   AB..         MOV     R3,?V0 + 1
   \   000081   12....       LCALL   ??AssocGetWithExt?relay
   \   000084   EA           MOV     A,R2
   \   000085   F8           MOV     R0,A
   \   000086   EB           MOV     A,R3
   \   000087   F9           MOV     R1,A
   \   000088   EA           MOV     A,R2
   \   000089   4B           ORL     A,R3
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??zdpProcessAddrReq_5 & 0xFFFF
   \   00008F   8882         MOV     DPL,R0
   \   000091   8983         MOV     DPH,R1
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6401         XRL     A,#0x1
   \   00009A   6003         JZ      $+5
   \   00009C   02....       LJMP    ??zdpProcessAddrReq_5 & 0xFFFF
    610              {
    611                aoi = pAssoc->shortAddr;
   \   00009F   8882         MOV     DPL,R0
   \   0000A1   8983         MOV     DPH,R1
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F5..         MOV     ?V0 + 2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5..         MOV     ?V0 + 3,A
    612                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \   0000AA   E5..         MOV     A,?V0 + 4
   \   0000AC   7003         JNZ     $+5
   \   0000AE   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    613                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_6:
   \   0000B1   75..FF       MOV     ?V0 + 4,#-0x1
   \   0000B4   807F         SJMP    ??zdpProcessAddrReq_4
    614              }
    615            }
    616            else  // if ( inMsg->clusterID == IEEE_addr_req )
    617            {
    618              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000B6   8882         MOV     DPL,R0
   \   0000B8   8983         MOV     DPH,R1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FA           MOV     R2,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   EA           MOV     A,R2
   \   0000C0   2400         ADD     A,#0x0
   \   0000C2   F5..         MOV     ?V0 + 2,A
   \   0000C4   E4           CLR     A
   \   0000C5   39           ADDC    A,R1
   \   0000C6   F5..         MOV     ?V0 + 3,A
    619          
    620              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000C8   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   65..         XRL     A,?V0 + 2
   \   0000CE   7004         JNZ     ??zdpProcessAddrReq_7
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_7:
   \   0000D4   7008         JNZ     ??zdpProcessAddrReq_8
    621              {
    622                ieee = saveExtAddr;
   \   0000D6   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   0000D9   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
   \   0000DC   8057         SJMP    ??zdpProcessAddrReq_4
    623              }
    624              else if ( (ZSTACK_ROUTER_BUILD)
    625                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    626                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_8:
   \   0000DE                ; Setup parameters for call to function AssocGetWithShort
   \   0000DE   AB..         MOV     R3,?V0 + 3
   \   0000E0   12....       LCALL   ??AssocGetWithShort?relay
   \   0000E3   EA           MOV     A,R2
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EB           MOV     A,R3
   \   0000E6   F9           MOV     R1,A
   \   0000E7   EA           MOV     A,R2
   \   0000E8   4B           ORL     A,R3
   \   0000E9   604A         JZ      ??zdpProcessAddrReq_4
   \   0000EB   8882         MOV     DPL,R0
   \   0000ED   8983         MOV     DPH,R1
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   6401         XRL     A,#0x1
   \   0000F6   703D         JNZ     ??zdpProcessAddrReq_4
    627              {
    628                AddrMgrEntry_t addrEntry;
    629                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000F8   740D         MOV     A,#0xd
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E4           CLR     A
   \   0000FE   F0           MOVX    @DPTR,A
    630                addrEntry.index = pAssoc->addrIdx;
   \   0000FF   8882         MOV     DPL,R0
   \   000101   8983         MOV     DPH,R1
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F8           MOV     R0,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F9           MOV     R1,A
   \   00010A   7418         MOV     A,#0x18
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   E8           MOV     A,R0
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E9           MOV     A,R1
   \   000113   F0           MOVX    @DPTR,A
    631                if ( AddrMgrEntryGet( &addrEntry ) )
   \   000114                ; Setup parameters for call to function AddrMgrEntryGet
   \   000114   740D         MOV     A,#0xd
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   AA82         MOV     R2,DPL
   \   00011B   AB83         MOV     R3,DPH
   \   00011D   12....       LCALL   ??AddrMgrEntryGet?relay
   \   000120   E9           MOV     A,R1
   \   000121   600B         JZ      ??zdpProcessAddrReq_9
    632                {
    633                  ieee = addrEntry.extAddr;
   \   000123   7410         MOV     A,#0x10
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   8582..       MOV     ?V0 + 0,DPL
   \   00012B   8583..       MOV     ?V0 + 1,DPH
    634                }
    635          
    636                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   00012E   E5..         MOV     A,?V0 + 4
   \   000130   6003         JZ      $+5
   \   000132   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    637                  reqType = 0xFF; // Force Invalid
    638              }
    639            }
    640          
    641            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000135   74FE         MOV     A,#-0x2
   \   000137   65..         XRL     A,?V0 + 2
   \   000139   7004         JNZ     ??zdpProcessAddrReq_10
   \   00013B   74FF         MOV     A,#-0x1
   \   00013D   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_10:
   \   00013F   6006         JZ      ??zdpProcessAddrReq_5
   \   000141   E5..         MOV     A,?V0 + 0
   \   000143   45..         ORL     A,?V0 + 1
   \   000145   7012         JNZ     ??zdpProcessAddrReq_11
   \                     ??zdpProcessAddrReq_5:
   \   000147   E5..         MOV     A,?V0 + 8
   \   000149   240B         ADD     A,#0xb
   \   00014B   F582         MOV     DPL,A
   \   00014D   E5..         MOV     A,?V0 + 9
   \   00014F   3400         ADDC    A,#0x0
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   6003         JZ      $+5
   \   000156   02....       LJMP    ??zdpProcessAddrReq_12 & 0xFFFF
    642            {
    643              uint8 stat;
    644              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_11:
   \   000159   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   FE           MOV     R6,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   FF           MOV     R7,A
    645              // Status + IEEE-Addr + Nwk-Addr.
    646              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \   000161   75..0B       MOV     ?V0 + 5,#0xb
    647              
    648              // If aoi and iee are both setup, we found results
    649              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000164   74FE         MOV     A,#-0x2
   \   000166   65..         XRL     A,?V0 + 2
   \   000168   7004         JNZ     ??zdpProcessAddrReq_13
   \   00016A   74FF         MOV     A,#-0x1
   \   00016C   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_13:
   \   00016E   601A         JZ      ??zdpProcessAddrReq_14
   \   000170   E5..         MOV     A,?V0 + 0
   \   000172   45..         ORL     A,?V0 + 1
   \   000174   6014         JZ      ??zdpProcessAddrReq_14
    650              {
    651                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    652                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000176   E5..         MOV     A,?V0 + 4
   \   000178   6006         JZ      ??zdpProcessAddrReq_15
   \   00017A   7401         MOV     A,#0x1
   \   00017C   65..         XRL     A,?V0 + 4
   \   00017E   7005         JNZ     ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_15:
   \   000180   75..00       MOV     ?V0 + 6,#0x0
   \   000183   8029         SJMP    ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   000185   75..80       MOV     ?V0 + 6,#-0x80
   \   000188   8024         SJMP    ??zdpProcessAddrReq_17
    653              }
    654              else 
    655              {
    656                // not found and the req was unicast to this device
    657                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_14:
   \   00018A   75..81       MOV     ?V0 + 6,#-0x7f
    658                
    659                // Fill in the missing field with this device's address
    660                if ( inMsg->clusterID == NWK_addr_req )
   \   00018D   85..82       MOV     DPL,?V0 + 10
   \   000190   85..83       MOV     DPH,?V0 + 11
   \   000193   E0           MOVX    A,@DPTR
   \   000194   F8           MOV     R0,A
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F9           MOV     R1,A
   \   000198   E8           MOV     A,R0
   \   000199   49           ORL     A,R1
   \   00019A   700C         JNZ     ??zdpProcessAddrReq_18
    661                {
    662                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00019C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F5..         MOV     ?V0 + 2,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F5..         MOV     ?V0 + 3,A
   \   0001A6   8006         SJMP    ??zdpProcessAddrReq_17
    663                }
    664                else
    665                {
    666                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_18:
   \   0001A8   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   0001AB   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
    667                }
    668              }
    669          
    670              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_17:
   \   0001AE   8E82         MOV     DPL,R6
   \   0001B0   8F83         MOV     DPH,R7
   \   0001B2   E5..         MOV     A,?V0 + 6
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   A3           INC     DPTR
    671          
    672              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   0001B6                ; Setup parameters for call to function sAddrExtCpy
   \   0001B6   AC..         MOV     R4,?V0 + 0
   \   0001B8   AD..         MOV     R5,?V0 + 1
   \   0001BA   AA82         MOV     R2,DPL
   \   0001BC   AB83         MOV     R3,DPH
   \   0001BE   12....       LCALL   ??sAddrExtCpy?relay
   \   0001C1   8A..         MOV     ?V0 + 0,R2
   \   0001C3   8B..         MOV     ?V0 + 1,R3
   \   0001C5   AE..         MOV     R6,?V0 + 0
   \   0001C7   AF..         MOV     R7,?V0 + 1
    673          
    674              *pBuf++ = LO_UINT16( aoi );
   \   0001C9   8E82         MOV     DPL,R6
   \   0001CB   8F83         MOV     DPH,R7
   \   0001CD   E5..         MOV     A,?V0 + 2
   \   0001CF   F0           MOVX    @DPTR,A
   \   0001D0   A3           INC     DPTR
    675              *pBuf++ = HI_UINT16( aoi );
   \   0001D1   E5..         MOV     A,?V0 + 3
   \   0001D3   F0           MOVX    @DPTR,A
   \   0001D4   A3           INC     DPTR
   \   0001D5   AE82         MOV     R6,DPL
   \   0001D7   AF83         MOV     R7,DPH
    676          
    677              if ( ZSTACK_ROUTER_BUILD )
    678              {
    679                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    680                     && (stat == ZDP_SUCCESS) )
   \   0001D9   7401         MOV     A,#0x1
   \   0001DB   65..         XRL     A,?V0 + 4
   \   0001DD   6003         JZ      $+5
   \   0001DF   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001E2   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   65..         XRL     A,?V0 + 2
   \   0001E8   7004         JNZ     ??zdpProcessAddrReq_20
   \   0001EA   A3           INC     DPTR
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_20:
   \   0001EE   6003         JZ      $+5
   \   0001F0   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001F3   E5..         MOV     A,?V0 + 6
   \   0001F5   6003         JZ      $+5
   \   0001F7   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
    681                {
    682                  uint8  cnt = 0;
   \   0001FA   85..82       MOV     DPL,?XSP + 0
   \   0001FD   85..83       MOV     DPH,?XSP + 1
   \   000200   E4           CLR     A
   \   000201   F0           MOVX    @DPTR,A
    683                  uint16 *list = AssocMakeList( &cnt );
   \   000202                ; Setup parameters for call to function AssocMakeList
   \   000202   AA82         MOV     R2,DPL
   \   000204   AB83         MOV     R3,DPH
   \   000206   12....       LCALL   ??AssocMakeList?relay
    684          
    685                  if ( list != NULL )
   \   000209   EA           MOV     A,R2
   \   00020A   4B           ORL     A,R3
   \   00020B   7003         JNZ     $+5
   \   00020D   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
    686                  {
    687                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   000210   85..82       MOV     DPL,?V0 + 10
   \   000213   85..83       MOV     DPH,?V0 + 11
   \   000216   E0           MOVX    A,@DPTR
   \   000217   F8           MOV     R0,A
   \   000218   A3           INC     DPTR
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   F9           MOV     R1,A
   \   00021B   E8           MOV     A,R0
   \   00021C   49           ORL     A,R1
   \   00021D   7004         JNZ     ??zdpProcessAddrReq_22
   \   00021F   7808         MOV     R0,#0x8
   \   000221   8002         SJMP    ??zdpProcessAddrReq_23
   \                     ??zdpProcessAddrReq_22:
   \   000223   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_23:
   \   000225   85..82       MOV     DPL,?V0 + 12
   \   000228   85..83       MOV     DPH,?V0 + 13
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   28           ADD     A,R0
   \   00022D   FC           MOV     R4,A
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   3400         ADDC    A,#0x0
   \   000232   8C82         MOV     DPL,R4
   \   000234   F583         MOV     DPH,A
   \   000236   A3           INC     DPTR
   \   000237   E0           MOVX    A,@DPTR
   \   000238   FC           MOV     R4,A
    688                    uint16 *pList = list + idx;
   \   000239   C3           CLR     C
   \   00023A   33           RLC     A
   \   00023B   F8           MOV     R0,A
   \   00023C   E4           CLR     A
   \   00023D   33           RLC     A
   \   00023E   F9           MOV     R1,A
   \   00023F   EA           MOV     A,R2
   \   000240   28           ADD     A,R0
   \   000241   F8           MOV     R0,A
   \   000242   EB           MOV     A,R3
   \   000243   39           ADDC    A,R1
   \   000244   F9           MOV     R1,A
    689          
    690                    // NumAssocDev field is only present on success.
    691                    if ( cnt > idx )
   \   000245   85..82       MOV     DPL,?XSP + 0
   \   000248   85..83       MOV     DPH,?XSP + 1
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   FD           MOV     R5,A
   \   00024D   EC           MOV     A,R4
   \   00024E   C3           CLR     C
   \   00024F   9D           SUBB    A,R5
   \   000250   500C         JNC     ??zdpProcessAddrReq_24
    692                    {
    693                      cnt -= idx;
   \   000252   E0           MOVX    A,@DPTR
   \   000253   C3           CLR     C
   \   000254   9C           SUBB    A,R4
   \   000255   F0           MOVX    @DPTR,A
    694                      len += (cnt * sizeof( uint16 ));
   \   000256   C3           CLR     C
   \   000257   33           RLC     A
   \   000258   240B         ADD     A,#0xb
   \   00025A   F5..         MOV     ?V0 + 5,A
   \   00025C   8002         SJMP    ??zdpProcessAddrReq_25
    695                    }
    696                    else
    697                    {
    698                      cnt = 0;
   \                     ??zdpProcessAddrReq_24:
   \   00025E   E4           CLR     A
   \   00025F   F0           MOVX    @DPTR,A
    699                    }
    700                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_25:
   \   000260   E0           MOVX    A,@DPTR
   \   000261   8E82         MOV     DPL,R6
   \   000263   8F83         MOV     DPH,R7
   \   000265   F0           MOVX    @DPTR,A
   \   000266   A3           INC     DPTR
    701                    len++;
    702          
    703                    // StartIndex field is only present if NumAssocDev field is non-zero.
    704                    *pBuf++ = idx;
   \   000267   EC           MOV     A,R4
   \   000268   F0           MOVX    @DPTR,A
   \   000269   A3           INC     DPTR
   \   00026A   0E           INC     R6
   \   00026B   0E           INC     R6
   \   00026C   AF83         MOV     R7,DPH
    705                    len++;
   \   00026E   05..         INC     ?V0 + 5
   \   000270   05..         INC     ?V0 + 5
    706          
    707                    while ( cnt != 0 )
   \   000272   85..82       MOV     DPL,?XSP + 0
   \   000275   85..83       MOV     DPH,?XSP + 1
   \   000278   E0           MOVX    A,@DPTR
   \   000279   6032         JZ      ??zdpProcessAddrReq_26
    708                    {
    709                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_27:
   \   00027B   8882         MOV     DPL,R0
   \   00027D   8983         MOV     DPH,R1
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   8E82         MOV     DPL,R6
   \   000282   8F83         MOV     DPH,R7
   \   000284   F0           MOVX    @DPTR,A
   \   000285   A3           INC     DPTR
   \   000286   AE82         MOV     R6,DPL
   \   000288   AF83         MOV     R7,DPH
    710                      *pBuf++ = HI_UINT16( *pList );
   \   00028A   8882         MOV     DPL,R0
   \   00028C   8983         MOV     DPH,R1
   \   00028E   A3           INC     DPTR
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   8E82         MOV     DPL,R6
   \   000292   8F83         MOV     DPH,R7
   \   000294   F0           MOVX    @DPTR,A
   \   000295   A3           INC     DPTR
   \   000296   0E           INC     R6
   \   000297   AF83         MOV     R7,DPH
    711                      pList++;
   \   000299   E8           MOV     A,R0
   \   00029A   2402         ADD     A,#0x2
   \   00029C   08           INC     R0
   \   00029D   08           INC     R0
   \   00029E   E9           MOV     A,R1
   \   00029F   3400         ADDC    A,#0x0
   \   0002A1   F9           MOV     R1,A
    712                      cnt--;
   \   0002A2   85..82       MOV     DPL,?XSP + 0
   \   0002A5   85..83       MOV     DPH,?XSP + 1
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   14           DEC     A
   \   0002AA   F0           MOVX    @DPTR,A
   \   0002AB   70CE         JNZ     ??zdpProcessAddrReq_27
    713                    }
    714          
    715                    osal_mem_free( (uint8 *)list );
   \                     ??zdpProcessAddrReq_26:
   \   0002AD                ; Setup parameters for call to function osal_mem_free
   \   0002AD   12....       LCALL   ??osal_mem_free?relay
   \   0002B0   8009         SJMP    ??zdpProcessAddrReq_19
    716                  }
    717                  else
    718                  {
    719                    // NumAssocDev field is only present on success.
    720                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_21:
   \   0002B2   8E82         MOV     DPL,R6
   \   0002B4   8F83         MOV     DPH,R7
   \   0002B6   E4           CLR     A
   \   0002B7   F0           MOVX    @DPTR,A
    721                    len++;
   \   0002B8   75..0C       MOV     ?V0 + 5,#0xc
    722                  }
    723                }
    724              }
    725          
    726              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_19:
   \   0002BB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002BE   7410         MOV     A,#0x10
   \   0002C0   F0           MOVX    @DPTR,A
    727              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0002C1   85..82       MOV     DPL,?V0 + 10
   \   0002C4   85..83       MOV     DPH,?V0 + 11
   \   0002C7   E0           MOVX    A,@DPTR
   \   0002C8   F5..         MOV     ?V0 + 0,A
   \   0002CA   A3           INC     DPTR
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   4480         ORL     A,#0x80
   \   0002CE   F5..         MOV     ?V0 + 1,A
   \   0002D0   E5..         MOV     A,?V0 + 8
   \   0002D2   2402         ADD     A,#0x2
   \   0002D4   FE           MOV     R6,A
   \   0002D5   E5..         MOV     A,?V0 + 9
   \   0002D7   3400         ADDC    A,#0x0
   \   0002D9   FF           MOV     R7,A
   \   0002DA   E5..         MOV     A,?V0 + 8
   \   0002DC   240F         ADD     A,#0xf
   \   0002DE   F5..         MOV     ?V0 + 2,A
   \   0002E0   E5..         MOV     A,?V0 + 9
   \   0002E2   3400         ADDC    A,#0x0
   \   0002E4   F5..         MOV     ?V0 + 3,A
   \   0002E6                ; Setup parameters for call to function osal_memset
   \   0002E6   7C0C         MOV     R4,#0xc
   \   0002E8   7D00         MOV     R5,#0x0
   \   0002EA   7900         MOV     R1,#0x0
   \   0002EC   7401         MOV     A,#0x1
   \   0002EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F1   AA82         MOV     R2,DPL
   \   0002F3   AB83         MOV     R3,DPH
   \   0002F5   12....       LCALL   ??osal_memset?relay
   \   0002F8   740A         MOV     A,#0xa
   \   0002FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FD   E4           CLR     A
   \   0002FE   F0           MOVX    @DPTR,A
   \   0002FF   8E82         MOV     DPL,R6
   \   000301   8F83         MOV     DPH,R7
   \   000303   A3           INC     DPTR
   \   000304   A3           INC     DPTR
   \   000305   A3           INC     DPTR
   \   000306   A3           INC     DPTR
   \   000307   A3           INC     DPTR
   \   000308   A3           INC     DPTR
   \   000309   A3           INC     DPTR
   \   00030A   A3           INC     DPTR
   \   00030B   E0           MOVX    A,@DPTR
   \   00030C   C0E0         PUSH    A
   \   00030E   7409         MOV     A,#0x9
   \   000310   12....       LCALL   ?XSTACK_DISP0_8
   \   000313   D0E0         POP     A
   \   000315   F0           MOVX    @DPTR,A
   \   000316   8E82         MOV     DPL,R6
   \   000318   8F83         MOV     DPH,R7
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   F8           MOV     R0,A
   \   00031C   A3           INC     DPTR
   \   00031D   E0           MOVX    A,@DPTR
   \   00031E   F9           MOV     R1,A
   \   00031F   7401         MOV     A,#0x1
   \   000321   12....       LCALL   ?XSTACK_DISP0_8
   \   000324   E8           MOV     A,R0
   \   000325   F0           MOVX    @DPTR,A
   \   000326   A3           INC     DPTR
   \   000327   E9           MOV     A,R1
   \   000328   F0           MOVX    @DPTR,A
   \   000329   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00032C   E0           MOVX    A,@DPTR
   \   00032D   24FF         ADD     A,#-0x1
   \   00032F   F5..         MOV     ?V0 + 6,A
   \   000331   A3           INC     DPTR
   \   000332   E0           MOVX    A,@DPTR
   \   000333   34FF         ADDC    A,#-0x1
   \   000335   F5..         MOV     ?V0 + 7,A
   \   000337   85..82       MOV     DPL,?V0 + 2
   \   00033A   85..83       MOV     DPH,?V0 + 3
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   85..82       MOV     DPL,?V0 + 6
   \   000341   85..83       MOV     DPH,?V0 + 7
   \   000344   F0           MOVX    @DPTR,A
   \   000345                ; Setup parameters for call to function AF_DataRequest
   \   000345   75..1E       MOV     ?V0 + 4,#0x1e
   \   000348   78..         MOV     R0,#?V0 + 4
   \   00034A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00034D   78..         MOV     R0,#?V0 + 2
   \   00034F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000352   78..         MOV     R0,#?V0 + 6
   \   000354   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000357   85....       MOV     ?V0 + 2,?V0 + 5
   \   00035A   E5..         MOV     A,?V0 + 2
   \   00035C   2401         ADD     A,#0x1
   \   00035E   F5..         MOV     ?V0 + 2,A
   \   000360   E4           CLR     A
   \   000361   3400         ADDC    A,#0x0
   \   000363   F5..         MOV     ?V0 + 3,A
   \   000365   78..         MOV     R0,#?V0 + 2
   \   000367   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00036A   78..         MOV     R0,#?V0 + 0
   \   00036C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00036F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000372   E0           MOVX    A,@DPTR
   \   000373   F9           MOV     R1,A
   \   000374   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000376   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000378   740A         MOV     A,#0xa
   \   00037A   12....       LCALL   ?XSTACK_DISP0_8
   \   00037D   AA82         MOV     R2,DPL
   \   00037F   AB83         MOV     R3,DPH
   \   000381   12....       LCALL   ??AF_DataRequest?relay
   \   000384   7409         MOV     A,#0x9
   \   000386   12....       LCALL   ?DEALLOC_XSTACK8
    728              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000389   90....       MOV     DPTR,#ZDP_TxOptions
   \   00038C   E4           CLR     A
   \   00038D   F0           MOVX    @DPTR,A
    729            }
    730          }
   \                     ??zdpProcessAddrReq_12:
   \   00038E   741A         MOV     A,#0x1a
   \   000390                REQUIRE ?Subroutine4
   \   000390                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    731          
    732          /*********************************************************************
    733           * @fn          ZDP_NodeDescMsg
    734           *
    735           * @brief       Builds and sends a Node Descriptor message, unicast to the
    736           *              specified device.
    737           *
    738           * @param       inMsg - incoming message
    739           * @param       nwkAddr - 16 bit network address for device
    740           * @param       pNodeDesc - pointer to the node descriptor
    741           *
    742           * @return      afStatus_t
    743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    744          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    745                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    746          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7419         MOV     A,#0x19
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FF           MOV     R7,A
    747            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
    748            byte len;
    749          
    750            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    751          
    752            *pBuf++ = ZDP_SUCCESS;
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
    753          
    754            *pBuf++ = LO_UINT16( nwkAddr );
   \   000023   EC           MOV     A,R4
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    755            *pBuf++ = HI_UINT16( nwkAddr );
   \   000026   ED           MOV     A,R5
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   A882         MOV     R0,DPL
   \   00002B   A983         MOV     R1,DPH
    756          
    757            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    758                               (pNodeDesc->UserDescAvail << 4) |
    759                               (pNodeDesc->LogicalType & 0x07));
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   E0           MOVX    A,@DPTR
   \   000032   541F         ANL     A,#0x1f
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   08           INC     R0
   \   00003B   A983         MOV     R1,DPH
    760          
    761            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   08           INC     R0
   \   00004A   A983         MOV     R1,DPH
    762            *pBuf++ = pNodeDesc->CapabilityFlags;
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   8882         MOV     DPL,R0
   \   000055   8983         MOV     DPH,R1
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   08           INC     R0
   \   00005A   A983         MOV     R1,DPH
    763            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   08           INC     R0
   \   00006B   A983         MOV     R1,DPH
    764            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   8882         MOV     DPL,R0
   \   000078   8983         MOV     DPH,R1
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   08           INC     R0
   \   00007D   A983         MOV     R1,DPH
    765            *pBuf++ = pNodeDesc->MaxBufferSize;
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   8882         MOV     DPL,R0
   \   00008B   8983         MOV     DPH,R1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   08           INC     R0
   \   000090   A983         MOV     R1,DPH
    766            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   8882         MOV     DPL,R0
   \   00009F   8983         MOV     DPH,R1
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   08           INC     R0
   \   0000A4   A983         MOV     R1,DPH
    767            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   8882         MOV     DPL,R0
   \   0000B4   8983         MOV     DPH,R1
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   08           INC     R0
   \   0000B9   A983         MOV     R1,DPH
    768          
    769            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2408         ADD     A,#0x8
   \   0000BE   FC           MOV     R4,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   3400         ADDC    A,#0x0
   \   0000C2   FD           MOV     R5,A
   \   0000C3   8C82         MOV     DPL,R4
   \   0000C5   8D83         MOV     DPH,R5
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   8882         MOV     DPL,R0
   \   0000CA   8983         MOV     DPH,R1
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   08           INC     R0
   \   0000CF   A983         MOV     R1,DPH
    770            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   0000D1   8C82         MOV     DPL,R4
   \   0000D3   8D83         MOV     DPH,R5
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   8882         MOV     DPL,R0
   \   0000D9   8983         MOV     DPH,R1
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   08           INC     R0
   \   0000DE   A983         MOV     R1,DPH
    771            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   8882         MOV     DPL,R0
   \   0000F1   8983         MOV     DPH,R1
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   08           INC     R0
   \   0000F6   A983         MOV     R1,DPH
    772            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   0000F8   EE           MOV     A,R6
   \   0000F9   240B         ADD     A,#0xb
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   3400         ADDC    A,#0x0
   \   000100   F583         MOV     DPH,A
   \   000102   E0           MOVX    A,@DPTR
   \   000103   8882         MOV     DPL,R0
   \   000105   8983         MOV     DPH,R1
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   08           INC     R0
   \   00010A   A983         MOV     R1,DPH
    773            *pBuf = pNodeDesc->DescriptorCapability;
   \   00010C   EE           MOV     A,R6
   \   00010D   240C         ADD     A,#0xc
   \   00010F   F582         MOV     DPL,A
   \   000111   EF           MOV     A,R7
   \   000112   3400         ADDC    A,#0x0
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   8882         MOV     DPL,R0
   \   000119   8983         MOV     DPH,R1
   \   00011B   F0           MOVX    @DPTR,A
    774          
    775            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   00011C   EA           MOV     A,R2
   \   00011D   2402         ADD     A,#0x2
   \   00011F   F8           MOV     R0,A
   \   000120   EB           MOV     A,R3
   \   000121   3400         ADDC    A,#0x0
   \   000123   F9           MOV     R1,A
   \   000124   E8           MOV     A,R0
   \   000125   FE           MOV     R6,A
   \   000126   E9           MOV     A,R1
   \   000127   FF           MOV     R7,A
   \   000128   EA           MOV     A,R2
   \   000129   240F         ADD     A,#0xf
   \   00012B   F5..         MOV     ?V0 + 0,A
   \   00012D   EB           MOV     A,R3
   \   00012E   3400         ADDC    A,#0x0
   \   000130   F5..         MOV     ?V0 + 1,A
   \   000132                ; Setup parameters for call to function osal_memset
   \   000132   7C0C         MOV     R4,#0xc
   \   000134   7D00         MOV     R5,#0x0
   \   000136   7900         MOV     R1,#0x0
   \   000138   85..82       MOV     DPL,?XSP + 0
   \   00013B   85..83       MOV     DPH,?XSP + 1
   \   00013E   AA82         MOV     R2,DPL
   \   000140   AB83         MOV     R3,DPH
   \   000142   12....       LCALL   ??osal_memset?relay
   \   000145   7409         MOV     A,#0x9
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E4           CLR     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   C0E0         PUSH    A
   \   00015B   7408         MOV     A,#0x8
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   D0E0         POP     A
   \   000162   F0           MOVX    @DPTR,A
   \   000163   8E82         MOV     DPL,R6
   \   000165   8F83         MOV     DPH,R7
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F8           MOV     R0,A
   \   000169   A3           INC     DPTR
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F9           MOV     R1,A
   \   00016C   85..82       MOV     DPL,?XSP + 0
   \   00016F   85..83       MOV     DPH,?XSP + 1
   \   000172   E8           MOV     A,R0
   \   000173   F0           MOVX    @DPTR,A
   \   000174   A3           INC     DPTR
   \   000175   E9           MOV     A,R1
   \   000176   F0           MOVX    @DPTR,A
   \   000177   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   24FF         ADD     A,#-0x1
   \   00017D   F5..         MOV     ?V0 + 2,A
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   34FF         ADDC    A,#-0x1
   \   000183   F5..         MOV     ?V0 + 3,A
   \   000185   85..82       MOV     DPL,?V0 + 0
   \   000188   85..83       MOV     DPH,?V0 + 1
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   85..82       MOV     DPL,?V0 + 2
   \   00018F   85..83       MOV     DPH,?V0 + 3
   \   000192   F0           MOVX    @DPTR,A
   \   000193                ; Setup parameters for call to function AF_DataRequest
   \   000193   75..1E       MOV     ?V0 + 4,#0x1e
   \   000196   78..         MOV     R0,#?V0 + 4
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019B   78..         MOV     R0,#?V0 + 0
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   78..         MOV     R0,#?V0 + 2
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   75..11       MOV     ?V0 + 0,#0x11
   \   0001A8   75..00       MOV     ?V0 + 1,#0x0
   \   0001AB   78..         MOV     R0,#?V0 + 0
   \   0001AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B0   75..02       MOV     ?V0 + 0,#0x2
   \   0001B3                REQUIRE ?Subroutine5
   \   0001B3                ; // Fall through to label ?Subroutine5
    776          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   75..80       MOV     ?V0 + 1,#-0x80
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   90....       MOV     DPTR,#ZDP_TxOptions
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   00000F   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000011   7409         MOV     A,#0x9
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??AF_DataRequest?relay
   \   00001D   7409         MOV     A,#0x9
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   740C         MOV     A,#0xc
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
   \   000027   7F05         MOV     R7,#0x5
   \   000029   02....       LJMP    ?BANKED_LEAVE_XDATA
    777          
    778          /*********************************************************************
    779           * @fn          ZDP_PowerDescMsg
    780           *
    781           * @brief       Builds and sends a Power Descriptor message, unicast to the
    782           *              specified device.
    783           *
    784           * @param       inMsg - incoming message (request)
    785           * @param       nwkAddr - 16 bit network address for device
    786           * @param       pPowerDesc - pointer to the node descriptor
    787           *
    788           * @return      afStatus_t
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    791                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    792          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   7419         MOV     A,#0x19
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
    793            uint8 *pBuf = ZDP_TmpBuf;
   \   000018   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
    794            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    795          
    796            *pBuf++ = ZDP_SUCCESS;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
    797          
    798            *pBuf++ = LO_UINT16( nwkAddr );
   \   000027   EC           MOV     A,R4
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
    799            *pBuf++ = HI_UINT16( nwkAddr );
   \   00002A   ED           MOV     A,R5
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
    800          
    801            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    802                              | (pPowerDesc->PowerMode & 0x0F));
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   0A           INC     R2
   \   00003D   AB83         MOV     R3,DPH
    803            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    804                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V0 + 0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 1,A
   \   00004A   540F         ANL     A,#0xf
   \   00004C   F9           MOV     R1,A
   \   00004D   740C         MOV     A,#0xc
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?US_SHR
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   C4           SWAP    A
   \   000057   49           ORL     A,R1
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   F0           MOVX    @DPTR,A
    805          
    806            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   00005D   EE           MOV     A,R6
   \   00005E   2402         ADD     A,#0x2
   \   000060   F8           MOV     R0,A
   \   000061   EF           MOV     A,R7
   \   000062   3400         ADDC    A,#0x0
   \   000064   F9           MOV     R1,A
   \   000065   88..         MOV     ?V0 + 0,R0
   \   000067   89..         MOV     ?V0 + 1,R1
   \   000069   EE           MOV     A,R6
   \   00006A   240F         ADD     A,#0xf
   \   00006C   F5..         MOV     ?V0 + 2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F5..         MOV     ?V0 + 3,A
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C0C         MOV     R4,#0xc
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   85..82       MOV     DPL,?XSP + 0
   \   00007C   85..83       MOV     DPH,?XSP + 1
   \   00007F   AA82         MOV     R2,DPL
   \   000081   AB83         MOV     R3,DPH
   \   000083   12....       LCALL   ??osal_memset?relay
   \   000086   7409         MOV     A,#0x9
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   85..82       MOV     DPL,?V0 + 0
   \   000090   85..83       MOV     DPH,?V0 + 1
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   7408         MOV     A,#0x8
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP     A
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   85..82       MOV     DPL,?V0 + 0
   \   0000A9   85..83       MOV     DPH,?V0 + 1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F8           MOV     R0,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   E8           MOV     A,R0
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E9           MOV     A,R1
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   24FF         ADD     A,#-0x1
   \   0000C2   F5..         MOV     ?V0 + 0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   34FF         ADDC    A,#-0x1
   \   0000C8   F5..         MOV     ?V0 + 1,A
   \   0000CA   85..82       MOV     DPL,?V0 + 2
   \   0000CD   85..83       MOV     DPH,?V0 + 3
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   85..82       MOV     DPL,?V0 + 0
   \   0000D4   85..83       MOV     DPH,?V0 + 1
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8                ; Setup parameters for call to function AF_DataRequest
   \   0000D8   75..1E       MOV     ?V0 + 4,#0x1e
   \   0000DB   78..         MOV     R0,#?V0 + 4
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E0   78..         MOV     R0,#?V0 + 2
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   75..06       MOV     ?V0 + 0,#0x6
   \   0000ED   75..00       MOV     ?V0 + 1,#0x0
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   75..03       MOV     ?V0 + 0,#0x3
   \   0000F8   02....       LJMP    ?Subroutine5 & 0xFFFF
    807          }
    808          
    809          /*********************************************************************
    810           * @fn          ZDP_SimpleDescMsg
    811           *
    812           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    813           *              specified device.
    814           *
    815           * @param       inMsg - incoming message (request)
    816           * @param       Status - message status (ZDP_SUCCESS or other)
    817           * @param       pSimpleDesc - pointer to the node descriptor
    818           *
    819           * @return      afStatus_t
    820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    822                                        SimpleDescriptionFormat_t *pSimpleDesc )
    823          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    824            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
    825            uint8 i, len;
    826          
    827            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000014   EF           MOV     A,R7
   \   000015   7036         JNZ     ??ZDP_SimpleDescMsg_0
   \   000017   EC           MOV     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   6032         JZ      ??ZDP_SimpleDescMsg_0
    828            {
    829              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    830              len = 1 + 2 + 1 + 8;
    831              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   C082         PUSH    DPL
   \   00002A   C083         PUSH    DPH
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   D083         POP     DPH
   \   000039   D082         POP     DPL
   \   00003B   FE           MOV     R6,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   2E           ADD     A,R6
   \   00003E   C3           CLR     C
   \   00003F   33           RLC     A
   \   000040   240C         ADD     A,#0xc
   \   000042   FE           MOV     R6,A
    832            }
    833            else
    834            {
    835              len = 1 + 2 + 1; // Status + desc length
    836            }
    837            if ( len >= ZDP_BUF_SZ-1 )
   \   000043   C3           CLR     C
   \   000044   944F         SUBB    A,#0x4f
   \   000046   4007         JC      ??ZDP_SimpleDescMsg_1
    838            {
    839              return afStatus_MEM_FAIL;
   \   000048   7910         MOV     R1,#0x10
   \   00004A   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    840            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00004D   7E04         MOV     R6,#0x4
    841          
    842            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00004F   EF           MOV     A,R7
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   A882         MOV     R0,DPL
   \   000058   A983         MOV     R1,DPH
    843          
    844            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00005A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   8882         MOV     DPL,R0
   \   000060   8983         MOV     DPH,R1
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   08           INC     R0
   \   000065   A983         MOV     R1,DPH
    845            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000067   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
    846          
    847            if ( len > 4 )
   \   000071   EE           MOV     A,R6
   \   000072   C3           CLR     C
   \   000073   9405         SUBB    A,#0x5
   \   000075   5003         JNC     $+5
   \   000077   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    848            {
    849              *pBuf++ = len - 4;   // Simple descriptor length
   \   00007A   74FC         MOV     A,#-0x4
   \   00007C   2E           ADD     A,R6
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   08           INC     R0
   \   000080   08           INC     R0
   \   000081   A983         MOV     R1,DPH
    850          
    851              *pBuf++ = pSimpleDesc->EndPoint;
   \   000083   8C82         MOV     DPL,R4
   \   000085   8D83         MOV     DPH,R5
   \   000087   E0           MOVX    A,@DPTR
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   08           INC     R0
   \   00008F   A983         MOV     R1,DPH
    852              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   000091   8C82         MOV     DPL,R4
   \   000093   8D83         MOV     DPH,R5
   \   000095   A3           INC     DPTR
   \   000096   8582..       MOV     ?V0 + 0,DPL
   \   000099   8583..       MOV     ?V0 + 1,DPH
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   8882         MOV     DPL,R0
   \   00009F   8983         MOV     DPH,R1
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   08           INC     R0
   \   0000A4   A983         MOV     R1,DPH
    853              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   0000A6   85..82       MOV     DPL,?V0 + 0
   \   0000A9   85..83       MOV     DPH,?V0 + 1
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   8882         MOV     DPL,R0
   \   0000B0   8983         MOV     DPH,R1
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   08           INC     R0
   \   0000B5   A983         MOV     R1,DPH
    854              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   0000B7   EC           MOV     A,R4
   \   0000B8   2403         ADD     A,#0x3
   \   0000BA   F5..         MOV     ?V0 + 0,A
   \   0000BC   ED           MOV     A,R5
   \   0000BD   3400         ADDC    A,#0x0
   \   0000BF   F5..         MOV     ?V0 + 1,A
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   8882         MOV     DPL,R0
   \   0000C9   8983         MOV     DPH,R1
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   08           INC     R0
   \   0000CE   A983         MOV     R1,DPH
    855              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \   0000D0   85..82       MOV     DPL,?V0 + 0
   \   0000D3   85..83       MOV     DPH,?V0 + 1
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   8882         MOV     DPL,R0
   \   0000DA   8983         MOV     DPH,R1
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   08           INC     R0
   \   0000DF   A983         MOV     R1,DPH
    856          
    857              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \   0000E1   8C82         MOV     DPL,R4
   \   0000E3   8D83         MOV     DPH,R5
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C4           SWAP    A
   \   0000EC   54F0         ANL     A,#0xf0
   \   0000EE   8882         MOV     DPL,R0
   \   0000F0   8983         MOV     DPH,R1
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   08           INC     R0
   \   0000F5   A983         MOV     R1,DPH
    858          
    859              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000F7   EC           MOV     A,R4
   \   0000F8   2406         ADD     A,#0x6
   \   0000FA   F5..         MOV     ?V0 + 0,A
   \   0000FC   ED           MOV     A,R5
   \   0000FD   3400         ADDC    A,#0x0
   \   0000FF   85....       MOV     ?V0 + 2,?V0 + 0
   \   000102   F5..         MOV     ?V0 + 3,A
   \   000104   85..82       MOV     DPL,?V0 + 2
   \   000107   F583         MOV     DPH,A
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   8882         MOV     DPL,R0
   \   00010C   8983         MOV     DPH,R1
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   08           INC     R0
   \   000111   A983         MOV     R1,DPH
    860              if ( pSimpleDesc->AppNumInClusters )
   \   000113   85..82       MOV     DPL,?V0 + 2
   \   000116   85..83       MOV     DPH,?V0 + 3
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   606A         JZ      ??ZDP_SimpleDescMsg_4
    861              {
    862                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   00011C   75..00       MOV     ?V0 + 6,#0x0
   \   00011F   EC           MOV     A,R4
   \   000120   2407         ADD     A,#0x7
   \   000122   F5..         MOV     ?V0 + 0,A
   \   000124   ED           MOV     A,R5
   \   000125   3400         ADDC    A,#0x0
   \   000127   85....       MOV     ?V0 + 4,?V0 + 0
   \   00012A   F5..         MOV     ?V0 + 5,A
    863                {
    864                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_5:
   \   00012C   E5..         MOV     A,?V0 + 6
   \   00012E   C3           CLR     C
   \   00012F   33           RLC     A
   \   000130   F5..         MOV     ?V0 + 0,A
   \   000132   E4           CLR     A
   \   000133   33           RLC     A
   \   000134   F5..         MOV     ?V0 + 1,A
   \   000136   85..82       MOV     DPL,?V0 + 4
   \   000139   85..83       MOV     DPH,?V0 + 5
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   25..         ADD     A,?V0 + 0
   \   00013F   F5..         MOV     ?V0 + 7,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   35..         ADDC    A,?V0 + 1
   \   000145   85..82       MOV     DPL,?V0 + 7
   \   000148   F583         MOV     DPH,A
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   8882         MOV     DPL,R0
   \   00014D   8983         MOV     DPH,R1
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   A3           INC     DPTR
   \   000151   A882         MOV     R0,DPL
   \   000153   A983         MOV     R1,DPH
    865                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   000155   85..82       MOV     DPL,?V0 + 4
   \   000158   85..83       MOV     DPH,?V0 + 5
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   25..         ADD     A,?V0 + 0
   \   00015E   F5..         MOV     ?V0 + 7,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   35..         ADDC    A,?V0 + 1
   \   000164   85..82       MOV     DPL,?V0 + 7
   \   000167   F583         MOV     DPH,A
   \   000169   A3           INC     DPTR
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   8882         MOV     DPL,R0
   \   00016D   8983         MOV     DPH,R1
   \   00016F   F0           MOVX    @DPTR,A
   \   000170   A3           INC     DPTR
   \   000171   08           INC     R0
   \   000172   A983         MOV     R1,DPH
    866                }
   \   000174   05..         INC     ?V0 + 6
   \   000176   85..82       MOV     DPL,?V0 + 2
   \   000179   85..83       MOV     DPH,?V0 + 3
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   F5..         MOV     ?V0 + 0,A
   \   00017F   E5..         MOV     A,?V0 + 6
   \   000181   C3           CLR     C
   \   000182   95..         SUBB    A,?V0 + 0
   \   000184   40A6         JC      ??ZDP_SimpleDescMsg_5
    867              }
    868          
    869              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   000186   EC           MOV     A,R4
   \   000187   2409         ADD     A,#0x9
   \   000189   F5..         MOV     ?V0 + 0,A
   \   00018B   ED           MOV     A,R5
   \   00018C   3400         ADDC    A,#0x0
   \   00018E   F5..         MOV     ?V0 + 1,A
   \   000190   85..82       MOV     DPL,?V0 + 0
   \   000193   F583         MOV     DPH,A
   \   000195   E0           MOVX    A,@DPTR
   \   000196   8882         MOV     DPL,R0
   \   000198   8983         MOV     DPH,R1
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   A3           INC     DPTR
   \   00019C   A882         MOV     R0,DPL
   \   00019E   A983         MOV     R1,DPH
    870              if ( pSimpleDesc->AppNumOutClusters )
   \   0001A0   85..82       MOV     DPL,?V0 + 0
   \   0001A3   85..83       MOV     DPH,?V0 + 1
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   6065         JZ      ??ZDP_SimpleDescMsg_6
    871              {
    872                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0001A9   75..00       MOV     ?V0 + 6,#0x0
   \   0001AC   EC           MOV     A,R4
   \   0001AD   240A         ADD     A,#0xa
   \   0001AF   FC           MOV     R4,A
   \   0001B0   ED           MOV     A,R5
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   FD           MOV     R5,A
   \   0001B4   8C..         MOV     ?V0 + 2,R4
   \   0001B6   8D..         MOV     ?V0 + 3,R5
    873                {
    874                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0001B8   E5..         MOV     A,?V0 + 6
   \   0001BA   C3           CLR     C
   \   0001BB   33           RLC     A
   \   0001BC   FC           MOV     R4,A
   \   0001BD   E4           CLR     A
   \   0001BE   33           RLC     A
   \   0001BF   FD           MOV     R5,A
   \   0001C0   85..82       MOV     DPL,?V0 + 2
   \   0001C3   85..83       MOV     DPH,?V0 + 3
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   2C           ADD     A,R4
   \   0001C8   F5..         MOV     ?V0 + 4,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   3D           ADDC    A,R5
   \   0001CD   85..82       MOV     DPL,?V0 + 4
   \   0001D0   F583         MOV     DPH,A
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   8882         MOV     DPL,R0
   \   0001D5   8983         MOV     DPH,R1
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A3           INC     DPTR
   \   0001D9   A882         MOV     R0,DPL
   \   0001DB   A983         MOV     R1,DPH
    875                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0001DD   85..82       MOV     DPL,?V0 + 2
   \   0001E0   85..83       MOV     DPH,?V0 + 3
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   2C           ADD     A,R4
   \   0001E5   F5..         MOV     ?V0 + 4,A
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   3D           ADDC    A,R5
   \   0001EA   85..82       MOV     DPL,?V0 + 4
   \   0001ED   F583         MOV     DPH,A
   \   0001EF   A3           INC     DPTR
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   8882         MOV     DPL,R0
   \   0001F3   8983         MOV     DPH,R1
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   08           INC     R0
   \   0001F8   A983         MOV     R1,DPH
    876                }
   \   0001FA   05..         INC     ?V0 + 6
   \   0001FC   85..82       MOV     DPL,?V0 + 0
   \   0001FF   85..83       MOV     DPH,?V0 + 1
   \   000202   E0           MOVX    A,@DPTR
   \   000203   FC           MOV     R4,A
   \   000204   E5..         MOV     A,?V0 + 6
   \   000206   C3           CLR     C
   \   000207   9C           SUBB    A,R4
   \   000208   5004         JNC     ??ZDP_SimpleDescMsg_6
   \   00020A   80AC         SJMP    ??ZDP_SimpleDescMsg_7
    877              }
    878            }
    879          
    880            else
    881            {
    882              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   00020C   E4           CLR     A
   \   00020D   F0           MOVX    @DPTR,A
    883            }
    884          
    885            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_6:
   \   00020E   EA           MOV     A,R2
   \   00020F   2402         ADD     A,#0x2
   \   000211   F5..         MOV     ?V0 + 0,A
   \   000213   EB           MOV     A,R3
   \   000214   3400         ADDC    A,#0x0
   \   000216   F5..         MOV     ?V0 + 1,A
   \   000218   EA           MOV     A,R2
   \   000219   240F         ADD     A,#0xf
   \   00021B   F5..         MOV     ?V0 + 2,A
   \   00021D   EB           MOV     A,R3
   \   00021E   3400         ADDC    A,#0x0
   \   000220   F5..         MOV     ?V0 + 3,A
   \   000222                ; Setup parameters for call to function osal_memset
   \   000222   7C0C         MOV     R4,#0xc
   \   000224   7D00         MOV     R5,#0x0
   \   000226   7900         MOV     R1,#0x0
   \   000228   85..82       MOV     DPL,?XSP + 0
   \   00022B   85..83       MOV     DPH,?XSP + 1
   \   00022E   AA82         MOV     R2,DPL
   \   000230   AB83         MOV     R3,DPH
   \   000232   12....       LCALL   ??osal_memset?relay
   \   000235   7409         MOV     A,#0x9
   \   000237   12....       LCALL   ?XSTACK_DISP0_8
   \   00023A   E4           CLR     A
   \   00023B   F0           MOVX    @DPTR,A
   \   00023C   85..82       MOV     DPL,?V0 + 0
   \   00023F   85..83       MOV     DPH,?V0 + 1
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   C0E0         PUSH    A
   \   00024D   7408         MOV     A,#0x8
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   D0E0         POP     A
   \   000254   F0           MOVX    @DPTR,A
   \   000255   85..82       MOV     DPL,?V0 + 0
   \   000258   85..83       MOV     DPH,?V0 + 1
   \   00025B   E0           MOVX    A,@DPTR
   \   00025C   F8           MOV     R0,A
   \   00025D   A3           INC     DPTR
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   F9           MOV     R1,A
   \   000260   85..82       MOV     DPL,?XSP + 0
   \   000263   85..83       MOV     DPH,?XSP + 1
   \   000266   E8           MOV     A,R0
   \   000267   F0           MOVX    @DPTR,A
   \   000268   A3           INC     DPTR
   \   000269   E9           MOV     A,R1
   \   00026A   F0           MOVX    @DPTR,A
   \   00026B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   24FF         ADD     A,#-0x1
   \   000271   F5..         MOV     ?V0 + 0,A
   \   000273   A3           INC     DPTR
   \   000274   E0           MOVX    A,@DPTR
   \   000275   34FF         ADDC    A,#-0x1
   \   000277   F5..         MOV     ?V0 + 1,A
   \   000279   85..82       MOV     DPL,?V0 + 2
   \   00027C   85..83       MOV     DPH,?V0 + 3
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   85..82       MOV     DPL,?V0 + 0
   \   000283   85..83       MOV     DPH,?V0 + 1
   \   000286   F0           MOVX    @DPTR,A
   \   000287                ; Setup parameters for call to function AF_DataRequest
   \   000287   75..1E       MOV     ?V0 + 4,#0x1e
   \   00028A   78..         MOV     R0,#?V0 + 4
   \   00028C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028F   78..         MOV     R0,#?V0 + 2
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000294   78..         MOV     R0,#?V0 + 0
   \   000296   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000299   8E..         MOV     ?V0 + 0,R6
   \   00029B   E5..         MOV     A,?V0 + 0
   \   00029D   2401         ADD     A,#0x1
   \   00029F   F5..         MOV     ?V0 + 0,A
   \   0002A1   E4           CLR     A
   \   0002A2   3400         ADDC    A,#0x0
   \   0002A4   F5..         MOV     ?V0 + 1,A
   \   0002A6   78..         MOV     R0,#?V0 + 0
   \   0002A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AB   75..04       MOV     ?V0 + 0,#0x4
   \   0002AE   75..80       MOV     ?V0 + 1,#-0x80
   \   0002B1   78..         MOV     R0,#?V0 + 0
   \   0002B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B6   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002B9   E0           MOVX    A,@DPTR
   \   0002BA   F9           MOV     R1,A
   \   0002BB   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0002BD   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0002BF   7409         MOV     A,#0x9
   \   0002C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C4   AA82         MOV     R2,DPL
   \   0002C6   AB83         MOV     R3,DPH
   \   0002C8   12....       LCALL   ??AF_DataRequest?relay
   \   0002CB   7409         MOV     A,#0x9
   \   0002CD   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   0002D0   80..         SJMP    ??Subroutine11_0
    886          }
    887          
    888          /*********************************************************************
    889           * @fn          ZDP_EPRsp
    890           *
    891           * @brief       This builds and send an endpoint list. Used in
    892           *              Active_EP_rsp and Match_Desc_Rsp
    893           *              message.  This function sends unicast message to the
    894           *              requesting device.
    895           *
    896           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    897           * @param       dstAddr - destination address
    898           * @param       Status - message status (ZDP_SUCCESS or other)
    899           * @param       nwkAddr - Device's short address that this response describes
    900           * @param       Count - number of endpoint/interfaces in list
    901           * @param       pEPIntfList - Array of Endpoint/Interfaces
    902           * @param       SecurityEnable - Security Options
    903           *
    904           * @return      afStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    907                                  byte Status, uint16 nwkAddr, byte Count,
    908                                  uint8 *pEPList,
    909                                  byte SecurityEnable )
    910          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 2,R4
   \   000018   8D..         MOV     ?V0 + 3,R5
   \   00001A   741F         MOV     A,#0x1f
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FC           MOV     R4,A
   \   000021   7420         MOV     A,#0x20
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   7422         MOV     A,#0x22
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 8,A
   \   000033   7423         MOV     A,#0x23
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 5,A
    911            uint8 *pBuf = ZDP_TmpBuf;
   \   00003F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FB           MOV     R3,A
    912            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000047   75..04       MOV     ?V0 + 0,#0x4
    913            byte txOptions;
    914          
    915            (void)SecurityEnable;  // Intentionally unreferenced parameter
    916          
    917            if ( MsgType == Match_Desc_rsp )
   \   00004A   7406         MOV     A,#0x6
   \   00004C   6E           XRL     A,R6
   \   00004D   7003         JNZ     ??ZDP_EPRsp_0
   \   00004F   7480         MOV     A,#-0x80
   \   000051   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000052   7005         JNZ     ??ZDP_EPRsp_1
    918              txOptions = AF_MSG_ACK_REQUEST;
   \   000054   75..10       MOV     ?V0 + 1,#0x10
   \   000057   8003         SJMP    ??ZDP_EPRsp_2
    919            else
    920              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000059   75..00       MOV     ?V0 + 1,#0x0
    921          
    922              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   00005C   EC           MOV     A,R4
   \   00005D   8A82         MOV     DPL,R2
   \   00005F   8B83         MOV     DPH,R3
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
    923            *pBuf++ = LO_UINT16( nwkAddr );
   \   000063   E8           MOV     A,R0
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
    924            *pBuf++ = HI_UINT16( nwkAddr );
   \   000066   E9           MOV     A,R1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
    925          
    926            *pBuf++ = Count;   // Endpoint/Interface count
   \   000069   E5..         MOV     A,?V0 + 8
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
    927          
    928            if ( Count )
   \   000071   601A         JZ      ??ZDP_EPRsp_3
    929            {
    930              len += Count;
   \   000073   7404         MOV     A,#0x4
   \   000075   25..         ADD     A,?V0 + 8
   \   000077   F5..         MOV     ?V0 + 0,A
    931              osal_memcpy( pBuf, pEPList, Count );
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   75..00       MOV     ?V0 + 6,#0x0
   \   00007C   78..         MOV     R0,#?V0 + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   AC..         MOV     R4,?V0 + 8
   \   000083   7D00         MOV     R5,#0x0
   \   000085   12....       LCALL   ??osal_memcpy?relay
   \   000088   7403         MOV     A,#0x3
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
    932            }
    933          
    934            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00008D   E5..         MOV     A,?V0 + 1
   \   00008F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000092   F0           MOVX    @DPTR,A
   \   000093                ; Setup parameters for call to function osal_memset
   \   000093   7C0C         MOV     R4,#0xc
   \   000095   7D00         MOV     R5,#0x0
   \   000097   7900         MOV     R1,#0x0
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   AA82         MOV     R2,DPL
   \   0000A0   AB83         MOV     R3,DPH
   \   0000A2   12....       LCALL   ??osal_memset?relay
   \   0000A5   740A         MOV     A,#0xa
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E4           CLR     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   85..82       MOV     DPL,?V0 + 2
   \   0000AF   85..83       MOV     DPH,?V0 + 3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C0E0         PUSH    A
   \   0000BD   7409         MOV     A,#0x9
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   85..82       MOV     DPL,?V0 + 2
   \   0000C8   85..83       MOV     DPH,?V0 + 3
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   7401         MOV     A,#0x1
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E8           MOV     A,R0
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E9           MOV     A,R1
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   24FF         ADD     A,#-0x1
   \   0000E0   F5..         MOV     ?V0 + 4,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   34FF         ADDC    A,#-0x1
   \   0000E6   F5..         MOV     ?V0 + 5,A
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   85..82       MOV     DPL,?V0 + 4
   \   0000F2   85..83       MOV     DPH,?V0 + 5
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6                ; Setup parameters for call to function AF_DataRequest
   \   0000F6   75..1E       MOV     ?V0 + 1,#0x1e
   \   0000F9   78..         MOV     R0,#?V0 + 1
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   7401         MOV     A,#0x1
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   8582..       MOV     ?V0 + 2,DPL
   \   000106   8583..       MOV     ?V0 + 3,DPH
   \   000109   78..         MOV     R0,#?V0 + 2
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   78..         MOV     R0,#?V0 + 4
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   E5..         MOV     A,?V0 + 0
   \   000115   2401         ADD     A,#0x1
   \   000117   F5..         MOV     ?V0 + 0,A
   \   000119   E4           CLR     A
   \   00011A   3400         ADDC    A,#0x0
   \   00011C   F5..         MOV     ?V0 + 1,A
   \   00011E   78..         MOV     R0,#?V0 + 0
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   8E..         MOV     ?V0 + 0,R6
   \   000125   8F..         MOV     ?V0 + 1,R7
   \   000127   78..         MOV     R0,#?V0 + 0
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F9           MOV     R1,A
   \   000131   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000133   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000135   740A         MOV     A,#0xa
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   AA82         MOV     R2,DPL
   \   00013C   AB83         MOV     R3,DPH
   \   00013E   12....       LCALL   ??AF_DataRequest?relay
   \   000141   7409         MOV     A,#0x9
   \   000143   12....       LCALL   ?DEALLOC_XSTACK8
   \   000146   90....       MOV     DPTR,#ZDP_TxOptions
   \   000149   E4           CLR     A
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B                REQUIRE ?Subroutine10
   \   00014B                ; // Fall through to label ?Subroutine10
    935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   740D         MOV     A,#0xd
   \   000002   02....       LJMP    ??Subroutine12_0 & 0xFFFF
    936          
    937          /*********************************************************************
    938           * @fn          ZDP_UserDescRsp
    939           *
    940           * @brief       Build and send the User Decriptor Response.
    941           *
    942           *
    943           * @param       dstAddr - destination address
    944           * @param       nwkAddrOfInterest -
    945           * @param       userDesc -
    946           * @param       SecurityEnable - Security Options
    947           *
    948           * @return      ZStatus_t
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    951                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    952                          byte SecurityEnable )
    953          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   741F         MOV     A,#0x1f
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   88..         MOV     ?V0 + 8,R0
   \   000022   89..         MOV     ?V0 + 9,R1
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   000024   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 2,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 3,A
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    956          
    957            (void)SecurityEnable;  // Intentionally unreferenced parameter
    958          
    959            len += userDesc->len;
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   2404         ADD     A,#0x4
   \   000035   F5..         MOV     ?V0 + 0,A
    960          
    961            *pBuf++ = ZSUCCESS;
   \   000037   85..82       MOV     DPL,?V0 + 2
   \   00003A   85..83       MOV     DPH,?V0 + 3
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
    962          
    963            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000040   EC           MOV     A,R4
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
    964            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000043   ED           MOV     A,R5
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   8582..       MOV     ?V0 + 2,DPL
   \   000049   8583..       MOV     ?V0 + 3,DPH
    965          
    966            *pBuf++ = userDesc->len;
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   85..82       MOV     DPL,?V0 + 2
   \   000054   85..83       MOV     DPH,?V0 + 3
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   8582..       MOV     ?V0 + 2,DPL
   \   00005C   8583..       MOV     ?V0 + 3,DPH
    967            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   00005F                ; Setup parameters for call to function osal_memcpy
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   A3           INC     DPTR
   \   000064   A982         MOV     R1,DPL
   \   000066   AA83         MOV     R2,DPH
   \   000068   89..         MOV     ?V0 + 4,R1
   \   00006A   8A..         MOV     ?V0 + 5,R2
   \   00006C   75..00       MOV     ?V0 + 6,#0x0
   \   00006F   78..         MOV     R0,#?V0 + 4
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000074   85..82       MOV     DPL,?V0 + 8
   \   000077   85..83       MOV     DPH,?V0 + 9
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FC           MOV     R4,A
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   AA..         MOV     R2,?V0 + 2
   \   000080   AB..         MOV     R3,?V0 + 3
   \   000082   12....       LCALL   ??osal_memcpy?relay
   \   000085   7403         MOV     A,#0x3
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    968          
    969            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00008A                ; Setup parameters for call to function osal_memset
   \   00008A   7C0C         MOV     R4,#0xc
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7900         MOV     R1,#0x0
   \   000090   7401         MOV     A,#0x1
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   12....       LCALL   ??osal_memset?relay
   \   00009C   740A         MOV     A,#0xa
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C0E0         PUSH    A
   \   0000B2   7409         MOV     A,#0x9
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F8           MOV     R0,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   7401         MOV     A,#0x1
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E8           MOV     A,R0
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E9           MOV     A,R1
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   24FF         ADD     A,#-0x1
   \   0000D3   F5..         MOV     ?V0 + 4,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   34FF         ADDC    A,#-0x1
   \   0000D9   F5..         MOV     ?V0 + 5,A
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   85..82       MOV     DPL,?V0 + 4
   \   0000E5   85..83       MOV     DPH,?V0 + 5
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9                ; Setup parameters for call to function AF_DataRequest
   \   0000E9   75..1E       MOV     ?V0 + 1,#0x1e
   \   0000EC   78..         MOV     R0,#?V0 + 1
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   8582..       MOV     ?V0 + 2,DPL
   \   0000F9   8583..       MOV     ?V0 + 3,DPH
   \   0000FC   78..         MOV     R0,#?V0 + 2
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   78..         MOV     R0,#?V0 + 4
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   E5..         MOV     A,?V0 + 0
   \   000108   2401         ADD     A,#0x1
   \   00010A   F5..         MOV     ?V0 + 0,A
   \   00010C   E4           CLR     A
   \   00010D   3400         ADDC    A,#0x0
   \   00010F   F5..         MOV     ?V0 + 1,A
   \   000111   78..         MOV     R0,#?V0 + 0
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   75..11       MOV     ?V0 + 0,#0x11
   \   000119   75..80       MOV     ?V0 + 1,#-0x80
   \   00011C   78..         MOV     R0,#?V0 + 0
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   90....       MOV     DPTR,#ZDP_TxOptions
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F9           MOV     R1,A
   \   000126   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000128   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00012A   740A         MOV     A,#0xa
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   AA82         MOV     R2,DPL
   \   000131   AB83         MOV     R3,DPH
   \   000133   12....       LCALL   ??AF_DataRequest?relay
   \   000136   7409         MOV     A,#0x9
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B   02....       LJMP    ?Subroutine10 & 0xFFFF
    970          }
    971          
    972          /*********************************************************************
    973           * @fn          ZDP_ServerDiscRsp
    974           *
    975           * @brief       Build and send the Server_Discovery_rsp response.
    976           *
    977           * @param       transID - Transaction sequence number of request.
    978           * @param       dstAddr - Network Destination Address.
    979           * @param       status - Status of response to request.
    980           * @param       aoi - Network Address of Interest of request.
    981           * @param       serverMask - Bit map of service(s) being sought.
    982           * @param       SecurityEnable - Security Options
    983           *
    984           * @return      ZStatus_t
    985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    986          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    987                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    988          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   741D         MOV     A,#0x1d
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
    989            const byte len = 1  + 2;  // status + aoi + mask.
    990            uint8 *pBuf = ZDP_TmpBuf;
   \   000020   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
    991            ZStatus_t stat;
    992          
    993            // Intentionally unreferenced parameters
    994            (void)aoi;
    995            (void)SecurityEnable;
    996          
    997            *pBuf++ = status;
   \   00002C   EC           MOV     A,R4
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
    998          
    999            *pBuf++ = LO_UINT16( serverMask );
   \   00002F   E8           MOV     A,R0
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   1000            *pBuf++ = HI_UINT16( serverMask );
   \   000032   E9           MOV     A,R1
   \   000033   F0           MOVX    @DPTR,A
   1001          
   1002            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000034   90....       MOV     DPTR,#ZDP_TxOptions
   \   000037   7410         MOV     A,#0x10
   \   000039   F0           MOVX    @DPTR,A
   1003            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C0C         MOV     R4,#0xc
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   AA82         MOV     R2,DPL
   \   000047   AB83         MOV     R3,DPH
   \   000049   12....       LCALL   ??osal_memset?relay
   \   00004C   740A         MOV     A,#0xa
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C0E0         PUSH    A
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   D0E0         POP     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   7401         MOV     A,#0x1
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E8           MOV     A,R0
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E9           MOV     A,R1
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000080   E0           MOVX    A,@DPTR
   \   000081   24FF         ADD     A,#-0x1
   \   000083   F5..         MOV     ?V0 + 4,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   34FF         ADDC    A,#-0x1
   \   000089   F5..         MOV     ?V0 + 5,A
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   85..82       MOV     DPL,?V0 + 4
   \   000095   85..83       MOV     DPH,?V0 + 5
   \   000098   F0           MOVX    @DPTR,A
   \   000099                ; Setup parameters for call to function AF_DataRequest
   \   000099   75..1E       MOV     ?V0 + 1,#0x1e
   \   00009C   78..         MOV     R0,#?V0 + 1
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   8582..       MOV     ?V0 + 2,DPL
   \   0000A9   8583..       MOV     ?V0 + 3,DPH
   \   0000AC   78..         MOV     R0,#?V0 + 2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   78..         MOV     R0,#?V0 + 4
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   75..04       MOV     ?V0 + 2,#0x4
   \   0000B9   75..00       MOV     ?V0 + 3,#0x0
   \   0000BC   78..         MOV     R0,#?V0 + 2
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   75..15       MOV     ?V0 + 2,#0x15
   \   0000C4   75..80       MOV     ?V0 + 3,#-0x80
   \   0000C7   78..         MOV     R0,#?V0 + 2
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F9           MOV     R1,A
   \   0000D1   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000D3   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000D5   740A         MOV     A,#0xa
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   12....       LCALL   ??AF_DataRequest?relay
   \   0000E1   7409         MOV     A,#0x9
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   1004            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0000E6   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000E9   E4           CLR     A
   \   0000EA   F0           MOVX    @DPTR,A
   1005          
   1006            return ( stat );
   \   0000EB   740D         MOV     A,#0xd
   \   0000ED   02....       LJMP    ??Subroutine14_0 & 0xFFFF
   1007          }
   1008          
   1009          /*********************************************************************
   1010           * @fn          ZDP_GenericRsp
   1011           *
   1012           * @brief       Sends a response message with only the parameter status
   1013           *              byte and the addr of interest for data.
   1014           *              This function sends unicast message to the
   1015           *              requesting device.
   1016           *
   1017           * @param       dstAddr - destination address
   1018           * @param       status  - generic status for response
   1019           * @param       aoi     - address of interest
   1020           * @param       dstAddr - destination address
   1021           * @param       rspId   - response cluster ID
   1022           * @param       SecurityEnable - Security Options
   1023           *
   1024           * @return      afStatus_t
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1027                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1028          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   741D         MOV     A,#0x1d
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   741F         MOV     A,#0x1f
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 5,A
   1029            uint8 len;
   1030          
   1031            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1032          
   1033            ZDP_TmpBuf[0] = status;
   \   00002C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8A82         MOV     DPL,R2
   \   000037   EC           MOV     A,R4
   \   000038   F0           MOVX    @DPTR,A
   1034            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000039   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F583         MOV     DPH,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   A3           INC     DPTR
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   1035            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000047   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
   1036          
   1037            // Length byte
   1038            ZDP_TmpBuf[3] = 0;
   \   000056   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F583         MOV     DPH,A
   \   00005F   8882         MOV     DPL,R0
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   1039            len = 4;
   1040          
   1041            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000066                ; Setup parameters for call to function osal_memset
   \   000066   7C0C         MOV     R4,#0xc
   \   000068   FD           MOV     R5,A
   \   000069   F9           MOV     R1,A
   \   00006A   04           INC     A
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   12....       LCALL   ??osal_memset?relay
   \   000075   740A         MOV     A,#0xa
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C0E0         PUSH    A
   \   00008B   7409         MOV     A,#0x9
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   D0E0         POP     A
   \   000092   F0           MOVX    @DPTR,A
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F9           MOV     R1,A
   \   00009C   7401         MOV     A,#0x1
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E8           MOV     A,R0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E9           MOV     A,R1
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   24FF         ADD     A,#-0x1
   \   0000AC   F5..         MOV     ?V0 + 6,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   34FF         ADDC    A,#-0x1
   \   0000B2   F5..         MOV     ?V0 + 7,A
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   85..82       MOV     DPL,?V0 + 6
   \   0000BE   85..83       MOV     DPH,?V0 + 7
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2                ; Setup parameters for call to function AF_DataRequest
   \   0000C2   75..1E       MOV     ?V0 + 1,#0x1e
   \   0000C5   78..         MOV     R0,#?V0 + 1
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   8582..       MOV     ?V0 + 2,DPL
   \   0000D2   8583..       MOV     ?V0 + 3,DPH
   \   0000D5   78..         MOV     R0,#?V0 + 2
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   78..         MOV     R0,#?V0 + 6
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   75..05       MOV     ?V0 + 2,#0x5
   \   0000E2   75..00       MOV     ?V0 + 3,#0x0
   \   0000E5   78..         MOV     R0,#?V0 + 2
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   78..         MOV     R0,#?V0 + 4
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F9           MOV     R1,A
   \   0000F4   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000F6   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000F8   740A         MOV     A,#0xa
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   AA82         MOV     R2,DPL
   \   0000FF   AB83         MOV     R3,DPH
   \   000101   12....       LCALL   ??AF_DataRequest?relay
   \   000104   7409         MOV     A,#0x9
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   \   000109   740D         MOV     A,#0xd
   \   00010B                REQUIRE ?Subroutine6
   \   00010B                ; // Fall through to label ?Subroutine6
   1042          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   1043          
   1044          /*********************************************************************
   1045           * Binding
   1046           */
   1047          /*********************************************************************
   1048           * @fn          ZDP_EndDeviceBindReq
   1049           *
   1050           * @brief       This builds and sends a End_Device_Bind_req message.
   1051           *              This function sends a unicast message.
   1052           *
   1053           * @param       dstAddr - destination address
   1054           * @param       LocalCoordinator - short address of local coordinator
   1055           * @param       epIntf - Endpoint/Interface of Simple Desc
   1056           * @param       ProfileID - Profile ID
   1057           *
   1058           *   The Input cluster list is the opposite of what you would think.
   1059           *   This is the output cluster list of this device
   1060           * @param       NumInClusters - number of input clusters
   1061           * @param       InClusterList - input cluster ID list
   1062           *
   1063           *   The Output cluster list is the opposite of what you would think.
   1064           *   This is the input cluster list of this device
   1065           * @param       NumOutClusters - number of output clusters
   1066           * @param       OutClusterList - output cluster ID list
   1067           *
   1068           * @param       SecurityEnable - Security Options
   1069           *
   1070           * @return      afStatus_t
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1073                                           uint16 LocalCoordinator,
   1074                                           byte endPoint,
   1075                                           uint16 ProfileID,
   1076                                           byte NumInClusters, cId_t *InClusterList,
   1077                                           byte NumOutClusters, cId_t *OutClusterList,
   1078                                           byte SecurityEnable )
   1079          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   8C..         MOV     ?V0 + 4,R4
   \   000010   8D..         MOV     ?V0 + 5,R5
   \   000012   89..         MOV     ?V0 + 9,R1
   \   000014   7424         MOV     A,#0x24
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   7426         MOV     A,#0x26
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 3,A
   \   000028   7427         MOV     A,#0x27
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 12,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 13,A
   \   000034   7429         MOV     A,#0x29
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 2,A
   \   00003C   742A         MOV     A,#0x2a
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V0 + 14,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 15,A
   1080            uint8 *pBuf = ZDP_TmpBuf;
   \   000048   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FE           MOV     R6,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FF           MOV     R7,A
   1081            uint8 i, len;
   1082            uint8 *ieeeAddr;
   1083          
   1084            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1085          
   1086            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1087            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1088            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000050   E5..         MOV     A,?V0 + 3
   \   000052   25..         ADD     A,?V0 + 2
   \   000054   C3           CLR     C
   \   000055   33           RLC     A
   \   000056   240F         ADD     A,#0xf
   \   000058   F5..         MOV     ?V0 + 8,A
   1089          
   1090            if ( len >= ZDP_BUF_SZ-1 )
   \   00005A   C3           CLR     C
   \   00005B   944F         SUBB    A,#0x4f
   \   00005D   4005         JC      ??ZDP_EndDeviceBindReq_0
   1091            {
   1092              return afStatus_MEM_FAIL;
   \   00005F   7910         MOV     R1,#0x10
   \   000061   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1093            }
   1094          
   1095            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000064                ; Setup parameters for call to function NLME_GetShortAddr
   \   000064   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000067   EA           MOV     A,R2
   \   000068   65..         XRL     A,?V0 + 4
   \   00006A   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00006C   EB           MOV     A,R3
   \   00006D   65..         XRL     A,?V0 + 5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00006F   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1096            {
   1097              return afStatus_INVALID_PARAMETER;
   \   000071   7902         MOV     R1,#0x2
   \   000073   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1098            }
   1099          
   1100            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   1101            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00007E   E5..         MOV     A,?V0 + 5
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   AE82         MOV     R6,DPL
   \   000084   AF83         MOV     R7,DPH
   1102          
   1103            ieeeAddr = NLME_GetExtAddr();
   1104            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000086                ; Setup parameters for call to function sAddrExtCpy
   \   000086                ; Setup parameters for call to function NLME_GetExtAddr
   \   000086   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000089   EA           MOV     A,R2
   \   00008A   FC           MOV     R4,A
   \   00008B   EB           MOV     A,R3
   \   00008C   FD           MOV     R5,A
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   FB           MOV     R3,A
   \   000091   12....       LCALL   ??sAddrExtCpy?relay
   \   000094   8A..         MOV     ?V0 + 4,R2
   \   000096   8B..         MOV     ?V0 + 5,R3
   \   000098   AE..         MOV     R6,?V0 + 4
   \   00009A   AF..         MOV     R7,?V0 + 5
   1105          
   1106            *pBuf++ = endPoint;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   E5..         MOV     A,?V0 + 9
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   1107          
   1108            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000A4   E5..         MOV     A,?V0 + 0
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   1109            *pBuf++ = HI_UINT16( ProfileID );
   \   0000A8   E5..         MOV     A,?V0 + 1
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   1110          
   1111            *pBuf++ = NumInClusters; // Input cluster list
   \   0000AC   E5..         MOV     A,?V0 + 3
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   AE82         MOV     R6,DPL
   \   0000B2   AF83         MOV     R7,DPH
   1112            for ( i = 0; i < NumInClusters; ++i )
   \   0000B4   6036         JZ      ??ZDP_EndDeviceBindReq_4
   \   0000B6   F5..         MOV     ?V0 + 0,A
   1113            {
   1114              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000B8   85..82       MOV     DPL,?V0 + 12
   \   0000BB   85..83       MOV     DPH,?V0 + 13
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   AE82         MOV     R6,DPL
   \   0000C7   AF83         MOV     R7,DPH
   1115              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000C9   85..82       MOV     DPL,?V0 + 12
   \   0000CC   85..83       MOV     DPH,?V0 + 13
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   0E           INC     R6
   \   0000D8   AF83         MOV     R7,DPH
   1116            }
   \   0000DA   E5..         MOV     A,?V0 + 12
   \   0000DC   2402         ADD     A,#0x2
   \   0000DE   F5..         MOV     ?V0 + 12,A
   \   0000E0   E5..         MOV     A,?V0 + 13
   \   0000E2   3400         ADDC    A,#0x0
   \   0000E4   F5..         MOV     ?V0 + 13,A
   \   0000E6   15..         DEC     ?V0 + 0
   \   0000E8   E5..         MOV     A,?V0 + 0
   \   0000EA   70CC         JNZ     ??ZDP_EndDeviceBindReq_5
   1117          
   1118            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   E5..         MOV     A,?V0 + 2
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   AE82         MOV     R6,DPL
   \   0000F6   AF83         MOV     R7,DPH
   1119            for ( i = 0; i < NumOutClusters; ++i )
   \   0000F8   6036         JZ      ??ZDP_EndDeviceBindReq_6
   \   0000FA   F5..         MOV     ?V0 + 1,A
   1120            {
   1121              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000FC   85..82       MOV     DPL,?V0 + 14
   \   0000FF   85..83       MOV     DPH,?V0 + 15
   \   000102   E0           MOVX    A,@DPTR
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   AE82         MOV     R6,DPL
   \   00010B   AF83         MOV     R7,DPH
   1122              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   00010D   85..82       MOV     DPL,?V0 + 14
   \   000110   85..83       MOV     DPH,?V0 + 15
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   8E82         MOV     DPL,R6
   \   000117   8F83         MOV     DPH,R7
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   0E           INC     R6
   \   00011C   AF83         MOV     R7,DPH
   1123            }
   \   00011E   E5..         MOV     A,?V0 + 14
   \   000120   2402         ADD     A,#0x2
   \   000122   F5..         MOV     ?V0 + 14,A
   \   000124   E5..         MOV     A,?V0 + 15
   \   000126   3400         ADDC    A,#0x0
   \   000128   F5..         MOV     ?V0 + 15,A
   \   00012A   15..         DEC     ?V0 + 1
   \   00012C   E5..         MOV     A,?V0 + 1
   \   00012E   70CC         JNZ     ??ZDP_EndDeviceBindReq_7
   1124          
   1125            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \                     ??ZDP_EndDeviceBindReq_6:
   \   000130                ; Setup parameters for call to function osal_memset
   \   000130   7C0C         MOV     R4,#0xc
   \   000132   7D00         MOV     R5,#0x0
   \   000134   7900         MOV     R1,#0x0
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   AA82         MOV     R2,DPL
   \   00013E   AB83         MOV     R3,DPH
   \   000140   12....       LCALL   ??osal_memset?relay
   \   000143   7409         MOV     A,#0x9
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   E4           CLR     A
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   85..82       MOV     DPL,?V0 + 6
   \   00014D   85..83       MOV     DPH,?V0 + 7
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   C0E0         PUSH    A
   \   00015B   7408         MOV     A,#0x8
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   D0E0         POP     A
   \   000162   F0           MOVX    @DPTR,A
   \   000163   85..82       MOV     DPL,?V0 + 6
   \   000166   85..83       MOV     DPH,?V0 + 7
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   F8           MOV     R0,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F9           MOV     R1,A
   \   00016E   85..82       MOV     DPL,?XSP + 0
   \   000171   85..83       MOV     DPH,?XSP + 1
   \   000174   E8           MOV     A,R0
   \   000175   F0           MOVX    @DPTR,A
   \   000176   A3           INC     DPTR
   \   000177   E9           MOV     A,R1
   \   000178   F0           MOVX    @DPTR,A
   \   000179   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   24FF         ADD     A,#-0x1
   \   00017F   F5..         MOV     ?V0 + 2,A
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   34FF         ADDC    A,#-0x1
   \   000185   F5..         MOV     ?V0 + 3,A
   \   000187   90....       MOV     DPTR,#ZDP_TransID
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   85..82       MOV     DPL,?V0 + 2
   \   00018E   85..83       MOV     DPH,?V0 + 3
   \   000191   F0           MOVX    @DPTR,A
   \   000192                ; Setup parameters for call to function AF_DataRequest
   \   000192   75..1E       MOV     ?V0 + 4,#0x1e
   \   000195   78..         MOV     R0,#?V0 + 4
   \   000197   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019A   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   00019D   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   0001A0   78..         MOV     R0,#?V0 + 4
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   78..         MOV     R0,#?V0 + 2
   \   0001A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AA   85....       MOV     ?V0 + 2,?V0 + 8
   \   0001AD   E5..         MOV     A,?V0 + 2
   \   0001AF   2401         ADD     A,#0x1
   \   0001B1   F5..         MOV     ?V0 + 2,A
   \   0001B3   E4           CLR     A
   \   0001B4   3400         ADDC    A,#0x0
   \   0001B6   F5..         MOV     ?V0 + 3,A
   \   0001B8   78..         MOV     R0,#?V0 + 2
   \   0001BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BD   75..20       MOV     ?V0 + 2,#0x20
   \   0001C0   75..00       MOV     ?V0 + 3,#0x0
   \   0001C3   78..         MOV     R0,#?V0 + 2
   \   0001C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C8   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0001CF   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0001D1   7409         MOV     A,#0x9
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   AA82         MOV     R2,DPL
   \   0001D8   AB83         MOV     R3,DPH
   \   0001DA   12....       LCALL   ??AF_DataRequest?relay
   \   0001DD   7409         MOV     A,#0x9
   \   0001DF   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   0001E2   740C         MOV     A,#0xc
   \   0001E4   02....       LJMP    ?Subroutine7 & 0xFFFF
   1126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine16_0
   \   000003                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1127          
   1128          /*********************************************************************
   1129           * @fn          ZDP_BindUnbindReq
   1130           *
   1131           * @brief       This builds and send a Bind_req or Unbind_req message
   1132           *              Depending on the ClusterID. This function
   1133           *              sends a unicast message to the local coordinator.
   1134           *
   1135           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1136           * @param       dstAddr - destination address of the message
   1137           * @param       SourceAddr - source 64 bit address of the binding
   1138           * @param       SrcEPIntf - Source endpoint/interface
   1139           * @param       ClusterID - Binding cluster ID
   1140           * @param       DestinationAddr - destination 64 bit addr of binding
   1141           * @param       DstEPIntf - destination endpoint/interface
   1142           * @param       SecurityEnable - Security Options
   1143           *
   1144           * @return      afStatus_t
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1147                                        uint8 *SourceAddr, byte SrcEndPoint,
   1148                                        cId_t ClusterID,
   1149                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1150                                        byte SecurityEnable )
   1151          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   8C..         MOV     ?V0 + 8,R4
   \   000010   8D..         MOV     ?V0 + 9,R5
   \   000012   89..         MOV     ?V0 + 12,R1
   \   000014   7421         MOV     A,#0x21
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FD           MOV     R5,A
   \   00001E   7423         MOV     A,#0x23
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
   \   00002A   7425         MOV     A,#0x25
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 4,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 5,A
   \   000036   7427         MOV     A,#0x27
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FF           MOV     R7,A
   1152            uint8 *pBuf = ZDP_TmpBuf;
   \   00003D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FB           MOV     R3,A
   1153            byte len;
   1154          
   1155            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1156          
   1157            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1158            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000045   7E0C         MOV     R6,#0xc
   1159            if ( destinationAddr->addrMode == Addr64Bit )
   \   000047   E5..         MOV     A,?V0 + 4
   \   000049   2408         ADD     A,#0x8
   \   00004B   F5..         MOV     ?V0 + 6,A
   \   00004D   E5..         MOV     A,?V0 + 5
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 7,A
   \   000053   85..82       MOV     DPL,?V0 + 6
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   7403         MOV     A,#0x3
   \   00005C   68           XRL     A,R0
   \   00005D   7004         JNZ     ??ZDP_BindUnbindReq_0
   1160              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00005F   7E15         MOV     R6,#0x15
   \   000061   8007         SJMP    ??ZDP_BindUnbindReq_1
   1161            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000063   7401         MOV     A,#0x1
   \   000065   68           XRL     A,R0
   \   000066   7002         JNZ     ??ZDP_BindUnbindReq_1
   1162              len += sizeof ( uint16 );
   \   000068   0E           INC     R6
   \   000069   0E           INC     R6
   1163          
   1164            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00006A                ; Setup parameters for call to function sAddrExtCpy
   \   00006A   12....       LCALL   ??sAddrExtCpy?relay
   1165            *pBuf++ = SrcEndPoint;
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   E5..         MOV     A,?V0 + 12
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   1166          
   1167            *pBuf++ = LO_UINT16( ClusterID );
   \   000075   E5..         MOV     A,?V0 + 2
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   1168          
   1169            *pBuf++ = HI_UINT16( ClusterID );
   \   000079   E5..         MOV     A,?V0 + 3
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   AA82         MOV     R2,DPL
   \   00007F   AB83         MOV     R3,DPH
   1170            *pBuf++ = destinationAddr->addrMode;
   \   000081   85..82       MOV     DPL,?V0 + 6
   \   000084   85..83       MOV     DPH,?V0 + 7
   \   000087   E0           MOVX    A,@DPTR
   \   000088   8A82         MOV     DPL,R2
   \   00008A   8B83         MOV     DPH,R3
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   0A           INC     R2
   \   00008F   AB83         MOV     R3,DPH
   1171            if ( destinationAddr->addrMode == Addr64Bit )
   \   000091   85..82       MOV     DPL,?V0 + 6
   \   000094   85..83       MOV     DPH,?V0 + 7
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   7403         MOV     A,#0x3
   \   00009B   68           XRL     A,R0
   \   00009C   7012         JNZ     ??ZDP_BindUnbindReq_2
   1172            {
   1173              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1174              *pBuf = DstEndPoint;
   \   00009E   EF           MOV     A,R7
   \   00009F   C0E0         PUSH    A
   \   0000A1                ; Setup parameters for call to function sAddrExtCpy
   \   0000A1   AC..         MOV     R4,?V0 + 4
   \   0000A3   AD..         MOV     R5,?V0 + 5
   \   0000A5   12....       LCALL   ??sAddrExtCpy?relay
   \   0000A8   8A82         MOV     DPL,R2
   \   0000AA   8B83         MOV     DPH,R3
   \   0000AC   D0E0         POP     A
   \   0000AE   8021         SJMP    ??ZDP_BindUnbindReq_3
   1175            }
   1176            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   68           XRL     A,R0
   \   0000B3   701D         JNZ     ??ZDP_BindUnbindReq_4
   1177            {
   1178              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   0000B5   85..82       MOV     DPL,?V0 + 4
   \   0000B8   85..83       MOV     DPH,?V0 + 5
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   8A82         MOV     DPL,R2
   \   0000BE   8B83         MOV     DPH,R3
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   0A           INC     R2
   \   0000C3   AB83         MOV     R3,DPH
   1179              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   0000C5   85..82       MOV     DPL,?V0 + 4
   \   0000C8   85..83       MOV     DPH,?V0 + 5
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   8A82         MOV     DPL,R2
   \   0000CF   8B83         MOV     DPH,R3
   \                     ??ZDP_BindUnbindReq_3:
   \   0000D1   F0           MOVX    @DPTR,A
   1180            }
   1181          
   1182            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000D2   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000D5   7410         MOV     A,#0x10
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8                ; Setup parameters for call to function osal_memset
   \   0000D8   7C0C         MOV     R4,#0xc
   \   0000DA   7D00         MOV     R5,#0x0
   \   0000DC   7900         MOV     R1,#0x0
   \   0000DE   85..82       MOV     DPL,?XSP + 0
   \   0000E1   85..83       MOV     DPH,?XSP + 1
   \   0000E4   AA82         MOV     R2,DPL
   \   0000E6   AB83         MOV     R3,DPH
   \   0000E8   12....       LCALL   ??osal_memset?relay
   \   0000EB   7409         MOV     A,#0x9
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   E4           CLR     A
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   85..82       MOV     DPL,?V0 + 8
   \   0000F5   85..83       MOV     DPH,?V0 + 9
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   7408         MOV     A,#0x8
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   85..82       MOV     DPL,?V0 + 8
   \   00010E   85..83       MOV     DPH,?V0 + 9
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F8           MOV     R0,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   85..82       MOV     DPL,?XSP + 0
   \   000119   85..83       MOV     DPH,?XSP + 1
   \   00011C   E8           MOV     A,R0
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   A3           INC     DPTR
   \   00011F   E9           MOV     A,R1
   \   000120   F0           MOVX    @DPTR,A
   \   000121   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000124   E0           MOVX    A,@DPTR
   \   000125   24FF         ADD     A,#-0x1
   \   000127   F5..         MOV     ?V0 + 2,A
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   34FF         ADDC    A,#-0x1
   \   00012D   F5..         MOV     ?V0 + 3,A
   \   00012F   90....       MOV     DPTR,#ZDP_TransID
   \   000132   E0           MOVX    A,@DPTR
   \   000133   85..82       MOV     DPL,?V0 + 2
   \   000136   85..83       MOV     DPH,?V0 + 3
   \   000139   F0           MOVX    @DPTR,A
   \   00013A                ; Setup parameters for call to function AF_DataRequest
   \   00013A   75..1E       MOV     ?V0 + 4,#0x1e
   \   00013D   78..         MOV     R0,#?V0 + 4
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000142   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   000145   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   000148   78..         MOV     R0,#?V0 + 4
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014D   78..         MOV     R0,#?V0 + 2
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   8E..         MOV     ?V0 + 2,R6
   \   000154   E5..         MOV     A,?V0 + 2
   \   000156   2401         ADD     A,#0x1
   \   000158   F5..         MOV     ?V0 + 2,A
   \   00015A   E4           CLR     A
   \   00015B   3400         ADDC    A,#0x0
   \   00015D   F5..         MOV     ?V0 + 3,A
   \   00015F   78..         MOV     R0,#?V0 + 2
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   78..         MOV     R0,#?V0 + 0
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000169   90....       MOV     DPTR,#ZDP_TxOptions
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F9           MOV     R1,A
   \   00016E   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000170   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000172   7409         MOV     A,#0x9
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   AA82         MOV     R2,DPL
   \   000179   AB83         MOV     R3,DPH
   \   00017B   12....       LCALL   ??AF_DataRequest?relay
   \   00017E   7409         MOV     A,#0x9
   \   000180   12....       LCALL   ?DEALLOC_XSTACK8
   \   000183   90....       MOV     DPTR,#ZDP_TxOptions
   \   000186   E4           CLR     A
   \   000187   F0           MOVX    @DPTR,A
   \   000188   740C         MOV     A,#0xc
   \   00018A                REQUIRE ?Subroutine8
   \   00018A                ; // Fall through to label ?Subroutine8
   1183          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0D         MOV     R7,#0xd
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   1184          
   1185          /*********************************************************************
   1186           * Network Management
   1187           */
   1188          
   1189          /*********************************************************************
   1190           * @fn          ZDP_MgmtNwkDiscReq
   1191           *
   1192           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1193           *              function sends a unicast message.
   1194           *
   1195           * @param       dstAddr - destination address of the message
   1196           * @param       ScanChannels - 32 bit address bit map
   1197           * @param       StartIndex - Starting index within the reporting network
   1198           *                           list
   1199           * @param       SecurityEnable - Security Options
   1200           *
   1201           * @return      afStatus_t
   1202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1203          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1204                                         uint32 ScanChannels,
   1205                                         byte ScanDuration,
   1206                                         byte StartIndex,
   1207                                         byte SecurityEnable )
   1208          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 0,R1
   \   000010   8C..         MOV     ?V0 + 1,R4
   \   000012   741C         MOV     A,#0x1c
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?L_MOV_X
   1209            uint8 *pBuf = ZDP_TmpBuf;
   1210            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1211          
   1212            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1213          
   1214            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   78..         MOV     R0,#?V0 + 4
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000021   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??osal_buffer_uint32?relay
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
   1215          
   1216            *pBuf++ = ScanDuration;
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   1217            *pBuf = StartIndex;
   \   000039   E5..         MOV     A,?V0 + 1
   \   00003B   F0           MOVX    @DPTR,A
   1218          
   1219            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00003C                ; Setup parameters for call to function osal_memset
   \   00003C   7C0C         MOV     R4,#0xc
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7900         MOV     R1,#0x0
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??osal_memset?relay
   \   00004F   7409         MOV     A,#0x9
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E4           CLR     A
   \   000055   F0           MOVX    @DPTR,A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   C0E0         PUSH    A
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   E8           MOV     A,R0
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E9           MOV     A,R1
   \   000080   F0           MOVX    @DPTR,A
   \   000081   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000084   E0           MOVX    A,@DPTR
   \   000085   24FF         ADD     A,#-0x1
   \   000087   F5..         MOV     ?V0 + 2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   34FF         ADDC    A,#-0x1
   \   00008D   F5..         MOV     ?V0 + 3,A
   \   00008F   90....       MOV     DPTR,#ZDP_TransID
   \   000092   E0           MOVX    A,@DPTR
   \   000093   85..82       MOV     DPL,?V0 + 2
   \   000096   85..83       MOV     DPH,?V0 + 3
   \   000099   F0           MOVX    @DPTR,A
   \   00009A                ; Setup parameters for call to function AF_DataRequest
   \   00009A   75..1E       MOV     ?V0 + 4,#0x1e
   \   00009D   78..         MOV     R0,#?V0 + 4
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A2   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   0000A5   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV     R0,#?V0 + 2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   75..07       MOV     ?V0 + 2,#0x7
   \   0000B5   75..00       MOV     ?V0 + 3,#0x0
   \   0000B8   78..         MOV     R0,#?V0 + 2
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BD   75..30       MOV     ?V0 + 2,#0x30
   \   0000C0   78..         MOV     R0,#?V0 + 2
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000CC   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000CE   7409         MOV     A,#0x9
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   AA82         MOV     R2,DPL
   \   0000D5   AB83         MOV     R3,DPH
   \   0000D7   12....       LCALL   ??AF_DataRequest?relay
   \   0000DA   7409         MOV     A,#0x9
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF   740C         MOV     A,#0xc
   \   0000E1   02....       LJMP    ?Subroutine6 & 0xFFFF
   1220          }
   1221          
   1222          /*********************************************************************
   1223           * @fn          ZDP_MgmtDirectJoinReq
   1224           *
   1225           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1226           *              function sends a unicast message.
   1227           *
   1228           * @param       dstAddr - destination address of the message
   1229           * @param       deviceAddr - 64 bit IEEE Address
   1230           * @param       SecurityEnable - Security Options
   1231           *
   1232           * @return      afStatus_t
   1233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1234          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1235                                         uint8 *deviceAddr,
   1236                                         byte capInfo,
   1237                                         byte SecurityEnable )
   1238          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 2,R1
   1239            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1240          
   1241            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   000010                ; Setup parameters for call to function sAddrExtCpy
   \   000010   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCpy?relay
   1242            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F583         MOV     DPH,A
   \   000024   8882         MOV     DPL,R0
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E5..         MOV     A,?V0 + 2
   \   000030   F0           MOVX    @DPTR,A
   1243          
   1244            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000031                ; Setup parameters for call to function osal_memset
   \   000031   7C0C         MOV     R4,#0xc
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7900         MOV     R1,#0x0
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??osal_memset?relay
   \   000044   7409         MOV     A,#0x9
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C0E0         PUSH    A
   \   00005A   7408         MOV     A,#0x8
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E9           MOV     A,R1
   \   000075   F0           MOVX    @DPTR,A
   \   000076   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   24FF         ADD     A,#-0x1
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   34FF         ADDC    A,#-0x1
   \   000082   F5..         MOV     ?V0 + 1,A
   \   000084   90....       MOV     DPTR,#ZDP_TransID
   \   000087   E0           MOVX    A,@DPTR
   \   000088   85..82       MOV     DPL,?V0 + 0
   \   00008B   85..83       MOV     DPH,?V0 + 1
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F                ; Setup parameters for call to function AF_DataRequest
   \   00008F   75..1E       MOV     ?V0 + 3,#0x1e
   \   000092   78..         MOV     R0,#?V0 + 3
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   00009A   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   00009D   78..         MOV     R0,#?V0 + 4
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   75..0A       MOV     ?V0 + 0,#0xa
   \   0000AA   75..00       MOV     ?V0 + 1,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   75..35       MOV     ?V0 + 0,#0x35
   \   0000B5   02....       LJMP    ?Subroutine0 & 0xFFFF
   1245          }
   1246          
   1247          /*********************************************************************
   1248           * @fn          ZDP_MgmtPermitJoinReq
   1249           *
   1250           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1251           *
   1252           * @param       dstAddr - destination address of the message
   1253           * @param       duration - Permit duration
   1254           * @param       TcSignificance - Trust Center Significance
   1255           *
   1256           * @return      afStatus_t
   1257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1258          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1259                                            byte TcSignificance, byte SecurityEnable )
   1260          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1261            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1262          
   1263            // Build buffer
   1264            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F583         MOV     DPH,A
   \   000017   8882         MOV     DPL,R0
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
   1265            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F583         MOV     DPH,A
   \   000024   8882         MOV     DPL,R0
   \   000026   A3           INC     DPTR
   \   000027   EC           MOV     A,R4
   \   000028   F0           MOVX    @DPTR,A
   1266          
   1267            // Send the message
   1268            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1269                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   000029                ; Setup parameters for call to function osal_memset
   \   000029   7C0C         MOV     R4,#0xc
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   AA82         MOV     R2,DPL
   \   000037   AB83         MOV     R3,DPH
   \   000039   12....       LCALL   ??osal_memset?relay
   \   00003C   7409         MOV     A,#0x9
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C0E0         PUSH    A
   \   000052   7408         MOV     A,#0x8
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   E8           MOV     A,R0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000071   E0           MOVX    A,@DPTR
   \   000072   24FF         ADD     A,#-0x1
   \   000074   F5..         MOV     ?V0 + 2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   34FF         ADDC    A,#-0x1
   \   00007A   F5..         MOV     ?V0 + 3,A
   \   00007C   90....       MOV     DPTR,#ZDP_TransID
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   85..82       MOV     DPL,?V0 + 2
   \   000083   85..83       MOV     DPH,?V0 + 3
   \   000086   F0           MOVX    @DPTR,A
   \   000087                ; Setup parameters for call to function AF_DataRequest
   \   000087   75..1E       MOV     ?V0 + 4,#0x1e
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   000092   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   000095   78..         MOV     R0,#?V0 + 4
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   78..         MOV     R0,#?V0 + 2
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   75..03       MOV     ?V0 + 2,#0x3
   \   0000A2   75..00       MOV     ?V0 + 3,#0x0
   \   0000A5   78..         MOV     R0,#?V0 + 2
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   75..36       MOV     ?V0 + 2,#0x36
   \   0000AD   02....       LJMP    ?Subroutine9 & 0xFFFF
   1270          }
   1271          
   1272          /*********************************************************************
   1273           * @fn          ZDP_MgmtLeaveReq
   1274           *
   1275           * @brief       This builds and send a Mgmt_Leave_req message.
   1276           *
   1277           * @param       dstAddr - destination address of the message
   1278           *              IEEEAddr - IEEE adddress of device that is removed
   1279           *              RemoveChildren - set to 1 to remove the children of the
   1280           *                                device as well. 0 otherwise.
   1281           *              Rejoin - set to 1 if the removed device should rejoin
   1282                                   afterwards. 0 otherwise.
   1283           *
   1284           * @return      afStatus_t
   1285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1286          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1287                           uint8 Rejoin, uint8 SecurityEnable )
   1288          
   1289          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 0,R1
   \   000010   741A         MOV     A,#0x1a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   1290            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1291          
   1292            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000018                ; Setup parameters for call to function sAddrExtCpy
   \   000018   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   ??sAddrExtCpy?relay
   1293            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000023   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000026   E0           MOVX    A,@DPTR
   \   000027   2408         ADD     A,#0x8
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F9           MOV     R1,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   1294          
   1295            if ( RemoveChildren == TRUE )
   \   000035   04           INC     A
   \   000036   65..         XRL     A,?V0 + 0
   \   000038   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1296            {
   1297              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00003A   7440         MOV     A,#0x40
   \   00003C   F0           MOVX    @DPTR,A
   1298            }
   1299            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00003D   7401         MOV     A,#0x1
   \   00003F   65..         XRL     A,?V0 + 1
   \   000041   7004         JNZ     ??ZDP_MgmtLeaveReq_1
   1300            {
   1301              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000043   E0           MOVX    A,@DPTR
   \   000044   D2E7         SETB    0xE0 /* A   */.7
   \   000046   F0           MOVX    @DPTR,A
   1302            }
   1303          
   1304            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000047                ; Setup parameters for call to function osal_memset
   \   000047   7C0C         MOV     R4,#0xc
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   \   000057   12....       LCALL   ??osal_memset?relay
   \   00005A   7409         MOV     A,#0x9
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E4           CLR     A
   \   000060   F0           MOVX    @DPTR,A
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   C0E0         PUSH    A
   \   000070   7408         MOV     A,#0x8
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   85..82       MOV     DPL,?XSP + 0
   \   000084   85..83       MOV     DPH,?XSP + 1
   \   000087   E8           MOV     A,R0
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E9           MOV     A,R1
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   24FF         ADD     A,#-0x1
   \   000092   F5..         MOV     ?V0 + 2,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   34FF         ADDC    A,#-0x1
   \   000098   F5..         MOV     ?V0 + 3,A
   \   00009A   90....       MOV     DPTR,#ZDP_TransID
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   85..82       MOV     DPL,?V0 + 2
   \   0000A1   85..83       MOV     DPH,?V0 + 3
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5                ; Setup parameters for call to function AF_DataRequest
   \   0000A5   75..1E       MOV     ?V0 + 1,#0x1e
   \   0000A8   78..         MOV     R0,#?V0 + 1
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75....       MOV     ?V0 + 4,#ZDP_TransID & 0xff
   \   0000B0   75....       MOV     ?V0 + 5,#(ZDP_TransID >> 8) & 0xff
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   78..         MOV     R0,#?V0 + 2
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BD   75..0A       MOV     ?V0 + 2,#0xa
   \   0000C0   75..00       MOV     ?V0 + 3,#0x0
   \   0000C3   78..         MOV     R0,#?V0 + 2
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   75..34       MOV     ?V0 + 2,#0x34
   \   0000CB   02....       LJMP    ?Subroutine9 & 0xFFFF
   1305          }
   1306          
   1307          /*********************************************************************
   1308           * @fn          ZDP_MgmtNwkUpdateReq
   1309           *
   1310           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1311           *              function sends a unicast or broadcast message.
   1312           *
   1313           * @param       dstAddr - destination address of the message
   1314           * @param       ChannelMask - 32 bit address bit map
   1315           * @param       ScanDuration - length of time to spend scanning each channel
   1316           * @param       ScanCount - number of energy scans to be conducted
   1317           * @param       NwkUpdateId - NWk Update Id value
   1318           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1319           *                               bit set in its Node Descriptor
   1320           *
   1321           * @return      afStatus_t
   1322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1323          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1324                                           uint32 ChannelMask,
   1325                                           uint8 ScanDuration,
   1326                                           uint8 ScanCount,
   1327                                           uint8 NwkUpdateId,
   1328                                           uint16 NwkManagerAddr )
   1329          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 8,R2
   \   00000C   8B..         MOV     ?V0 + 9,R3
   \   00000E   89..         MOV     ?V0 + 0,R1
   \   000010   8C..         MOV     ?V0 + 3,R4
   \   000012   8D..         MOV     ?V0 + 2,R5
   \   000014   741E         MOV     A,#0x1e
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?L_MOV_X
   \   00001E   7422         MOV     A,#0x22
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FE           MOV     R6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FF           MOV     R7,A
   1330            uint8 *pBuf = ZDP_TmpBuf;
   1331            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   000028   75..05       MOV     ?V0 + 1,#0x5
   1332          
   1333            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   00002B                ; Setup parameters for call to function osal_buffer_uint32
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000030   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ??osal_buffer_uint32?relay
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   1334          
   1335            *pBuf++ = ScanDuration;
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   1336          
   1337            if ( ScanDuration <= 0x05 )
   \   000048   C3           CLR     C
   \   000049   9406         SUBB    A,#0x6
   \   00004B   5007         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1338            {
   1339              // Request is to scan over channelMask
   1340              len += sizeof( uint8 );
   \   00004D   75..06       MOV     ?V0 + 1,#0x6
   1341          
   1342              *pBuf++ = ScanCount;
   \   000050   E5..         MOV     A,?V0 + 3
   \   000052   8020         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1343            }
   1344            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000054   74FE         MOV     A,#-0x2
   \   000056   65..         XRL     A,?V0 + 0
   \   000058   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00005A   74FF         MOV     A,#-0x1
   \   00005C   65..         XRL     A,?V0 + 0
   \   00005E   7015         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1345            {
   1346              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1347              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000060   75..06       MOV     ?V0 + 1,#0x6
   1348          
   1349              *pBuf++ = NwkUpdateId;
   \   000063   E5..         MOV     A,?V0 + 2
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   1350          
   1351              if ( ScanDuration == 0xFF )
   \   000067   74FF         MOV     A,#-0x1
   \   000069   65..         XRL     A,?V0 + 0
   \   00006B   7008         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1352              {
   1353                len += sizeof( uint16 );
   \   00006D   75..08       MOV     ?V0 + 1,#0x8
   1354          
   1355                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   000070   EE           MOV     A,R6
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   1356                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000073   EF           MOV     A,R7
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000074   F0           MOVX    @DPTR,A
   1357              }
   1358            }
   1359          
   1360            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   000075                ; Setup parameters for call to function osal_memset
   \   000075   7C0C         MOV     R4,#0xc
   \   000077   7D00         MOV     R5,#0x0
   \   000079   7900         MOV     R1,#0x0
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??osal_memset?relay
   \   000088   7409         MOV     A,#0x9
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   85..82       MOV     DPL,?V0 + 8
   \   000092   85..83       MOV     DPH,?V0 + 9
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   C0E0         PUSH    A
   \   0000A0   7408         MOV     A,#0x8
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   85..82       MOV     DPL,?V0 + 8
   \   0000AB   85..83       MOV     DPH,?V0 + 9
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E8           MOV     A,R0
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E9           MOV     A,R1
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   24FF         ADD     A,#-0x1
   \   0000C4   F5..         MOV     ?V0 + 4,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   34FF         ADDC    A,#-0x1
   \   0000CA   F5..         MOV     ?V0 + 5,A
   \   0000CC   90....       MOV     DPTR,#ZDP_TransID
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   85..82       MOV     DPL,?V0 + 4
   \   0000D3   85..83       MOV     DPH,?V0 + 5
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7                ; Setup parameters for call to function AF_DataRequest
   \   0000D7   75..1E       MOV     ?V0 + 6,#0x1e
   \   0000DA   78..         MOV     R0,#?V0 + 6
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   75....       MOV     ?V0 + 6,#ZDP_TransID & 0xff
   \   0000E2   75....       MOV     ?V0 + 7,#(ZDP_TransID >> 8) & 0xff
   \   0000E5   78..         MOV     R0,#?V0 + 6
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   78..         MOV     R0,#?V0 + 4
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   85....       MOV     ?V0 + 4,?V0 + 1
   \   0000F2   E5..         MOV     A,?V0 + 4
   \   0000F4   2401         ADD     A,#0x1
   \   0000F6   F5..         MOV     ?V0 + 4,A
   \   0000F8   E4           CLR     A
   \   0000F9   3400         ADDC    A,#0x0
   \   0000FB   F5..         MOV     ?V0 + 5,A
   \   0000FD   78..         MOV     R0,#?V0 + 4
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   75..38       MOV     ?V0 + 4,#0x38
   \   000105   75..00       MOV     ?V0 + 5,#0x0
   \   000108   78..         MOV     R0,#?V0 + 4
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   02....       LJMP    ?Subroutine1 & 0xFFFF
   1361          }
   1362          
   1363          
   1364          /*********************************************************************
   1365           * Network Management Responses
   1366           */
   1367          
   1368          /*********************************************************************
   1369           * @fn          ZDP_MgmtNwkDiscRsp
   1370           *
   1371           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1372           *              function sends a unicast message.
   1373           *
   1374           * @param       dstAddr - destination address of the message
   1375           * @param       Status - message status (ZDP_SUCCESS or other)
   1376           * @param       NetworkCount - Total number of networks found
   1377           * @param       StartIndex - Starting index within the reporting network
   1378           *                           list
   1379           * @param       NetworkListCount - number of network lists included
   1380           *                                 in this message
   1381           * @param       NetworkList - List of network descriptors
   1382           * @param       SecurityEnable - Security Options
   1383           *
   1384           * @return      afStatus_t
   1385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1386          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1387                                      byte Status,
   1388                                      byte NetworkCount,
   1389                                      byte StartIndex,
   1390                                      byte NetworkListCount,
   1391                                      networkDesc_t *NetworkList,
   1392                                      byte SecurityEnable )
   1393          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 10,R2
   \   000014   8B..         MOV     ?V0 + 11,R3
   \   000016   8C..         MOV     ?V0 + 13,R4
   \   000018   8D..         MOV     ?V0 + 12,R5
   \   00001A   7423         MOV     A,#0x23
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 8,A
   \   000022   7424         MOV     A,#0x24
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 9,A
   \   00002A   7425         MOV     A,#0x25
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 2,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 3,A
   1394            uint8 *buf;
   1395            uint8 *pBuf;
   1396            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1397            byte idx;
   1398          
   1399            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1400          
   1401            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000036   75F00C       MOV     B,#0xc
   \   000039   E5..         MOV     A,?V0 + 9
   \   00003B   A4           MUL     AB
   \   00003C   2404         ADD     A,#0x4
   1402          
   1403            buf = osal_mem_alloc( len+1 );
   \   00003E   2401         ADD     A,#0x1
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   E4           CLR     A
   \   000043   3400         ADDC    A,#0x0
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   AA..         MOV     R2,?V0 + 0
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??osal_mem_alloc?relay
   \   00004D   8A..         MOV     ?V0 + 6,R2
   \   00004F   8B..         MOV     ?V0 + 7,R3
   1404            if ( buf == NULL )
   \   000051   EA           MOV     A,R2
   \   000052   45..         ORL     A,?V0 + 7
   \   000054   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1405            {
   1406              return afStatus_MEM_FAIL;
   \   000056   7910         MOV     R1,#0x10
   \   000058   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
   1407            }
   1408          
   1409            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   A3           INC     DPTR
   \   000060   8582..       MOV     ?V0 + 4,DPL
   \   000063   8583..       MOV     ?V0 + 5,DPH
   1410          
   1411            *pBuf++ = Status;
   \   000066   E5..         MOV     A,?V0 + 13
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   1412            *pBuf++ = NetworkCount;
   \   00006A   E5..         MOV     A,?V0 + 12
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   1413            *pBuf++ = StartIndex;
   \   00006E   E5..         MOV     A,?V0 + 8
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   1414            *pBuf++ = NetworkListCount;
   \   000072   E5..         MOV     A,?V0 + 9
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   AE82         MOV     R6,DPL
   \   000078   AF83         MOV     R7,DPH
   1415          
   1416            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   00007A   7003         JNZ     $+5
   \   00007C   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   00007F   F5..         MOV     ?V0 + 8,A
   1417            {
   1418              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000081                ; Setup parameters for call to function sAddrExtCpy
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   240D         ADD     A,#0xd
   \   000085   FC           MOV     R4,A
   \   000086   E5..         MOV     A,?V0 + 3
   \   000088   3400         ADDC    A,#0x0
   \   00008A   FD           MOV     R5,A
   \   00008B   EE           MOV     A,R6
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   ??sAddrExtCpy?relay
   1419              pBuf += Z_EXTADDR_LEN;
   \   000092   EE           MOV     A,R6
   \   000093   2408         ADD     A,#0x8
   \   000095   FE           MOV     R6,A
   \   000096   EF           MOV     A,R7
   \   000097   3400         ADDC    A,#0x0
   \   000099   FF           MOV     R7,A
   1420          
   1421              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   \   00009A   85..82       MOV     DPL,?V0 + 2
   \   00009D   85..83       MOV     DPH,?V0 + 3
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   AE82         MOV     R6,DPL
   \   0000AB   AF83         MOV     R7,DPH
   1422              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   \   0000AD   85..82       MOV     DPL,?V0 + 2
   \   0000B0   85..83       MOV     DPH,?V0 + 3
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   F0           MOVX    @DPTR,A
   1423              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   \   0000C1   EE           MOV     A,R6
   \   0000C2   F8           MOV     R0,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   F9           MOV     R1,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   0E           INC     R6
   \   0000C7   AF83         MOV     R7,DPH
   \   0000C9   85..82       MOV     DPL,?V0 + 2
   \   0000CC   85..83       MOV     DPH,?V0 + 3
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C4           SWAP    A
   \   0000D8   54F0         ANL     A,#0xf0
   \   0000DA   FA           MOV     R2,A
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   4A           ORL     A,R2
   \   0000E1   F0           MOVX    @DPTR,A
   1424              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   \   0000E2   85..82       MOV     DPL,?V0 + 2
   \   0000E5   85..83       MOV     DPH,?V0 + 3
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   F0           MOVX    @DPTR,A
   1425              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   \   0000F1   08           INC     R0
   \   0000F2   EF           MOV     A,R7
   \   0000F3   F9           MOV     R1,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   0E           INC     R6
   \   0000F6   AF83         MOV     R7,DPH
   \   0000F8   85..82       MOV     DPL,?V0 + 2
   \   0000FB   85..83       MOV     DPH,?V0 + 3
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C4           SWAP    A
   \   000104   54F0         ANL     A,#0xf0
   \   000106   FA           MOV     R2,A
   \   000107   8882         MOV     DPL,R0
   \   000109   8983         MOV     DPH,R1
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   4A           ORL     A,R2
   \   00010D   F0           MOVX    @DPTR,A
   1426          
   1427              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   A3           INC     DPTR
   \   000113   A983         MOV     R1,DPH
   \   000115   85..82       MOV     DPL,?V0 + 2
   \   000118   85..83       MOV     DPH,?V0 + 3
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   E0           MOVX    A,@DPTR
   \   000125   64FE         XRL     A,#0xfe
   \   000127   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_4
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00012C   8E82         MOV     DPL,R6
   \   00012E   8F83         MOV     DPH,R7
   \   000130   6004         JZ      ??ZDP_MgmtNwkDiscRsp_5
   1428              {
   1429                *pBuf++ = TRUE;                         // Permit Joining
   \   000132   7401         MOV     A,#0x1
   \   000134   8001         SJMP    ??ZDP_MgmtNwkDiscRsp_6
   1430              }
   1431              else
   1432              {
   1433                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000136   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   000137   F0           MOVX    @DPTR,A
   \   000138   0E           INC     R6
   \   000139   E9           MOV     A,R1
   \   00013A   FF           MOV     R7,A
   1434              }
   1435          
   1436              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00013B   E5..         MOV     A,?V0 + 2
   \   00013D   2416         ADD     A,#0x16
   \   00013F   F582         MOV     DPL,A
   \   000141   E5..         MOV     A,?V0 + 3
   \   000143   3400         ADDC    A,#0x0
   \   000145   F583         MOV     DPH,A
   \   000147   E0           MOVX    A,@DPTR
   \   000148   F5..         MOV     ?V0 + 2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F5..         MOV     ?V0 + 3,A
   1437            }
   \   00014E   15..         DEC     ?V0 + 8
   \   000150   E5..         MOV     A,?V0 + 8
   \   000152   6003         JZ      $+5
   \   000154   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1438          
   1439            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000157   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00015A   E5..         MOV     A,?V0 + 4
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   A3           INC     DPTR
   \   00015E   E5..         MOV     A,?V0 + 5
   \   000160   F0           MOVX    @DPTR,A
   \   000161                ; Setup parameters for call to function osal_memset
   \   000161   7C0C         MOV     R4,#0xc
   \   000163   7D00         MOV     R5,#0x0
   \   000165   7900         MOV     R1,#0x0
   \   000167   7401         MOV     A,#0x1
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   AA82         MOV     R2,DPL
   \   00016E   AB83         MOV     R3,DPH
   \   000170   12....       LCALL   ??osal_memset?relay
   \   000173   740A         MOV     A,#0xa
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E4           CLR     A
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   85..82       MOV     DPL,?V0 + 10
   \   00017D   85..83       MOV     DPH,?V0 + 11
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   E0           MOVX    A,@DPTR
   \   000189   C0E0         PUSH    A
   \   00018B   7409         MOV     A,#0x9
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
   \   000193   85..82       MOV     DPL,?V0 + 10
   \   000196   85..83       MOV     DPH,?V0 + 11
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F8           MOV     R0,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F9           MOV     R1,A
   \   00019E   7401         MOV     A,#0x1
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   E8           MOV     A,R0
   \   0001A4   F0           MOVX    @DPTR,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E9           MOV     A,R1
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   24FF         ADD     A,#-0x1
   \   0001AE   F5..         MOV     ?V0 + 4,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   34FF         ADDC    A,#-0x1
   \   0001B4   F5..         MOV     ?V0 + 5,A
   \   0001B6   85..82       MOV     DPL,?XSP + 0
   \   0001B9   85..83       MOV     DPH,?XSP + 1
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   85..82       MOV     DPL,?V0 + 4
   \   0001C0   85..83       MOV     DPH,?V0 + 5
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4                ; Setup parameters for call to function AF_DataRequest
   \   0001C4   75..1E       MOV     ?V0 + 2,#0x1e
   \   0001C7   78..         MOV     R0,#?V0 + 2
   \   0001C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CC   7401         MOV     A,#0x1
   \   0001CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D1   8582..       MOV     ?V0 + 2,DPL
   \   0001D4   8583..       MOV     ?V0 + 3,DPH
   \   0001D7   78..         MOV     R0,#?V0 + 2
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   78..         MOV     R0,#?V0 + 4
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E1   78..         MOV     R0,#?V0 + 0
   \   0001E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E6   75..30       MOV     ?V0 + 0,#0x30
   \   0001E9   75..80       MOV     ?V0 + 1,#-0x80
   \   0001EC   78..         MOV     R0,#?V0 + 0
   \   0001EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F9           MOV     R1,A
   \   0001F6   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0001F8   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0001FA   740A         MOV     A,#0xa
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   AA82         MOV     R2,DPL
   \   000201   AB83         MOV     R3,DPH
   \   000203   12....       LCALL   ??AF_DataRequest?relay
   \   000206   7409         MOV     A,#0x9
   \   000208   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020B   E9           MOV     A,R1
   \   00020C   FE           MOV     R6,A
   \   00020D                ; Setup parameters for call to function osal_mem_free
   \   00020D   AA..         MOV     R2,?V0 + 6
   \   00020F   AB..         MOV     R3,?V0 + 7
   \   000211   12....       LCALL   ??osal_mem_free?relay
   \   000214   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000217   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000219   F0           MOVX    @DPTR,A
   \   00021A   A3           INC     DPTR
   \   00021B   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00021D   F0           MOVX    @DPTR,A
   \   00021E   EE           MOV     A,R6
   \   00021F   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000220   740D         MOV     A,#0xd
   \   000222   02....       LJMP    ?Subroutine4 & 0xFFFF
   1440          }
   1441          
   1442          /*********************************************************************
   1443           * @fn          ZDP_MgmtLqiRsp
   1444           *
   1445           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1446           *              function sends a unicast message.
   1447           *
   1448           * @param       dstAddr - destination address of the message
   1449           * @param       Status - message status (ZDP_SUCCESS or other)
   1450           * @param       NeighborLqiEntries - Total number of entries found
   1451           * @param       StartIndex - Starting index within the reporting list
   1452           * @param       NeighborLqiCount - number of lists included
   1453           *                                 in this message
   1454           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1455           *                is the list to be sent, not the entire list
   1456           * @param       SecurityEnable - true if secure
   1457           *
   1458           * @return      ZStatus_t
   1459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1460          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1461                                    byte Status,
   1462                                    byte NeighborLqiEntries,
   1463                                    byte StartIndex,
   1464                                    byte NeighborLqiCount,
   1465                                    ZDP_MgmtLqiItem_t* NeighborList,
   1466                                    byte SecurityEnable )
   1467          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 4,R2
   \   000014   8B..         MOV     ?V0 + 5,R3
   \   000016   8D..         MOV     ?V0 + 15,R5
   \   000018   7425         MOV     A,#0x25
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 10,A
   \   000020   7426         MOV     A,#0x26
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 11,A
   \   000028   7427         MOV     A,#0x27
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 1,A
   1468            ZDP_MgmtLqiItem_t* list = NeighborList;
   1469            uint8 *buf, *pBuf;
   1470            byte len, x;
   1471          
   1472            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1473          
   1474            if ( ZSuccess != Status )
   \   000034   EC           MOV     A,R4
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??ZDP_MgmtLqiRsp_0 & 0xFFFF
   1475            {
   1476              ZDP_TmpBuf[0] = Status;
   \   00003A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F583         MOV     DPH,A
   \   000043   8882         MOV     DPL,R0
   \   000045   EC           MOV     A,R4
   \   000046   F0           MOVX    @DPTR,A
   1477              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000047                ; Setup parameters for call to function osal_memset
   \   000047   7C0C         MOV     R4,#0xc
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   AA82         MOV     R2,DPL
   \   000054   AB83         MOV     R3,DPH
   \   000056   12....       LCALL   ??osal_memset?relay
   \   000059   740A         MOV     A,#0xa
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   85..82       MOV     DPL,?V0 + 4
   \   000063   85..83       MOV     DPH,?V0 + 5
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C0E0         PUSH    A
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   85..82       MOV     DPL,?V0 + 4
   \   00007C   85..83       MOV     DPH,?V0 + 5
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   7401         MOV     A,#0x1
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E8           MOV     A,R0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   E9           MOV     A,R1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000091   E0           MOVX    A,@DPTR
   \   000092   24FF         ADD     A,#-0x1
   \   000094   F5..         MOV     ?V0 + 2,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   34FF         ADDC    A,#-0x1
   \   00009A   F5..         MOV     ?V0 + 3,A
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   85..82       MOV     DPL,?V0 + 2
   \   0000A6   85..83       MOV     DPH,?V0 + 3
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA                ; Setup parameters for call to function AF_DataRequest
   \   0000AA   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   7401         MOV     A,#0x1
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   8582..       MOV     ?V0 + 0,DPL
   \   0000BA   8583..       MOV     ?V0 + 1,DPH
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   78..         MOV     R0,#?V0 + 2
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   75..02       MOV     ?V0 + 0,#0x2
   \   0000CA   75..00       MOV     ?V0 + 1,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   75..31       MOV     ?V0 + 0,#0x31
   \   0000D5   75..80       MOV     ?V0 + 1,#-0x80
   \   0000D8   78..         MOV     R0,#?V0 + 0
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F9           MOV     R1,A
   \   0000E2   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000E4   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000E6   740A         MOV     A,#0xa
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   AA82         MOV     R2,DPL
   \   0000ED   AB83         MOV     R3,DPH
   \   0000EF   12....       LCALL   ??AF_DataRequest?relay
   \   0000F2   7409         MOV     A,#0x9
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F7   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1478            }
   1479          
   1480            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1481            //  neighbor LQI data.
   1482            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   0000FA   75F016       MOV     B,#0x16
   \   0000FD   E5..         MOV     A,?V0 + 11
   \   0000FF   A4           MUL     AB
   \   000100   2404         ADD     A,#0x4
   1483          
   1484            buf = osal_mem_alloc( len+1 );
   \   000102   2401         ADD     A,#0x1
   \   000104   F5..         MOV     ?V0 + 2,A
   \   000106   E4           CLR     A
   \   000107   3400         ADDC    A,#0x0
   \   000109   F5..         MOV     ?V0 + 3,A
   \   00010B                ; Setup parameters for call to function osal_mem_alloc
   \   00010B   AA..         MOV     R2,?V0 + 2
   \   00010D   FB           MOV     R3,A
   \   00010E   12....       LCALL   ??osal_mem_alloc?relay
   \   000111   8A..         MOV     ?V0 + 8,R2
   \   000113   8B..         MOV     ?V0 + 9,R3
   1485            if ( buf == NULL )
   \   000115   EA           MOV     A,R2
   \   000116   45..         ORL     A,?V0 + 9
   \   000118   7005         JNZ     ??ZDP_MgmtLqiRsp_2
   1486            {
   1487              return afStatus_MEM_FAIL;
   \   00011A   7910         MOV     R1,#0x10
   \   00011C   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1488            }
   1489          
   1490            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00011F   8A82         MOV     DPL,R2
   \   000121   8B83         MOV     DPH,R3
   \   000123   A3           INC     DPTR
   \   000124   8582..       MOV     ?V0 + 6,DPL
   \   000127   8583..       MOV     ?V0 + 7,DPH
   1491          
   1492            *pBuf++ = Status;
   \   00012A   E4           CLR     A
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   1493            *pBuf++ = NeighborLqiEntries;
   \   00012D   E5..         MOV     A,?V0 + 15
   \   00012F   F0           MOVX    @DPTR,A
   \   000130   A3           INC     DPTR
   1494            *pBuf++ = StartIndex;
   \   000131   E5..         MOV     A,?V0 + 10
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A3           INC     DPTR
   1495            *pBuf++ = NeighborLqiCount;
   \   000135   E5..         MOV     A,?V0 + 11
   \   000137   F0           MOVX    @DPTR,A
   \   000138   A3           INC     DPTR
   \   000139   AE82         MOV     R6,DPL
   \   00013B   AF83         MOV     R7,DPH
   1496          
   1497            for ( x = 0; x < NeighborLqiCount; x++ )
   \   00013D   7003         JNZ     $+5
   \   00013F   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   \   000142   F5..         MOV     ?V0 + 10,A
   1498            {
   1499              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000144                ; Setup parameters for call to function sAddrExtCpy
   \   000144   E5..         MOV     A,?V0 + 0
   \   000146   2402         ADD     A,#0x2
   \   000148   FC           MOV     R4,A
   \   000149   E5..         MOV     A,?V0 + 1
   \   00014B   3400         ADDC    A,#0x0
   \   00014D   FD           MOV     R5,A
   \   00014E   EE           MOV     A,R6
   \   00014F   FA           MOV     R2,A
   \   000150   EF           MOV     A,R7
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   ??sAddrExtCpy?relay
   1500              pBuf += Z_EXTADDR_LEN;
   1501          
   1502              // EXTADDR
   1503              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   000155                ; Setup parameters for call to function sAddrExtCpy
   \   000155   E5..         MOV     A,?V0 + 0
   \   000157   240A         ADD     A,#0xa
   \   000159   FC           MOV     R4,A
   \   00015A   E5..         MOV     A,?V0 + 1
   \   00015C   3400         ADDC    A,#0x0
   \   00015E   FD           MOV     R5,A
   \   00015F   EE           MOV     A,R6
   \   000160   2408         ADD     A,#0x8
   \   000162   FA           MOV     R2,A
   \   000163   EF           MOV     A,R7
   \   000164   3400         ADDC    A,#0x0
   \   000166   FB           MOV     R3,A
   \   000167   12....       LCALL   ??sAddrExtCpy?relay
   \   00016A   8A..         MOV     ?V0 + 12,R2
   \   00016C   8B..         MOV     ?V0 + 13,R3
   \   00016E   AE..         MOV     R6,?V0 + 12
   \   000170   AF..         MOV     R7,?V0 + 13
   1504          
   1505              // NWKADDR
   1506              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   000172   E5..         MOV     A,?V0 + 0
   \   000174   2412         ADD     A,#0x12
   \   000176   F8           MOV     R0,A
   \   000177   E5..         MOV     A,?V0 + 1
   \   000179   3400         ADDC    A,#0x0
   \   00017B   F9           MOV     R1,A
   \   00017C   8882         MOV     DPL,R0
   \   00017E   8983         MOV     DPH,R1
   \   000180   E0           MOVX    A,@DPTR
   \   000181   8E82         MOV     DPL,R6
   \   000183   8F83         MOV     DPH,R7
   \   000185   F0           MOVX    @DPTR,A
   \   000186   A3           INC     DPTR
   \   000187   AE82         MOV     R6,DPL
   \   000189   AF83         MOV     R7,DPH
   1507              *pBuf++ = HI_UINT16( list->nwkAddr );
   \   00018B   8882         MOV     DPL,R0
   \   00018D   8983         MOV     DPH,R1
   \   00018F   A3           INC     DPTR
   \   000190   E0           MOVX    A,@DPTR
   \   000191   8E82         MOV     DPL,R6
   \   000193   8F83         MOV     DPH,R7
   \   000195   F0           MOVX    @DPTR,A
   \   000196   A3           INC     DPTR
   \   000197   0E           INC     R6
   \   000198   AF83         MOV     R7,DPH
   1508          
   1509              // DEVICETYPE
   1510              *pBuf = list->devType;
   \   00019A   E5..         MOV     A,?V0 + 0
   \   00019C   2414         ADD     A,#0x14
   \   00019E   F582         MOV     DPL,A
   \   0001A0   E5..         MOV     A,?V0 + 1
   \   0001A2   3400         ADDC    A,#0x0
   \   0001A4   F583         MOV     DPH,A
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   8E82         MOV     DPL,R6
   \   0001A9   8F83         MOV     DPH,R7
   \   0001AB   F0           MOVX    @DPTR,A
   1511          
   1512              // RXONIDLE
   1513              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   0001AC   E5..         MOV     A,?V0 + 0
   \   0001AE   2415         ADD     A,#0x15
   \   0001B0   F582         MOV     DPL,A
   \   0001B2   E5..         MOV     A,?V0 + 1
   \   0001B4   3400         ADDC    A,#0x0
   \   0001B6   F583         MOV     DPH,A
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   33           RLC     A
   \   0001BA   33           RLC     A
   \   0001BB   54FC         ANL     A,#0xfc
   \   0001BD   F8           MOV     R0,A
   \   0001BE   8E82         MOV     DPL,R6
   \   0001C0   8F83         MOV     DPH,R7
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   48           ORL     A,R0
   \   0001C4   F0           MOVX    @DPTR,A
   1514          
   1515              // RELATIONSHIP
   1516              *pBuf++ |= (uint8)(list->relation << 4);
   \   0001C5   EE           MOV     A,R6
   \   0001C6   F8           MOV     R0,A
   \   0001C7   EF           MOV     A,R7
   \   0001C8   F9           MOV     R1,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   0E           INC     R6
   \   0001CB   AF83         MOV     R7,DPH
   \   0001CD   E5..         MOV     A,?V0 + 0
   \   0001CF   2416         ADD     A,#0x16
   \   0001D1   F582         MOV     DPL,A
   \   0001D3   E5..         MOV     A,?V0 + 1
   \   0001D5   3400         ADDC    A,#0x0
   \   0001D7   F583         MOV     DPH,A
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   C4           SWAP    A
   \   0001DB   54F0         ANL     A,#0xf0
   \   0001DD   FA           MOV     R2,A
   \   0001DE   8882         MOV     DPL,R0
   \   0001E0   8983         MOV     DPH,R1
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   4A           ORL     A,R2
   \   0001E4   F0           MOVX    @DPTR,A
   1517          
   1518              // PERMITJOINING
   1519              *pBuf++ = (uint8)(list->permit);
   \   0001E5   E5..         MOV     A,?V0 + 0
   \   0001E7   2417         ADD     A,#0x17
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E5..         MOV     A,?V0 + 1
   \   0001ED   3400         ADDC    A,#0x0
   \   0001EF   F583         MOV     DPH,A
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   8E82         MOV     DPL,R6
   \   0001F4   8F83         MOV     DPH,R7
   \   0001F6   F0           MOVX    @DPTR,A
   \   0001F7   A3           INC     DPTR
   \   0001F8   0E           INC     R6
   \   0001F9   AF83         MOV     R7,DPH
   1520          
   1521              // DEPTH
   1522              *pBuf++ = list->depth;
   \   0001FB   E5..         MOV     A,?V0 + 0
   \   0001FD   2418         ADD     A,#0x18
   \   0001FF   F582         MOV     DPL,A
   \   000201   E5..         MOV     A,?V0 + 1
   \   000203   3400         ADDC    A,#0x0
   \   000205   F583         MOV     DPH,A
   \   000207   E0           MOVX    A,@DPTR
   \   000208   8E82         MOV     DPL,R6
   \   00020A   8F83         MOV     DPH,R7
   \   00020C   F0           MOVX    @DPTR,A
   \   00020D   A3           INC     DPTR
   \   00020E   0E           INC     R6
   \   00020F   AF83         MOV     R7,DPH
   1523          
   1524              // LQI
   1525              *pBuf++ = list->lqi;
   \   000211   E5..         MOV     A,?V0 + 0
   \   000213   2419         ADD     A,#0x19
   \   000215   F582         MOV     DPL,A
   \   000217   E5..         MOV     A,?V0 + 1
   \   000219   3400         ADDC    A,#0x0
   \   00021B   F583         MOV     DPH,A
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   8E82         MOV     DPL,R6
   \   000220   8F83         MOV     DPH,R7
   \   000222   F0           MOVX    @DPTR,A
   \   000223   A3           INC     DPTR
   \   000224   0E           INC     R6
   \   000225   AF83         MOV     R7,DPH
   1526          
   1527              list++; // next list entry
   \   000227   E5..         MOV     A,?V0 + 0
   \   000229   241A         ADD     A,#0x1a
   \   00022B   F5..         MOV     ?V0 + 0,A
   \   00022D   E5..         MOV     A,?V0 + 1
   \   00022F   3400         ADDC    A,#0x0
   \   000231   F5..         MOV     ?V0 + 1,A
   1528            }
   \   000233   15..         DEC     ?V0 + 10
   \   000235   E5..         MOV     A,?V0 + 10
   \   000237   6003         JZ      $+5
   \   000239   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1529          
   1530            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00023C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00023F   E5..         MOV     A,?V0 + 6
   \   000241   F0           MOVX    @DPTR,A
   \   000242   A3           INC     DPTR
   \   000243   E5..         MOV     A,?V0 + 7
   \   000245   F0           MOVX    @DPTR,A
   \   000246                ; Setup parameters for call to function osal_memset
   \   000246   7C0C         MOV     R4,#0xc
   \   000248   7D00         MOV     R5,#0x0
   \   00024A   7900         MOV     R1,#0x0
   \   00024C   7401         MOV     A,#0x1
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   AA82         MOV     R2,DPL
   \   000253   AB83         MOV     R3,DPH
   \   000255   12....       LCALL   ??osal_memset?relay
   \   000258   740A         MOV     A,#0xa
   \   00025A   12....       LCALL   ?XSTACK_DISP0_8
   \   00025D   E4           CLR     A
   \   00025E   F0           MOVX    @DPTR,A
   \   00025F   85..82       MOV     DPL,?V0 + 4
   \   000262   85..83       MOV     DPH,?V0 + 5
   \   000265   A3           INC     DPTR
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   A3           INC     DPTR
   \   000269   A3           INC     DPTR
   \   00026A   A3           INC     DPTR
   \   00026B   A3           INC     DPTR
   \   00026C   A3           INC     DPTR
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   C0E0         PUSH    A
   \   000270   7409         MOV     A,#0x9
   \   000272   12....       LCALL   ?XSTACK_DISP0_8
   \   000275   D0E0         POP     A
   \   000277   F0           MOVX    @DPTR,A
   \   000278   85..82       MOV     DPL,?V0 + 4
   \   00027B   85..83       MOV     DPH,?V0 + 5
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   F8           MOV     R0,A
   \   000280   A3           INC     DPTR
   \   000281   E0           MOVX    A,@DPTR
   \   000282   F9           MOV     R1,A
   \   000283   7401         MOV     A,#0x1
   \   000285   12....       LCALL   ?XSTACK_DISP0_8
   \   000288   E8           MOV     A,R0
   \   000289   F0           MOVX    @DPTR,A
   \   00028A   A3           INC     DPTR
   \   00028B   E9           MOV     A,R1
   \   00028C   F0           MOVX    @DPTR,A
   \   00028D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000290   E0           MOVX    A,@DPTR
   \   000291   24FF         ADD     A,#-0x1
   \   000293   F5..         MOV     ?V0 + 4,A
   \   000295   A3           INC     DPTR
   \   000296   E0           MOVX    A,@DPTR
   \   000297   34FF         ADDC    A,#-0x1
   \   000299   F5..         MOV     ?V0 + 5,A
   \   00029B   85..82       MOV     DPL,?XSP + 0
   \   00029E   85..83       MOV     DPH,?XSP + 1
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   85..82       MOV     DPL,?V0 + 4
   \   0002A5   85..83       MOV     DPH,?V0 + 5
   \   0002A8   F0           MOVX    @DPTR,A
   \   0002A9                ; Setup parameters for call to function AF_DataRequest
   \   0002A9   75..1E       MOV     ?V0 + 0,#0x1e
   \   0002AC   78..         MOV     R0,#?V0 + 0
   \   0002AE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002B1   7401         MOV     A,#0x1
   \   0002B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B6   8582..       MOV     ?V0 + 0,DPL
   \   0002B9   8583..       MOV     ?V0 + 1,DPH
   \   0002BC   78..         MOV     R0,#?V0 + 0
   \   0002BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C1   78..         MOV     R0,#?V0 + 4
   \   0002C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C6   78..         MOV     R0,#?V0 + 2
   \   0002C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CB   75..31       MOV     ?V0 + 0,#0x31
   \   0002CE   75..80       MOV     ?V0 + 1,#-0x80
   \   0002D1   78..         MOV     R0,#?V0 + 0
   \   0002D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D6   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   F9           MOV     R1,A
   \   0002DB   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0002DD   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0002DF   740A         MOV     A,#0xa
   \   0002E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E4   AA82         MOV     R2,DPL
   \   0002E6   AB83         MOV     R3,DPH
   \   0002E8   12....       LCALL   ??AF_DataRequest?relay
   \   0002EB   7409         MOV     A,#0x9
   \   0002ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002F0   E9           MOV     A,R1
   \   0002F1   FE           MOV     R6,A
   \   0002F2                ; Setup parameters for call to function osal_mem_free
   \   0002F2   AA..         MOV     R2,?V0 + 8
   \   0002F4   AB..         MOV     R3,?V0 + 9
   \   0002F6   12....       LCALL   ??osal_mem_free?relay
   \   0002F9   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0002FC   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0002FE   F0           MOVX    @DPTR,A
   \   0002FF   A3           INC     DPTR
   \   000300   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000302   F0           MOVX    @DPTR,A
   \   000303   EE           MOV     A,R6
   \   000304   F9           MOV     R1,A
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000305   740D         MOV     A,#0xd
   \   000307   02....       LJMP    ?Subroutine7 & 0xFFFF
   1531          }
   1532          
   1533          /*********************************************************************
   1534           * @fn          ZDP_MgmtRtgRsp
   1535           *
   1536           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1537           *              function sends a unicast message.
   1538           *
   1539           * @param       dstAddr - destination address of the message
   1540           * @param       Status - message status (ZDP_SUCCESS or other)
   1541           * @param       RoutingTableEntries - Total number of entries
   1542           * @param       StartIndex - Starting index within the reporting list
   1543           * @param       RoutingTableListCount - number of entries included
   1544           *                                      in this message
   1545           * @param       RoutingTableList - List of Routing Table entries
   1546           * @param       SecurityEnable - true to enable security for this message
   1547           *
   1548           * @return      ZStatus_t
   1549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1550          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1551                                      byte Status,
   1552                                      byte RoutingTableEntries,
   1553                                      byte StartIndex,
   1554                                      byte RoutingListCount,
   1555                                      rtgItem_t *RoutingTableList,
   1556                                      byte SecurityEnable )
   1557          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   8C..         MOV     ?V0 + 8,R4
   \   000018   8D..         MOV     ?V0 + 3,R5
   \   00001A   7421         MOV     A,#0x21
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 2,A
   \   000022   7422         MOV     A,#0x22
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 9,A
   \   00002A   7423         MOV     A,#0x23
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 4,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 5,A
   1558            uint8 *buf;
   1559            uint8 *pBuf;
   1560            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1561            byte len = 1 + 1 + 1 + 1;
   1562            byte x;
   1563          
   1564            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1565          
   1566            // Add an array for Routing List data
   1567            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000036   75F005       MOV     B,#0x5
   \   000039   E5..         MOV     A,?V0 + 9
   \   00003B   A4           MUL     AB
   \   00003C   2404         ADD     A,#0x4
   1568          
   1569            buf = osal_mem_alloc( (short)(len+1) );
   \   00003E   2401         ADD     A,#0x1
   \   000040   FE           MOV     R6,A
   \   000041   E4           CLR     A
   \   000042   3400         ADDC    A,#0x0
   \   000044   FF           MOV     R7,A
   \   000045                ; Setup parameters for call to function osal_mem_alloc
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??osal_mem_alloc?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   1570            if ( buf == NULL )
   \   000050   EA           MOV     A,R2
   \   000051   45..         ORL     A,?V0 + 1
   \   000053   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1571            {
   1572              return afStatus_MEM_FAIL;
   \   000055   7910         MOV     R1,#0x10
   \   000057   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1573            }
   1574          
   1575            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   A3           INC     DPTR
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   1576          
   1577            *pBuf++ = Status;
   \   000063   E5..         MOV     A,?V0 + 8
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   1578            *pBuf++ = RoutingTableEntries;
   \   000067   E5..         MOV     A,?V0 + 3
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   1579            *pBuf++ = StartIndex;
   \   00006B   E5..         MOV     A,?V0 + 2
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   1580            *pBuf++ = RoutingListCount;
   \   00006F   E5..         MOV     A,?V0 + 9
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   A882         MOV     R0,DPL
   \   000075   A983         MOV     R1,DPH
   1581          
   1582            for ( x = 0; x < RoutingListCount; x++ )
   \   000077   6072         JZ      ??ZDP_MgmtRtgRsp_2
   \   000079   F5..         MOV     ?V0 + 2,A
   1583            {
   1584              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   00007B   85..82       MOV     DPL,?V0 + 4
   \   00007E   85..83       MOV     DPH,?V0 + 5
   \   000081   E0           MOVX    A,@DPTR
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   A882         MOV     R0,DPL
   \   00008A   A983         MOV     R1,DPH
   1585              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \   00008C   85..82       MOV     DPL,?V0 + 4
   \   00008F   85..83       MOV     DPH,?V0 + 5
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   8882         MOV     DPL,R0
   \   000096   8983         MOV     DPH,R1
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   08           INC     R0
   \   00009B   A983         MOV     R1,DPH
   1586              *pBuf++ = RoutingTableList->status;
   \   00009D   85..82       MOV     DPL,?V0 + 4
   \   0000A0   85..83       MOV     DPH,?V0 + 5
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   8882         MOV     DPL,R0
   \   0000AB   8983         MOV     DPH,R1
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   08           INC     R0
   \   0000B0   A983         MOV     R1,DPH
   1587              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   0000B2   E5..         MOV     A,?V0 + 4
   \   0000B4   2402         ADD     A,#0x2
   \   0000B6   FC           MOV     R4,A
   \   0000B7   E5..         MOV     A,?V0 + 5
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   FD           MOV     R5,A
   \   0000BC   8C82         MOV     DPL,R4
   \   0000BE   8D83         MOV     DPH,R5
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   08           INC     R0
   \   0000C8   A983         MOV     R1,DPH
   1588              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000CA   8C82         MOV     DPL,R4
   \   0000CC   8D83         MOV     DPH,R5
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   08           INC     R0
   \   0000D7   A983         MOV     R1,DPH
   1589              RoutingTableList++;    // Move to next list entry
   \   0000D9   E5..         MOV     A,?V0 + 4
   \   0000DB   2406         ADD     A,#0x6
   \   0000DD   F5..         MOV     ?V0 + 4,A
   \   0000DF   E5..         MOV     A,?V0 + 5
   \   0000E1   3400         ADDC    A,#0x0
   \   0000E3   F5..         MOV     ?V0 + 5,A
   1590            }
   \   0000E5   15..         DEC     ?V0 + 2
   \   0000E7   E5..         MOV     A,?V0 + 2
   \   0000E9   7090         JNZ     ??ZDP_MgmtRtgRsp_3
   1591          
   1592            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000EB   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000EE   EA           MOV     A,R2
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   EB           MOV     A,R3
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3                ; Setup parameters for call to function osal_memset
   \   0000F3   7C0C         MOV     R4,#0xc
   \   0000F5   7D00         MOV     R5,#0x0
   \   0000F7   7900         MOV     R1,#0x0
   \   0000F9   7401         MOV     A,#0x1
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   AA82         MOV     R2,DPL
   \   000100   AB83         MOV     R3,DPH
   \   000102   12....       LCALL   ??osal_memset?relay
   \   000105   740A         MOV     A,#0xa
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E4           CLR     A
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   85..82       MOV     DPL,?V0 + 6
   \   00010F   85..83       MOV     DPH,?V0 + 7
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   C0E0         PUSH    A
   \   00011D   7409         MOV     A,#0x9
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   \   000125   85..82       MOV     DPL,?V0 + 6
   \   000128   85..83       MOV     DPH,?V0 + 7
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F8           MOV     R0,A
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F9           MOV     R1,A
   \   000130   7401         MOV     A,#0x1
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E8           MOV     A,R0
   \   000136   F0           MOVX    @DPTR,A
   \   000137   A3           INC     DPTR
   \   000138   E9           MOV     A,R1
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   24FF         ADD     A,#-0x1
   \   000140   F5..         MOV     ?V0 + 6,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   34FF         ADDC    A,#-0x1
   \   000146   F5..         MOV     ?V0 + 7,A
   \   000148   85..82       MOV     DPL,?XSP + 0
   \   00014B   85..83       MOV     DPH,?XSP + 1
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   85..82       MOV     DPL,?V0 + 6
   \   000152   85..83       MOV     DPH,?V0 + 7
   \   000155   F0           MOVX    @DPTR,A
   \   000156                ; Setup parameters for call to function AF_DataRequest
   \   000156   75..1E       MOV     ?V0 + 4,#0x1e
   \   000159   78..         MOV     R0,#?V0 + 4
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015E   7401         MOV     A,#0x1
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   8582..       MOV     ?V0 + 4,DPL
   \   000166   8583..       MOV     ?V0 + 5,DPH
   \   000169   78..         MOV     R0,#?V0 + 4
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   78..         MOV     R0,#?V0 + 6
   \   000170   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000173   8E..         MOV     ?V0 + 4,R6
   \   000175   8F..         MOV     ?V0 + 5,R7
   \   000177   78..         MOV     R0,#?V0 + 4
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   75..32       MOV     ?V0 + 4,#0x32
   \   00017F   75..80       MOV     ?V0 + 5,#-0x80
   \   000182   78..         MOV     R0,#?V0 + 4
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000187   90....       MOV     DPTR,#ZDP_TxOptions
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F9           MOV     R1,A
   \   00018C   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   00018E   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000190   740A         MOV     A,#0xa
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   AA82         MOV     R2,DPL
   \   000197   AB83         MOV     R3,DPH
   \   000199   12....       LCALL   ??AF_DataRequest?relay
   \   00019C   7409         MOV     A,#0x9
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1   E9           MOV     A,R1
   \   0001A2   FE           MOV     R6,A
   \   0001A3                ; Setup parameters for call to function osal_mem_free
   \   0001A3   AA..         MOV     R2,?V0 + 0
   \   0001A5   AB..         MOV     R3,?V0 + 1
   \   0001A7   12....       LCALL   ??osal_mem_free?relay
   \   0001AA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001AD   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   EE           MOV     A,R6
   \   0001B5   F9           MOV     R1,A
   \                     ??ZDP_MgmtRtgRsp_1:
   \   0001B6   740D         MOV     A,#0xd
   \   0001B8   02....       LJMP    ?Subroutine2 & 0xFFFF
   1593          }
   1594          
   1595          /*********************************************************************
   1596           * @fn          ZDP_MgmtBindRsp
   1597           *
   1598           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1599           *              function sends a unicast message.
   1600           *
   1601           * @param       dstAddr - destination address of the message
   1602           * @param       Status - message status (ZDP_SUCCESS or other)
   1603           * @param       BindingTableEntries - Total number of entries
   1604           * @param       StartIndex - Starting index within the reporting list
   1605           * @param       BindingTableListCount - number of entries included
   1606           *                                 in this message
   1607           * @param       BindingTableList - List of Binding Table entries
   1608           * @param       SecurityEnable - Security Options
   1609           *
   1610           * @return      ZStatus_t
   1611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1613                                      byte Status,
   1614                                      byte BindingTableEntries,
   1615                                      byte StartIndex,
   1616                                      byte BindingTableListCount,
   1617                                      apsBindingItem_t *BindingTableList,
   1618                                      byte SecurityEnable )
   1619          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   8C..         MOV     ?V0 + 12,R4
   \   000018   8D..         MOV     ?V0 + 8,R5
   \   00001A   7422         MOV     A,#0x22
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 0,A
   \   000022   7423         MOV     A,#0x23
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 9,A
   \   00002A   7424         MOV     A,#0x24
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FE           MOV     R6,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FF           MOV     R7,A
   1620            uint8 *buf;
   1621            uint8 *pBuf;
   1622            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1623            uint8 len;    // Actual length varies due to different addrMode
   1624            uint8 x;
   1625            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1626            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1627          
   1628            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1629          
   1630            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1631            maxLen = 1 + 1 + 1 + 1;
   1632            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1633            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   75F015       MOV     B,#0x15
   \   000037   E5..         MOV     A,?V0 + 9
   \   000039   A4           MUL     AB
   \   00003A   2405         ADD     A,#0x5
   \   00003C   FA           MOV     R2,A
   \   00003D   E4           CLR     A
   \   00003E   3400         ADDC    A,#0x0
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   ??osal_mem_alloc?relay
   \   000044   8A..         MOV     ?V0 + 2,R2
   \   000046   8B..         MOV     ?V0 + 3,R3
   1634          
   1635            if ( buf == NULL )
   \   000048   EA           MOV     A,R2
   \   000049   45..         ORL     A,?V0 + 3
   \   00004B   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1636            {
   1637              return afStatus_MEM_FAIL;
   \   00004D   7910         MOV     R1,#0x10
   \   00004F   02....       LJMP    ??ZDP_MgmtBindRsp_1 & 0xFFFF
   1638            }
   1639          
   1640            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   A3           INC     DPTR
   \   000057   8582..       MOV     ?V0 + 4,DPL
   \   00005A   8583..       MOV     ?V0 + 5,DPH
   1641          
   1642            *pBuf++ = Status;
   \   00005D   E5..         MOV     A,?V0 + 12
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   1643            *pBuf++ = BindingTableEntries;
   \   000061   E5..         MOV     A,?V0 + 8
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   1644            *pBuf++ = StartIndex;
   \   000065   E5..         MOV     A,?V0 + 0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   1645            *pBuf++ = BindingTableListCount;
   \   000069   E5..         MOV     A,?V0 + 9
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   1646          
   1647            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1648            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1649            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1650            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1651          
   1652            len = 1 + 1 + 1 + 1;
   \   000071   75..04       MOV     ?V0 + 0,#0x4
   1653            for ( x = 0; x < BindingTableListCount; x++ )
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??ZDP_MgmtBindRsp_2 & 0xFFFF
   \   000079   F5..         MOV     ?V0 + 1,A
   1654            {
   1655              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   \                     ??ZDP_MgmtBindRsp_3:
   \   00007B                ; Setup parameters for call to function sAddrExtCpy
   \   00007B   EE           MOV     A,R6
   \   00007C   FC           MOV     R4,A
   \   00007D   EF           MOV     A,R7
   \   00007E   FD           MOV     R5,A
   \   00007F   12....       LCALL   ??sAddrExtCpy?relay
   1656              *pBuf++ = BindingTableList->srcEP;
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   8A82         MOV     DPL,R2
   \   000091   8B83         MOV     DPH,R3
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   1657          
   1658              // Cluster ID
   1659              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   \   000099   EE           MOV     A,R6
   \   00009A   2409         ADD     A,#0x9
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   F9           MOV     R1,A
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   0A           INC     R2
   \   0000AD   AB83         MOV     R3,DPH
   1660              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   0A           INC     R2
   \   0000BC   AB83         MOV     R3,DPH
   1661          
   1662              *pBuf++ = BindingTableList->dstAddr.addrMode;
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2413         ADD     A,#0x13
   \   0000C1   F8           MOV     R0,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   3400         ADDC    A,#0x0
   \   0000C5   F9           MOV     R1,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   8A82         MOV     DPL,R2
   \   0000CD   8B83         MOV     DPH,R3
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   0A           INC     R2
   \   0000D2   AB83         MOV     R3,DPH
   1663              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   \   0000D4   EE           MOV     A,R6
   \   0000D5   240B         ADD     A,#0xb
   \   0000D7   FC           MOV     R4,A
   \   0000D8   EF           MOV     A,R7
   \   0000D9   3400         ADDC    A,#0x0
   \   0000DB   FD           MOV     R5,A
   \   0000DC   8882         MOV     DPL,R0
   \   0000DE   8983         MOV     DPH,R1
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6403         XRL     A,#0x3
   \   0000E3   701E         JNZ     ??ZDP_MgmtBindRsp_4
   1664              {
   1665                len += extZdpBindEntrySize;
   \   0000E5   7415         MOV     A,#0x15
   \   0000E7   25..         ADD     A,?V0 + 0
   \   0000E9   F5..         MOV     ?V0 + 0,A
   1666                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   \   0000EB                ; Setup parameters for call to function sAddrExtCpy
   \   0000EB   12....       LCALL   ??sAddrExtCpy?relay
   1667                *pBuf++ = BindingTableList->dstEP;
   \   0000EE   EE           MOV     A,R6
   \   0000EF   2414         ADD     A,#0x14
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   EF           MOV     A,R7
   \   0000F4   3400         ADDC    A,#0x0
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   8A82         MOV     DPL,R2
   \   0000FB   8B83         MOV     DPH,R3
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   AA82         MOV     R2,DPL
   \   000101   8021         SJMP    ??ZDP_MgmtBindRsp_5
   1668              }
   1669              else
   1670              {
   1671                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_4:
   \   000103   740E         MOV     A,#0xe
   \   000105   25..         ADD     A,?V0 + 0
   \   000107   F5..         MOV     ?V0 + 0,A
   1672                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000109   8C82         MOV     DPL,R4
   \   00010B   8D83         MOV     DPH,R5
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   8A82         MOV     DPL,R2
   \   000110   8B83         MOV     DPH,R3
   \   000112   F0           MOVX    @DPTR,A
   \   000113   A3           INC     DPTR
   \   000114   0A           INC     R2
   \   000115   AB83         MOV     R3,DPH
   1673                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000117   8C82         MOV     DPL,R4
   \   000119   8D83         MOV     DPH,R5
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   8A82         MOV     DPL,R2
   \   00011F   8B83         MOV     DPH,R3
   \   000121   F0           MOVX    @DPTR,A
   \   000122   A3           INC     DPTR
   \   000123   0A           INC     R2
   \                     ??ZDP_MgmtBindRsp_5:
   \   000124   AB83         MOV     R3,DPH
   1674              }
   1675              BindingTableList++;    // Move to next list entry
   \   000126   EE           MOV     A,R6
   \   000127   2415         ADD     A,#0x15
   \   000129   FE           MOV     R6,A
   \   00012A   EF           MOV     A,R7
   \   00012B   3400         ADDC    A,#0x0
   \   00012D   FF           MOV     R7,A
   1676            }
   \   00012E   15..         DEC     ?V0 + 1
   \   000130   E5..         MOV     A,?V0 + 1
   \   000132   6003         JZ      $+5
   \   000134   02....       LJMP    ??ZDP_MgmtBindRsp_3 & 0xFFFF
   1677          
   1678            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_2:
   \   000137   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00013A   E5..         MOV     A,?V0 + 4
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   E5..         MOV     A,?V0 + 5
   \   000140   F0           MOVX    @DPTR,A
   \   000141                ; Setup parameters for call to function osal_memset
   \   000141   7C0C         MOV     R4,#0xc
   \   000143   7D00         MOV     R5,#0x0
   \   000145   7900         MOV     R1,#0x0
   \   000147   7401         MOV     A,#0x1
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   AA82         MOV     R2,DPL
   \   00014E   AB83         MOV     R3,DPH
   \   000150   12....       LCALL   ??osal_memset?relay
   \   000153   740A         MOV     A,#0xa
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   E4           CLR     A
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   85..82       MOV     DPL,?V0 + 6
   \   00015D   85..83       MOV     DPH,?V0 + 7
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   C0E0         PUSH    A
   \   00016B   7409         MOV     A,#0x9
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   D0E0         POP     A
   \   000172   F0           MOVX    @DPTR,A
   \   000173   85..82       MOV     DPL,?V0 + 6
   \   000176   85..83       MOV     DPH,?V0 + 7
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F8           MOV     R0,A
   \   00017B   A3           INC     DPTR
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   F9           MOV     R1,A
   \   00017E   7401         MOV     A,#0x1
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   E8           MOV     A,R0
   \   000184   F0           MOVX    @DPTR,A
   \   000185   A3           INC     DPTR
   \   000186   E9           MOV     A,R1
   \   000187   F0           MOVX    @DPTR,A
   \   000188   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   24FF         ADD     A,#-0x1
   \   00018E   F5..         MOV     ?V0 + 6,A
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   34FF         ADDC    A,#-0x1
   \   000194   F5..         MOV     ?V0 + 7,A
   \   000196   85..82       MOV     DPL,?XSP + 0
   \   000199   85..83       MOV     DPH,?XSP + 1
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   85..82       MOV     DPL,?V0 + 6
   \   0001A0   85..83       MOV     DPH,?V0 + 7
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4                ; Setup parameters for call to function AF_DataRequest
   \   0001A4   75..1E       MOV     ?V0 + 4,#0x1e
   \   0001A7   78..         MOV     R0,#?V0 + 4
   \   0001A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AC   7401         MOV     A,#0x1
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   8582..       MOV     ?V0 + 4,DPL
   \   0001B4   8583..       MOV     ?V0 + 5,DPH
   \   0001B7   78..         MOV     R0,#?V0 + 4
   \   0001B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BC   78..         MOV     R0,#?V0 + 6
   \   0001BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C1   85....       MOV     ?V0 + 4,?V0 + 0
   \   0001C4   E5..         MOV     A,?V0 + 4
   \   0001C6   2401         ADD     A,#0x1
   \   0001C8   F5..         MOV     ?V0 + 4,A
   \   0001CA   E4           CLR     A
   \   0001CB   3400         ADDC    A,#0x0
   \   0001CD   F5..         MOV     ?V0 + 5,A
   \   0001CF   78..         MOV     R0,#?V0 + 4
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D4   75..33       MOV     ?V0 + 4,#0x33
   \   0001D7   75..80       MOV     ?V0 + 5,#-0x80
   \   0001DA   78..         MOV     R0,#?V0 + 4
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DF   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F9           MOV     R1,A
   \   0001E4   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0001E6   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0001E8   740A         MOV     A,#0xa
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   AA82         MOV     R2,DPL
   \   0001EF   AB83         MOV     R3,DPH
   \   0001F1   12....       LCALL   ??AF_DataRequest?relay
   \   0001F4   7409         MOV     A,#0x9
   \   0001F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F9   E9           MOV     A,R1
   \   0001FA   FE           MOV     R6,A
   \   0001FB                ; Setup parameters for call to function osal_mem_free
   \   0001FB   AA..         MOV     R2,?V0 + 2
   \   0001FD   AB..         MOV     R3,?V0 + 3
   \   0001FF   12....       LCALL   ??osal_mem_free?relay
   \   000202   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000205   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000207   F0           MOVX    @DPTR,A
   \   000208   A3           INC     DPTR
   \   000209   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   EE           MOV     A,R6
   \   00020D   F9           MOV     R1,A
   \                     ??ZDP_MgmtBindRsp_1:
   \   00020E   740D         MOV     A,#0xd
   \   000210   02....       LJMP    ?Subroutine8 & 0xFFFF
   1679          }
   1680          
   1681          /*********************************************************************
   1682           * @fn          ZDP_MgmtNwkUpdateNotify
   1683           *
   1684           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1685           *              function sends a unicast message.
   1686           *
   1687           * @param       dstAddr - destination address of the message
   1688           * @param       status - message status (ZDP_SUCCESS or other)
   1689           * @param       scannedChannels - List of channels scanned by the request
   1690           * @param       totalTransmissions - Total transmissions
   1691           * @param       transmissionFailures - Sum of transmission failures
   1692           * @param       listCount - Number of records contained in the energyValues list
   1693           * @param       energyValues - List of descriptors, one for each of ListCount,
   1694           *                             of the enegry detect descriptors
   1695           * @param       txOptions - Transmit options
   1696           * @param       securityEnable - Security options
   1697           *
   1698           * @return      afStatus_t
   1699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1700          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1701                                              uint8 status, uint32 scannedChannels,
   1702                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1703                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1704                                              uint8 securityEnable )
   1705          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EC           MOV     A,R4
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8D..         MOV     ?V0 + 8,R5
   \   000025   7428         MOV     A,#0x28
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   12....       LCALL   ?L_MOV_X
   \   00002F   742C         MOV     A,#0x2c
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FE           MOV     R6,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FF           MOV     R7,A
   \   000039   742E         MOV     A,#0x2e
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V0 + 1,A
   \   000045   7430         MOV     A,#0x30
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0 + 14,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 15,A
   \   000051   7432         MOV     A,#0x32
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 9,A
   1706            uint8 *buf;
   1707            uint8 *pBuf;
   1708            uint8 len;
   1709          
   1710            (void)securityEnable;  // Intentionally unreferenced parameter
   1711          
   1712            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1713            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   000059   740A         MOV     A,#0xa
   \   00005B   25..         ADD     A,?V0 + 8
   1714          
   1715            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00005D   2401         ADD     A,#0x1
   \   00005F   F5..         MOV     ?V0 + 2,A
   \   000061   E4           CLR     A
   \   000062   3400         ADDC    A,#0x0
   \   000064   F5..         MOV     ?V0 + 3,A
   \   000066                ; Setup parameters for call to function osal_mem_alloc
   \   000066   AA..         MOV     R2,?V0 + 2
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   ??osal_mem_alloc?relay
   \   00006C   8A..         MOV     ?V0 + 12,R2
   \   00006E   8B..         MOV     ?V0 + 13,R3
   1716            if ( buf == NULL )
   \   000070   EA           MOV     A,R2
   \   000071   45..         ORL     A,?V0 + 13
   \   000073   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1717            {
   1718              return afStatus_MEM_FAIL;
   \   000075   7910         MOV     R1,#0x10
   \   000077   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1719            }
   1720          
   1721            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   A3           INC     DPTR
   \   00007F   8582..       MOV     ?V0 + 10,DPL
   \   000082   8583..       MOV     ?V0 + 11,DPH
   \   000085   AA..         MOV     R2,?V0 + 10
   \   000087   AB..         MOV     R3,?V0 + 11
   1722          
   1723            *pBuf++ = status;
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   8A82         MOV     DPL,R2
   \   000091   8B83         MOV     DPH,R3
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   0A           INC     R2
   \   000096   AB83         MOV     R3,DPH
   1724          
   1725            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \   000098                ; Setup parameters for call to function osal_buffer_uint32
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00009D   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000A0   7404         MOV     A,#0x4
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   1726          
   1727            *pBuf++ = LO_UINT16( totalTransmissions );
   \   0000A5   EE           MOV     A,R6
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   1728            *pBuf++ = HI_UINT16( totalTransmissions );
   \   0000AC   EF           MOV     A,R7
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   1729          
   1730            *pBuf++ = LO_UINT16( transmissionFailures );
   \   0000AF   E5..         MOV     A,?V0 + 0
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   1731            *pBuf++ = HI_UINT16( transmissionFailures );
   \   0000B3   E5..         MOV     A,?V0 + 1
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   1732          
   1733            *pBuf++ = listCount;
   \   0000B7   E5..         MOV     A,?V0 + 8
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   AA82         MOV     R2,DPL
   \   0000BD   AB83         MOV     R3,DPH
   1734          
   1735            if ( listCount > 0 )
   \   0000BF   601D         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1736              osal_memcpy( pBuf, energyValues, listCount );
   \   0000C1                ; Setup parameters for call to function osal_memcpy
   \   0000C1   85....       MOV     ?V0 + 4,?V0 + 14
   \   0000C4   85....       MOV     ?V0 + 5,?V0 + 15
   \   0000C7   75..00       MOV     ?V0 + 6,#0x0
   \   0000CA   78..         MOV     R0,#?V0 + 4
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CF   85....       MOV     ?V0 + 0,?V0 + 8
   \   0000D2   AC..         MOV     R4,?V0 + 0
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   12....       LCALL   ??osal_memcpy?relay
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   1737          
   1738            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   0000DE   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000E1   E5..         MOV     A,?V0 + 10
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E5..         MOV     A,?V0 + 11
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   E5..         MOV     A,?V0 + 9
   \   0000EA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE                ; Setup parameters for call to function osal_memset
   \   0000EE   7C0C         MOV     R4,#0xc
   \   0000F0   7D00         MOV     R5,#0x0
   \   0000F2   7900         MOV     R1,#0x0
   \   0000F4   7404         MOV     A,#0x4
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   AA82         MOV     R2,DPL
   \   0000FB   AB83         MOV     R3,DPH
   \   0000FD   12....       LCALL   ??osal_memset?relay
   \   000100   740D         MOV     A,#0xd
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E4           CLR     A
   \   000106   F0           MOVX    @DPTR,A
   \   000107   7402         MOV     A,#0x2
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F8           MOV     R0,A
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F583         MOV     DPH,A
   \   000112   8882         MOV     DPL,R0
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C0E0         PUSH    A
   \   00011F   740C         MOV     A,#0xc
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
   \   000127   7402         MOV     A,#0x2
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F8           MOV     R0,A
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F583         MOV     DPH,A
   \   000132   8882         MOV     DPL,R0
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F9           MOV     R1,A
   \   000139   7404         MOV     A,#0x4
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E8           MOV     A,R0
   \   00013F   F0           MOVX    @DPTR,A
   \   000140   A3           INC     DPTR
   \   000141   E9           MOV     A,R1
   \   000142   F0           MOVX    @DPTR,A
   \   000143   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000146   E0           MOVX    A,@DPTR
   \   000147   24FF         ADD     A,#-0x1
   \   000149   F5..         MOV     ?V0 + 4,A
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   34FF         ADDC    A,#-0x1
   \   00014F   F5..         MOV     ?V0 + 5,A
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   E0           MOVX    A,@DPTR
   \   000158   85..82       MOV     DPL,?V0 + 4
   \   00015B   85..83       MOV     DPH,?V0 + 5
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F                ; Setup parameters for call to function AF_DataRequest
   \   00015F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000162   78..         MOV     R0,#?V0 + 0
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000167   7401         MOV     A,#0x1
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   8582..       MOV     ?V0 + 0,DPL
   \   00016F   8583..       MOV     ?V0 + 1,DPH
   \   000172   78..         MOV     R0,#?V0 + 0
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000177   78..         MOV     R0,#?V0 + 4
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   78..         MOV     R0,#?V0 + 2
   \   00017E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000181   75..38       MOV     ?V0 + 0,#0x38
   \   000184   75..80       MOV     ?V0 + 1,#-0x80
   \   000187   78..         MOV     R0,#?V0 + 0
   \   000189   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F9           MOV     R1,A
   \   000191   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000193   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000195   740D         MOV     A,#0xd
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   AA82         MOV     R2,DPL
   \   00019C   AB83         MOV     R3,DPH
   \   00019E   12....       LCALL   ??AF_DataRequest?relay
   \   0001A1   7409         MOV     A,#0x9
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A6   E9           MOV     A,R1
   \   0001A7   FE           MOV     R6,A
   \   0001A8                ; Setup parameters for call to function osal_mem_free
   \   0001A8   AA..         MOV     R2,?V0 + 12
   \   0001AA   AB..         MOV     R3,?V0 + 13
   \   0001AC   12....       LCALL   ??osal_mem_free?relay
   \   0001AF   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001B2   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001B8   F0           MOVX    @DPTR,A
   \   0001B9   90....       MOV     DPTR,#ZDP_TxOptions
   \   0001BC   E4           CLR     A
   \   0001BD   F0           MOVX    @DPTR,A
   \   0001BE   EE           MOV     A,R6
   \   0001BF   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0001C0   7410         MOV     A,#0x10
   \   0001C2                REQUIRE ?Subroutine7
   \   0001C2                ; // Fall through to label ?Subroutine7
   1739          }
   1740          
   1741          /*********************************************************************
   1742           * Functions to register for ZDO Over-the-air messages
   1743           */
   1744          
   1745          /*********************************************************************
   1746           * @fn          ZDO_RegisterForZDOMsg
   1747           *
   1748           * @brief       Call this function to register of an incoming over
   1749           *              the air ZDO message - probably a response message
   1750           *              but requests can also be received.
   1751           *              Messages are delivered to the task with ZDO_CB_MSG
   1752           *              as the message ID.
   1753           *
   1754           * @param       taskID - Where you would like the message delivered
   1755           * @param       clusterID - What message?
   1756           *
   1757           * @return      ZSuccess - successful, ZMemError if not
   1758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1759          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1760          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   1761            ZDO_MsgCB_t *pList;
   1762            ZDO_MsgCB_t *pLast;
   1763            ZDO_MsgCB_t *pNew;
   1764          
   1765            // Look for duplicate
   1766            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   800C         SJMP    ??ZDO_RegisterForZDOMsg_0
   1767            while ( pList )
   1768            {
   1769              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1770                return ( ZSuccess );
   1771              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000018   E8           MOV     A,R0
   \   000019   FE           MOV     R6,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FF           MOV     R7,A
   1772              pList = (ZDO_MsgCB_t *)pList->next;
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000024   F9           MOV     R1,A
   \   000025   E8           MOV     A,R0
   \   000026   49           ORL     A,R1
   \   000027   6021         JZ      ??ZDO_RegisterForZDOMsg_2
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   65..         XRL     A,?V0 + 2
   \   000032   70E4         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   65..         XRL     A,?V0 + 0
   \   00003E   7004         JNZ     ??ZDO_RegisterForZDOMsg_3
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   65..         XRL     A,?V0 + 1
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000044   70D2         JNZ     ??ZDO_RegisterForZDOMsg_1
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000046   7900         MOV     R1,#0x0
   \   000048   8050         SJMP    ??ZDO_RegisterForZDOMsg_5
   1773            }
   1774          
   1775            // Add to the list
   1776            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00004A                ; Setup parameters for call to function osal_mem_alloc
   \   00004A   7A05         MOV     R2,#0x5
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??osal_mem_alloc?relay
   \   000051   8A..         MOV     ?V0 + 4,R2
   \   000053   8B..         MOV     ?V0 + 5,R3
   \   000055   A8..         MOV     R0,?V0 + 4
   \   000057   A9..         MOV     R1,?V0 + 5
   1777            if ( pNew )
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   603B         JZ      ??ZDO_RegisterForZDOMsg_6
   1778            {
   1779              pNew->taskID = taskID;
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E5..         MOV     A,?V0 + 2
   \   000065   F0           MOVX    @DPTR,A
   1780              pNew->clusterID = clusterID;
   \   000066   8882         MOV     DPL,R0
   \   000068   8983         MOV     DPH,R1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E5..         MOV     A,?V0 + 0
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   E5..         MOV     A,?V0 + 1
   \   000073   F0           MOVX    @DPTR,A
   1781              pNew->next = NULL;
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   F0           MOVX    @DPTR,A
   1782              if ( zdoMsgCBs )
   \   00007C   90....       MOV     DPTR,#zdoMsgCBs
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FA           MOV     R2,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   FB           MOV     R3,A
   \   000084   EA           MOV     A,R2
   \   000085   4B           ORL     A,R3
   \   000086   600B         JZ      ??ZDO_RegisterForZDOMsg_7
   1783              {
   1784                pLast->next = pNew;
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \                     ??ZDO_RegisterForZDOMsg_8:
   \   00008C   E8           MOV     A,R0
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E9           MOV     A,R1
   \   000090   F0           MOVX    @DPTR,A
   \   000091   80B3         SJMP    ??ZDO_RegisterForZDOMsg_4
   1785              }
   1786              else
   1787                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   000093   90....       MOV     DPTR,#zdoMsgCBs
   \   000096   80F4         SJMP    ??ZDO_RegisterForZDOMsg_8
   1788              return ( ZSuccess );
   1789            }
   1790            else
   1791              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000098   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   00009A   02....       LJMP    ??Subroutine15_0 & 0xFFFF
   1792          }
   1793          
   1794          /*********************************************************************
   1795           * @fn          ZDO_RemoveRegisteredCB
   1796           *
   1797           * @brief       Call this function if you don't want to receive the
   1798           *              incoming message.
   1799           *
   1800           * @param       taskID - Where the messages are being delivered.
   1801           * @param       clusterID - What message?
   1802           *
   1803           * @return      ZSuccess - successful, ZFailure if not found
   1804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1805          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1806          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1807            ZDO_MsgCB_t *pList;
   1808            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1809          
   1810            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1811            while ( pList )
   1812            {
   1813              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1814              {
   1815                if ( pLast )
   1816                {
   1817                  // remove this one from the linked list
   1818                  pLast->next = pList->next;
   1819                }
   1820                else if ( pList->next )
   1821                {
   1822                  // remove the first one from the linked list
   1823                  zdoMsgCBs = pList->next;
   1824                }
   1825                else
   1826                {
   1827                  // remove the only item from the list
   1828                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1829                }
   1830                osal_mem_free( pList );
   1831                return ( ZSuccess );
   1832              }
   1833              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1834              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6E           XRL     A,R6
   \   000029   70E5         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6A           XRL     A,R2
   \   000034   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000039   70D5         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00003B   8882         MOV     DPL,R0
   \   00003D   8983         MOV     DPH,R1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FB           MOV     R3,A
   \   000044   EC           MOV     A,R4
   \   000045   4D           ORL     A,R5
   \   000046   600A         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000048   8C82         MOV     DPL,R4
   \   00004A   8D83         MOV     DPH,R5
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   00004C   EA           MOV     A,R2
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   EB           MOV     A,R3
   \   000050   800A         SJMP    ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000052   EA           MOV     A,R2
   \   000053   4B           ORL     A,R3
   \   000054   90....       MOV     DPTR,#zdoMsgCBs
   \   000057   70F3         JNZ     ??ZDO_RemoveRegisteredCB_5
   \   000059   E4           CLR     A
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   E8           MOV     A,R0
   \   00005E   FA           MOV     R2,A
   \   00005F   E9           MOV     A,R1
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   ??osal_mem_free?relay
   \   000064   7900         MOV     R1,#0x0
   \   000066   8002         SJMP    ??ZDO_RemoveRegisteredCB_7
   1835            }
   1836          
   1837            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000068   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00006A   7F01         MOV     R7,#0x1
   \   00006C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1838          }
   1839          
   1840          /*********************************************************************
   1841           * @fn          ZDO_SendMsgCBs
   1842           *
   1843           * @brief       This function sends messages to registered tasks.
   1844           *              Local to ZDO and shouldn't be called outside of ZDO.
   1845           *
   1846           * @param       inMsg - incoming message
   1847           *
   1848           * @return      TRUE if sent to at least 1 task, FALSE if not
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1851          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   1852            uint8 ret = FALSE;
   \   000005   75..00       MOV     ?V0 + 3,#0x0
   1853            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   000008   90....       MOV     DPTR,#zdoMsgCBs
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FE           MOV     R6,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FF           MOV     R7,A
   \   000010   EA           MOV     A,R2
   \   000011   2413         ADD     A,#0x13
   \   000013   F5..         MOV     ?V0 + 14,A
   \   000015   EB           MOV     A,R3
   \   000016   3400         ADDC    A,#0x0
   \   000018   F5..         MOV     ?V0 + 15,A
   \   00001A   8A..         MOV     ?V0 + 0,R2
   \   00001C   8B..         MOV     ?V0 + 1,R3
   \   00001E   75..00       MOV     ?V0 + 2,#0x0
   \   000021   EA           MOV     A,R2
   \   000022   2410         ADD     A,#0x10
   \   000024   F5..         MOV     ?V0 + 6,A
   \   000026   EB           MOV     A,R3
   \   000027   3400         ADDC    A,#0x0
   \   000029   F5..         MOV     ?V0 + 7,A
   \   00002B   EA           MOV     A,R2
   \   00002C   240C         ADD     A,#0xc
   \   00002E   F5..         MOV     ?V0 + 12,A
   \   000030   EB           MOV     A,R3
   \   000031   3400         ADDC    A,#0x0
   \   000033   F5..         MOV     ?V0 + 13,A
   1854            while ( pList )
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1855            {
   1856              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_1:
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   85..82       MOV     DPL,?V0 + 12
   \   00004B   85..83       MOV     DPH,?V0 + 13
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000055   6003         JZ      $+5
   \   000057   02....       LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
   1857              {
   1858                zdoIncomingMsg_t *msgPtr;
   1859          
   1860                // Send the address to the task
   1861                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   00005A                ; Setup parameters for call to function osal_msg_allocate
   \   00005A   85..82       MOV     DPL,?V0 + 6
   \   00005D   85..83       MOV     DPH,?V0 + 7
   \   000060   E0           MOVX    A,@DPTR
   \   000061   2415         ADD     A,#0x15
   \   000063   FA           MOV     R2,A
   \   000064   E4           CLR     A
   \   000065   3400         ADDC    A,#0x0
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   ??osal_msg_allocate?relay
   \   00006B   8A..         MOV     ?V0 + 4,R2
   \   00006D   8B..         MOV     ?V0 + 5,R3
   1862                if ( msgPtr )
   \   00006F   EA           MOV     A,R2
   \   000070   45..         ORL     A,?V0 + 5
   \   000072   6077         JZ      ??ZDO_SendMsgCBs_3
   1863                {
   1864                  // copy struct
   1865                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000079   7C15         MOV     R4,#0x15
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   12....       LCALL   ??osal_memcpy?relay
   \   000080   7403         MOV     A,#0x3
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   1866          
   1867                  if ( inMsg->asduLen )
   \   000085   85..82       MOV     DPL,?V0 + 6
   \   000088   85..83       MOV     DPH,?V0 + 7
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6042         JZ      ??ZDO_SendMsgCBs_4
   1868                  {
   1869                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00008E   E5..         MOV     A,?V0 + 4
   \   000090   2415         ADD     A,#0x15
   \   000092   FA           MOV     R2,A
   \   000093   E5..         MOV     A,?V0 + 5
   \   000095   3400         ADDC    A,#0x0
   \   000097   FB           MOV     R3,A
   \   000098   E5..         MOV     A,?V0 + 4
   \   00009A   2413         ADD     A,#0x13
   \   00009C   F582         MOV     DPL,A
   \   00009E   E5..         MOV     A,?V0 + 5
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   EB           MOV     A,R3
   \   0000A8   F0           MOVX    @DPTR,A
   1870                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000A9                ; Setup parameters for call to function osal_memcpy
   \   0000A9   85..82       MOV     DPL,?V0 + 14
   \   0000AC   85..83       MOV     DPH,?V0 + 15
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F5..         MOV     ?V0 + 8,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V0 + 9,A
   \   0000B6   75..00       MOV     ?V0 + 10,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 8
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   85..82       MOV     DPL,?V0 + 6
   \   0000C1   85..83       MOV     DPH,?V0 + 7
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FC           MOV     R4,A
   \   0000C6   7D00         MOV     R5,#0x0
   \   0000C8   12....       LCALL   ??osal_memcpy?relay
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   1871                  }
   1872          
   1873                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000D0   85..82       MOV     DPL,?V0 + 4
   \   0000D3   85..83       MOV     DPH,?V0 + 5
   \   0000D6   74D3         MOV     A,#-0x2d
   \   0000D8   F0           MOVX    @DPTR,A
   1874                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000D9                ; Setup parameters for call to function osal_msg_send
   \   0000D9   AA..         MOV     R2,?V0 + 4
   \   0000DB   AB..         MOV     R3,?V0 + 5
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   12....       LCALL   ??osal_msg_send?relay
   1875                  ret = TRUE;
   \   0000E8   75..01       MOV     ?V0 + 3,#0x1
   1876                }
   1877              }
   1878              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_3:
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   FE           MOV     R6,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   FF           MOV     R7,A
   \   0000F4   EE           MOV     A,R6
   \   0000F5   4F           ORL     A,R7
   \   0000F6   6003         JZ      $+5
   \   0000F8   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1879            }
   1880            return ( ret );
   \                     ??ZDO_SendMsgCBs_0:
   \   0000FB   A9..         MOV     R1,?V0 + 3
   \   0000FD   02....       LJMP    ??Subroutine16_0 & 0xFFFF
   1881          }
   1882          
   1883          /*********************************************************************
   1884           * Incoming message processor
   1885           */
   1886          
   1887          /*********************************************************************
   1888           * @fn          ZDP_IncomingData
   1889           *
   1890           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1891           *              from the APS sub-layer to the ZDO.
   1892           *
   1893           * @param       pData - Incoming Message
   1894           *
   1895           * @return      none
   1896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1897          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1898          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1899            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1900            uint8 handled;
   1901            zdoIncomingMsg_t inMsg;
   1902          
   1903            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   F0           MOVX    @DPTR,A
   1904            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E9           MOV     A,R1
   \   00002C   F0           MOVX    @DPTR,A
   1905            inMsg.wasBroadcast = pData->wasBroadcast;
   \   00002D   EA           MOV     A,R2
   \   00002E   2415         ADD     A,#0x15
   \   000030   F582         MOV     DPL,A
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   740B         MOV     A,#0xb
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   1906            inMsg.clusterID = pData->clusterId;
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   740C         MOV     A,#0xc
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E9           MOV     A,R1
   \   000058   F0           MOVX    @DPTR,A
   1907            inMsg.SecurityUse = pData->SecurityUse;
   \   000059   EA           MOV     A,R2
   \   00005A   2419         ADD     A,#0x19
   \   00005C   F582         MOV     DPL,A
   \   00005E   EB           MOV     A,R3
   \   00005F   3400         ADDC    A,#0x0
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C0E0         PUSH    A
   \   000066   740E         MOV     A,#0xe
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   1908          
   1909            inMsg.asduLen = pData->cmd.DataLength-1;
   \   00006E   EA           MOV     A,R2
   \   00006F   241F         ADD     A,#0x1f
   \   000071   F582         MOV     DPL,A
   \   000073   EB           MOV     A,R3
   \   000074   3400         ADDC    A,#0x0
   \   000076   F583         MOV     DPH,A
   \   000078   E0           MOVX    A,@DPTR
   \   000079   14           DEC     A
   \   00007A   C0E0         PUSH    A
   \   00007C   7410         MOV     A,#0x10
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
   1910            inMsg.asdu = pData->cmd.Data+1;
   \   000084   EA           MOV     A,R2
   \   000085   2421         ADD     A,#0x21
   \   000087   F8           MOV     R0,A
   \   000088   EB           MOV     A,R3
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F9           MOV     R1,A
   \   00008C   8882         MOV     DPL,R0
   \   00008E   8983         MOV     DPH,R1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   2401         ADD     A,#0x1
   \   000093   FC           MOV     R4,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   3400         ADDC    A,#0x0
   \   000098   FD           MOV     R5,A
   \   000099   7413         MOV     A,#0x13
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   EC           MOV     A,R4
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   ED           MOV     A,R5
   \   0000A2   F0           MOVX    @DPTR,A
   1911            inMsg.TransSeq = pData->cmd.Data[0];
   \   0000A3   8882         MOV     DPL,R0
   \   0000A5   8983         MOV     DPH,R1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F8           MOV     R0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F583         MOV     DPH,A
   \   0000AD   8882         MOV     DPL,R0
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C0E0         PUSH    A
   \   0000B2   740F         MOV     A,#0xf
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
   1912            inMsg.macDestAddr = pData->macDestAddr;
   \   0000BA   EA           MOV     A,R2
   \   0000BB   2412         ADD     A,#0x12
   \   0000BD   F582         MOV     DPL,A
   \   0000BF   EB           MOV     A,R3
   \   0000C0   3400         ADDC    A,#0x0
   \   0000C2   F583         MOV     DPH,A
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   7411         MOV     A,#0x11
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E8           MOV     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E9           MOV     A,R1
   \   0000D2   F0           MOVX    @DPTR,A
   1913          
   1914            handled = ZDO_SendMsgCBs( &inMsg );
   \   0000D3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \   0000D9   AA82         MOV     R2,DPL
   \   0000DB   AB83         MOV     R3,DPH
   \   0000DD   12....       LCALL   ??ZDO_SendMsgCBs?relay
   \   0000E0   E9           MOV     A,R1
   \   0000E1   FF           MOV     R7,A
   \   0000E2   740C         MOV     A,#0xc
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   FC           MOV     R4,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FD           MOV     R5,A
   \   0000EC   8001         SJMP    ??ZDP_IncomingData_0
   1915          
   1916          #if (defined MT_ZDO_CB_FUNC)
   1917          #if !defined MT_TASK
   1918            if (zgZdoDirectCB)
   1919          #endif
   1920            {
   1921              MT_ZdoDirectCB( pData, &inMsg );
   1922            }
   1923          #endif
   1924          
   1925            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1926            {
   1927              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1928              {
   1929                zdpMsgProcs[x].pFn( &inMsg );
   1930                return;
   1931              }
   1932              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000EE   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000EF   8E..         MOV     ?V0 + 0,R6
   \   0000F1   75..00       MOV     ?V0 + 1,#0x0
   \   0000F4   7402         MOV     A,#0x2
   \   0000F6   78..         MOV     R0,#?V0 + 0
   \   0000F8   12....       LCALL   ?S_SHL
   \   0000FB   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000FD   25..         ADD     A,?V0 + 0
   \   0000FF   F8           MOV     R0,A
   \   000100   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   000102   35..         ADDC    A,?V0 + 1
   \   000104   F9           MOV     R1,A
   \   000105   8882         MOV     DPL,R0
   \   000107   8983         MOV     DPH,R1
   \   000109   E4           CLR     A
   \   00010A   93           MOVC    A,@A+DPTR
   \   00010B   C0E0         PUSH    A
   \   00010D   7401         MOV     A,#0x1
   \   00010F   93           MOVC    A,@A+DPTR
   \   000110   F583         MOV     DPH,A
   \   000112   D082         POP     DPL
   \   000114   AA82         MOV     R2,DPL
   \   000116   AB83         MOV     R3,DPH
   \   000118   74FF         MOV     A,#-0x1
   \   00011A   6A           XRL     A,R2
   \   00011B   7003         JNZ     ??ZDP_IncomingData_2
   \   00011D   74FF         MOV     A,#-0x1
   \   00011F   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   000120   6028         JZ      ??ZDP_IncomingData_3
   \   000122   EC           MOV     A,R4
   \   000123   6A           XRL     A,R2
   \   000124   7002         JNZ     ??ZDP_IncomingData_4
   \   000126   ED           MOV     A,R5
   \   000127   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   000128   70C4         JNZ     ??ZDP_IncomingData_1
   \   00012A                ; Setup parameters for indirect call
   \   00012A   85..82       MOV     DPL,?XSP + 0
   \   00012D   85..83       MOV     DPH,?XSP + 1
   \   000130   AA82         MOV     R2,DPL
   \   000132   AB83         MOV     R3,DPH
   \   000134   8882         MOV     DPL,R0
   \   000136   8983         MOV     DPH,R1
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E4           CLR     A
   \   00013B   93           MOVC    A,@A+DPTR
   \   00013C   C0E0         PUSH    A
   \   00013E   7401         MOV     A,#0x1
   \   000140   93           MOVC    A,@A+DPTR
   \   000141   F583         MOV     DPH,A
   \   000143   D082         POP     DPL
   \   000145   12....       LCALL   ?CALL_IND
   \   000148   8010         SJMP    ??ZDP_IncomingData_5
   1933            }
   1934          
   1935            // Handle unhandled messages
   1936            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00014A   EF           MOV     A,R7
   \   00014B   700D         JNZ     ??ZDP_IncomingData_5
   1937              ZDApp_InMsgCB( &inMsg );
   \   00014D                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00014D   85..82       MOV     DPL,?XSP + 0
   \   000150   85..83       MOV     DPH,?XSP + 1
   \   000153   AA82         MOV     R2,DPL
   \   000155   AB83         MOV     R3,DPH
   \   000157   12....       LCALL   ??ZDApp_InMsgCB?relay
   \                     ??ZDP_IncomingData_5:
   \   00015A   7415         MOV     A,#0x15
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015F   7F02         MOV     R7,#0x2
   \   000161   02....       LJMP    ?BANKED_LEAVE_XDATA
   1938          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1939          
   1940          /*********************************************************************
   1941          *********************************************************************/
   1942          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     ZDO_RegisterForZDOMsg        1      0     14
       -> osal_mem_alloc          0      0     28
     ZDO_RemoveRegisteredCB       0      0      9
       -> osal_mem_free           0      0     18
     ZDO_SendMsgCBs               0      0     58
       -> osal_msg_allocate       0      0     48
       -> osal_memcpy             0      0     54
       -> osal_memcpy             0      0     54
       -> osal_msg_send           0      0     48
     ZDP_BindUnbindReq            1      0     50
       -> sAddrExtCpy             0      0     66
       -> sAddrExtCpy             2      0     66
       -> osal_memset             0      0     66
       -> AF_DataRequest          0      0     84
     ZDP_DeviceAnnce              1      0     34
       -> sAddrExtCpy             0      0     48
       -> osal_memset             0      0     48
       -> AF_DataRequest          0      0     66
     ZDP_EPRsp                    1      0     47
       -> osal_memcpy             0      0     68
       -> osal_memset             0      0     62
       -> AF_DataRequest          0      0     80
     ZDP_EndDeviceBindReq         1      0     54
       -> NLME_GetShortAddr       0      0     72
       -> NLME_GetExtAddr         0      0     72
       -> sAddrExtCpy             0      0     72
       -> osal_memset             0      0     72
       -> AF_DataRequest          0      0     90
     ZDP_GenericRsp               1      0     42
       -> osal_memset             0      0     58
       -> AF_DataRequest          0      0     76
     ZDP_IEEEAddrReq              1      0     35
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     ZDP_IncomingData             1      0     31
       -> ZDO_SendMsgCBs          0      0     62
       -> ZDApp_InMsgCB           0      0     62
     ZDP_MatchDescReq             1      0     49
       -> osal_memset             0      0     64
       -> AF_DataRequest          0      0     82
     ZDP_MgmtBindRsp              1      0     48
       -> osal_mem_alloc          0      0     68
       -> sAddrExtCpy             0      0     68
       -> sAddrExtCpy             0      0     68
       -> osal_memset             0      0     68
       -> AF_DataRequest          0      0     86
       -> osal_mem_free           0      0     68
     ZDP_MgmtDirectJoinReq        1      0     36
       -> sAddrExtCpy             0      0     52
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     ZDP_MgmtLeaveReq             1      0     37
       -> sAddrExtCpy             0      0     52
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     ZDP_MgmtLqiRsp               1      0     51
       -> osal_memset             0      0     74
       -> AF_DataRequest          0      0     92
       -> osal_mem_alloc          0      0     74
       -> sAddrExtCpy             0      0     74
       -> sAddrExtCpy             0      0     74
       -> osal_memset             0      0     74
       -> AF_DataRequest          0      0     92
       -> osal_mem_free           0      0     74
     ZDP_MgmtNwkDiscReq           1      0     41
       -> osal_buffer_uint32      0      0     64
       -> osal_memset             0      0     56
       -> AF_DataRequest          0      0     74
     ZDP_MgmtNwkDiscRsp           1      0     49
       -> osal_mem_alloc          0      0     70
       -> sAddrExtCpy             0      0     70
       -> osal_memset             0      0     70
       -> AF_DataRequest          0      0     88
       -> osal_mem_free           0      0     70
     ZDP_MgmtNwkUpdateNotify      1      0     61
       -> osal_mem_alloc          0      0     80
       -> osal_buffer_uint32      0      0     88
       -> osal_memcpy             0      0     86
       -> osal_memset             0      0     80
       -> AF_DataRequest          0      0     98
       -> osal_mem_free           0      0     80
     ZDP_MgmtNwkUpdateReq         1      0     45
       -> osal_buffer_uint32      0      0     68
       -> osal_memset             0      0     60
       -> AF_DataRequest          0      0     78
     ZDP_MgmtPermitJoinReq        1      0     35
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     ZDP_MgmtRtgRsp               1      0     47
       -> osal_mem_alloc          0      0     66
       -> osal_memset             0      0     66
       -> AF_DataRequest          0      0     84
       -> osal_mem_free           0      0     66
     ZDP_NWKAddrOfInterestReq     1      0     36
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     ZDP_NodeDescMsg              1      0     36
       -> osal_memset             0      0     50
       -> AF_DataRequest          0      0     68
     ZDP_NwkAddrReq               1      0     39
       -> sAddrExtCmp             0      0     60
       -> sAddrExtCpy             0      0     60
       -> osal_memset             0      0     60
       -> AF_DataRequest          0      0     78
     ZDP_PowerDescMsg             1      0     36
       -> osal_memset             0      0     50
       -> AF_DataRequest          0      0     68
     ZDP_SendData                 1      0     43
       -> osal_memset             0      0     58
       -> AF_DataRequest          0      0     76
     ZDP_ServerDiscReq            1      0     33
       -> osal_memset             0      0     48
       -> AF_DataRequest          0      0     66
     ZDP_ServerDiscRsp            1      0     40
       -> osal_memset             0      0     54
       -> AF_DataRequest          0      0     72
     ZDP_SimpleDescMsg            2      0     39
       -> osal_memset             0      0     60
       -> AF_DataRequest          0      0     78
     ZDP_SimpleDescReq            1      0     36
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     ZDP_UserDescRsp              1      0     43
       -> osal_memcpy             0      0     68
       -> osal_memset             0      0     62
       -> AF_DataRequest          0      0     80
     ZDP_UserDescSet              1      0     42
       -> osal_memcpy             2      0     68
       -> osal_memset             0      0     62
       -> osal_memset             0      0     62
       -> AF_DataRequest          0      0     80
     zdpProcessAddrReq            1      0     57
       -> sAddrExtCmp             0      0     96
       -> AssocGetWithExt         0      0     96
       -> AssocGetWithShort       0      0     96
       -> AddrMgrEntryGet         0      0     96
       -> sAddrExtCpy             0      0     96
       -> AssocMakeList           0      0     96
       -> osal_mem_free           0      0     96
       -> osal_memset             0      0     96
       -> AF_DataRequest          0      0    114


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     ZDP_AF_ENDPOINT                     1
     ZDP_TransID                         1
     ZDP_Buf                            80
     ZDP_TmpBuf                          2
     ZDP_TxOptions                       1
     zdoMsgCBs                           2
     zdpMsgProcs                        48
     ZDP_SendData                      294
     ZDP_NWKAddrOfInterestReq          178
     ?Subroutine0                        5
     ??Subroutine13_0                   28
     ??Subroutine14_0                    3
     ??Subroutine15_0                    5
     ZDP_NwkAddrReq                    206
     ?Subroutine1                       26
     ??Subroutine11_0                    2
     ??Subroutine12_0                    8
     ZDP_IEEEAddrReq                   148
     ?Subroutine9                        8
     ZDP_MatchDescReq                  466
     ?Subroutine2                        8
     ZDP_SimpleDescReq                 188
     ZDP_UserDescSet                   319
     ZDP_ServerDiscReq                 187
     ?Subroutine3                       10
     ZDP_DeviceAnnce                   221
     zdpProcessAddrReq                 912
     ?Subroutine4                        8
     ZDP_NodeDescMsg                   435
     ?Subroutine5                       44
     ZDP_PowerDescMsg                  251
     ZDP_SimpleDescMsg                 722
     ZDP_EPRsp                         331
     ?Subroutine10                       5
     ZDP_UserDescRsp                   318
     ZDP_ServerDiscRsp                 240
     ZDP_GenericRsp                    267
     ?Subroutine6                        8
     ZDP_EndDeviceBindReq              487
     ?Subroutine7                        3
     ??Subroutine16_0                    5
     ZDP_BindUnbindReq                 394
     ?Subroutine8                        8
     ZDP_MgmtNwkDiscReq                228
     ZDP_MgmtDirectJoinReq             184
     ZDP_MgmtPermitJoinReq             176
     ZDP_MgmtLeaveReq                  206
     ZDP_MgmtNwkUpdateReq              272
     ZDP_MgmtNwkDiscRsp                549
     ZDP_MgmtLqiRsp                    778
     ZDP_MgmtRtgRsp                    443
     ZDP_MgmtBindRsp                   531
     ZDP_MgmtNwkUpdateNotify           450
     ZDO_RegisterForZDOMsg             157
     ZDO_RemoveRegisteredCB            111
     ZDO_SendMsgCBs                    256
     ZDP_IncomingData                  356
     ?<Initializer for ZDP_TmpBuf>       2
     ??ZDP_SendData?relay                6
     ??ZDP_NWKAddrOfInterestReq?relay    6
     ??ZDP_NwkAddrReq?relay              6
     ??ZDP_IEEEAddrReq?relay             6
     ??ZDP_MatchDescReq?relay            6
     ??ZDP_SimpleDescReq?relay           6
     ??ZDP_UserDescSet?relay             6
     ??ZDP_ServerDiscReq?relay           6
     ??ZDP_DeviceAnnce?relay             6
     ??zdpProcessAddrReq?relay           6
     ??ZDP_NodeDescMsg?relay             6
     ??ZDP_PowerDescMsg?relay            6
     ??ZDP_SimpleDescMsg?relay           6
     ??ZDP_EPRsp?relay                   6
     ??ZDP_UserDescRsp?relay             6
     ??ZDP_ServerDiscRsp?relay           6
     ??ZDP_GenericRsp?relay              6
     ??ZDP_EndDeviceBindReq?relay        6
     ??ZDP_BindUnbindReq?relay           6
     ??ZDP_MgmtNwkDiscReq?relay          6
     ??ZDP_MgmtDirectJoinReq?relay       6
     ??ZDP_MgmtPermitJoinReq?relay       6
     ??ZDP_MgmtLeaveReq?relay            6
     ??ZDP_MgmtNwkUpdateReq?relay        6
     ??ZDP_MgmtNwkDiscRsp?relay          6
     ??ZDP_MgmtLqiRsp?relay              6
     ??ZDP_MgmtRtgRsp?relay              6
     ??ZDP_MgmtBindRsp?relay             6
     ??ZDP_MgmtNwkUpdateNotify?relay     6
     ??ZDO_RegisterForZDOMsg?relay       6
     ??ZDO_RemoveRegisteredCB?relay      6
     ??ZDO_SendMsgCBs?relay              6
     ??ZDP_IncomingData?relay            6

 
 11 445 bytes in segment BANKED_CODE
    198 bytes in segment BANK_RELAYS
     49 bytes in segment CODE_C
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
     84 bytes in segment XDATA_Z
 
 11 694 bytes of CODE  memory
     86 bytes of XDATA memory

Errors: none
Warnings: none
