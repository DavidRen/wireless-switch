###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:47 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\mt\MT_TASK.c                                #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\mt\MT_TASK.c" -D ZIGBEEPRO -D ZTOOL_P1 -D  #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\MT_TASK.lst                                 #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\MT_TASK.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2009-11-09 20:03:17 -0800 (Mon, 09 Nov 2009) $
      4            Revision:       $Revision: 21106 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          #include "MT_ZDO.h"
     51          
     52          #include "hal_uart.h"
     53          
     54          #include "OSAL_Memory.h"
     55          
     56          /***************************************************************************************************
     57           * LOCAL FUNCTIONS
     58           ***************************************************************************************************/
     59          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     60          
     61          /***************************************************************************************************
     62           * GLOBALS
     63           ***************************************************************************************************/
     64          
     65          /***************************************************************************************************
     66           * @fn      MT_TaskInit
     67           *
     68           * @brief  MonitorTest Task Initialization.  This function is put into the
     69           *         task table.
     70           *
     71           * @param   byte task_id - task ID of the MT Task
     72           *
     73           * @return  void
     74           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     76          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     77            /* Initialize the Serial port */
     78            MT_UartInit();
   \   000007                ; Setup parameters for call to function MT_UartInit
   \   000007   12....       LCALL   ??MT_UartInit?relay
     79          
     80            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     81            MT_UartRegisterTaskID(task_id);
   \   00000A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ??MT_UartRegisterTaskID?relay
     82          
     83            /* Initialize MT */
     84            MT_Init(task_id);
   \   00000F                ; Setup parameters for call to function MT_Init
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??MT_Init?relay
     85          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
     86          
     87          /***************************************************************************************************
     88           * @fn      MT_ProcessEvent
     89           *
     90           * @brief MonitorTest Task Event Processor.  This task is put into the task table.
     91           *
     92           * @param   byte task_id - task ID of the MT Task
     93           * @param   UINT16 events - event(s) for the MT Task
     94           *
     95           * @return  void
     96           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
     98          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     99            uint8 *msg_ptr;
    100            
    101            (void)task_id;  // Intentionally unreferenced parameter
    102          
    103            /* Could be multiple events, so switch won't work */
    104            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7019         JNZ     ??MT_ProcessEvent_0
    105            {
    106              while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
    107              {
    108                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
    109              }
    110          
    111              /* Return unproccessed events */
    112              return (events ^ SYS_EVENT_MSG);
    113            }
    114          
    115            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \   00000D   EE           MOV     A,R6
   \   00000E   5404         ANL     A,#0x4
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??MT_ProcessEvent_1 & 0xFFFF
    116            {
    117              /* Return unproccessed events */
    118              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   000015   EE           MOV     A,R6
   \   000016   6404         XRL     A,#0x4
   \   000018   FA           MOV     R2,A
   \   000019   02....       LJMP    ??MT_ProcessEvent_2 & 0xFFFF
   \                     ??MT_ProcessEvent_3:
   \   00001C                ; Setup parameters for call to function MT_ProcessIncoming
   \   00001C   12....       LCALL   ??MT_ProcessIncoming?relay
   \                     ??MT_ProcessEvent_4:
   \   00001F                ; Setup parameters for call to function osal_msg_deallocate
   \   00001F   AA..         MOV     R2,?V0 + 2
   \   000021   AB..         MOV     R3,?V0 + 3
   \   000023   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??MT_ProcessEvent_0:
   \   000026                ; Setup parameters for call to function osal_msg_receive
   \   000026   90....       MOV     DPTR,#MT_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_msg_receive?relay
   \   00002E   8A..         MOV     ?V0 + 2,R2
   \   000030   8B..         MOV     ?V0 + 3,R3
   \   000032   EA           MOV     A,R2
   \   000033   45..         ORL     A,?V0 + 3
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??MT_ProcessEvent_5 & 0xFFFF
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FB           MOV     R3,A
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   85..82       MOV     DPL,?V0 + 2
   \   00004C   85..83       MOV     DPH,?V0 + 3
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   14           DEC     A
   \   000051   60C9         JZ      ??MT_ProcessEvent_3
   \   000053   14           DEC     A
   \   000054   606F         JZ      ??MT_ProcessEvent_6
   \   000056   24FE         ADD     A,#-0x2
   \   000058   6021         JZ      ??MT_ProcessEvent_7
   \   00005A   24FE         ADD     A,#-0x2
   \   00005C   6014         JZ      ??MT_ProcessEvent_8
   \   00005E   24E2         ADD     A,#-0x1e
   \   000060   70BD         JNZ     ??MT_ProcessEvent_4
   \   000062                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   2405         ADD     A,#0x5
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ??MTProcessAppRspMsg?relay
   \   000070   80AD         SJMP    ??MT_ProcessEvent_4
   \                     ??MT_ProcessEvent_8:
   \   000072                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000072   AA..         MOV     R2,?V0 + 2
   \   000074   AB..         MOV     R3,?V0 + 3
   \   000076   12....       LCALL   ??MT_ProcessDebugStr?relay
   \   000079   80A4         SJMP    ??MT_ProcessEvent_4
   \                     ??MT_ProcessEvent_7:
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   2405         ADD     A,#0x5
   \   000085   F5..         MOV     ?V0 + 6,A
   \   000087                ; Setup parameters for call to function MT_UartCalcFCS
   \   000087   74FE         MOV     A,#-0x2
   \   000089   25..         ADD     A,?V0 + 6
   \   00008B   F9           MOV     R1,A
   \   00008C   8A82         MOV     DPL,R2
   \   00008E   8B83         MOV     DPH,R3
   \   000090   A3           INC     DPTR
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000098   E9           MOV     A,R1
   \   000099   C0E0         PUSH    A
   \   00009B   85....       MOV     ?V0 + 4,?V0 + 6
   \   00009E   E5..         MOV     A,?V0 + 0
   \   0000A0   25..         ADD     A,?V0 + 4
   \   0000A2   F8           MOV     R0,A
   \   0000A3   E5..         MOV     A,?V0 + 1
   \   0000A5   3400         ADDC    A,#0x0
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   24FF         ADD     A,#-0x1
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E9           MOV     A,R1
   \   0000AE   34FF         ADDC    A,#-0x1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   D0E0         POP     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5                ; Setup parameters for call to function HalUARTWrite
   \   0000B5   AC..         MOV     R4,?V0 + 6
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   AA..         MOV     R2,?V0 + 0
   \   0000BB   AB..         MOV     R3,?V0 + 1
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   12....       LCALL   ??HalUARTWrite?relay
   \   0000C2   02....       LJMP    ??MT_ProcessEvent_4 & 0xFFFF
   \                     ??MT_ProcessEvent_6:
   \   0000C5                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   0000C5   AA..         MOV     R2,?V0 + 2
   \   0000C7   AB..         MOV     R3,?V0 + 3
   \   0000C9   12....       LCALL   ??MT_ProcessDebugMsg?relay
   \   0000CC   02....       LJMP    ??MT_ProcessEvent_4 & 0xFFFF
   \                     ??MT_ProcessEvent_5:
   \   0000CF   EE           MOV     A,R6
   \   0000D0   FA           MOV     R2,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   6480         XRL     A,#0x80
   \                     ??MT_ProcessEvent_9:
   \   0000D4   FB           MOV     R3,A
   \   0000D5   8046         SJMP    ??MT_ProcessEvent_2
    119            }
    120          
    121            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    122          #if defined MT_SYS_FUNC
    123            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_1:
   \   0000D7   EF           MOV     A,R7
   \   0000D8   540F         ANL     A,#0xf
   \   0000DA   603D         JZ      ??MT_ProcessEvent_10
    124            {
    125              if (events & MT_SYS_OSAL_EVENT_0)
   \   0000DC   EF           MOV     A,R7
   \   0000DD   5408         ANL     A,#0x8
   \   0000DF   6009         JZ      ??MT_ProcessEvent_11
    126              {
    127                MT_SysOsalTimerExpired(0x00);
   \   0000E1                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000E1   7900         MOV     R1,#0x0
   \   0000E3   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    128                events ^= MT_SYS_OSAL_EVENT_0;
   \   0000E6   7408         MOV     A,#0x8
   \   0000E8   6F           XRL     A,R7
   \   0000E9   FF           MOV     R7,A
    129              }
    130          
    131              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_11:
   \   0000EA   EF           MOV     A,R7
   \   0000EB   5404         ANL     A,#0x4
   \   0000ED   6009         JZ      ??MT_ProcessEvent_12
    132              {
    133                MT_SysOsalTimerExpired(0x01);
   \   0000EF                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000EF   7901         MOV     R1,#0x1
   \   0000F1   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    134                events ^= MT_SYS_OSAL_EVENT_1;
   \   0000F4   7404         MOV     A,#0x4
   \   0000F6   6F           XRL     A,R7
   \   0000F7   FF           MOV     R7,A
    135              }
    136          
    137              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_12:
   \   0000F8   EF           MOV     A,R7
   \   0000F9   5402         ANL     A,#0x2
   \   0000FB   6009         JZ      ??MT_ProcessEvent_13
    138              {
    139                MT_SysOsalTimerExpired(0x02);
   \   0000FD                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000FD   7902         MOV     R1,#0x2
   \   0000FF   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    140                events ^= MT_SYS_OSAL_EVENT_2;
   \   000102   7402         MOV     A,#0x2
   \   000104   6F           XRL     A,R7
   \   000105   FF           MOV     R7,A
    141              }
    142          
    143              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_13:
   \   000106   EF           MOV     A,R7
   \   000107   5401         ANL     A,#0x1
   \   000109   6009         JZ      ??MT_ProcessEvent_14
    144              {
    145                MT_SysOsalTimerExpired(0x03);
   \   00010B                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00010B   7903         MOV     R1,#0x3
   \   00010D   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    146                events ^= MT_SYS_OSAL_EVENT_3;
   \   000110   7401         MOV     A,#0x1
   \   000112   6F           XRL     A,R7
   \   000113   FF           MOV     R7,A
    147              }
    148          
    149              return events;
   \                     ??MT_ProcessEvent_14:
   \   000114   EE           MOV     A,R6
   \   000115   FA           MOV     R2,A
   \   000116   EF           MOV     A,R7
   \   000117   80BB         SJMP    ??MT_ProcessEvent_9
    150            }
    151          #endif
    152          
    153            /* Discard or make more handlers */
    154            return 0;
   \                     ??MT_ProcessEvent_10:
   \   000119   7A00         MOV     R2,#0x0
   \   00011B   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_2:
   \   00011D   7F08         MOV     R7,#0x8
   \   00011F   02....       LJMP    ?BANKED_LEAVE_XDATA
    155          
    156          } /* MT_ProcessEvent() */
    157          
    158          /***************************************************************************************************
    159           * @fn      MT_ProcessIncomingCommand
    160           *
    161           * @brief
    162           *
    163           *   Process Event Messages.
    164           *
    165           * @param   byte *msg - pointer to event message
    166           *
    167           * @return
    168           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessIncomingCommand:
    170          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    171            byte deallocate;
    172            byte *msg_ptr;
    173            byte len;
    174          
    175            /* A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG */
    176            msg_ptr = msg->msg;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FB           MOV     R3,A
   \   000014   8A..         MOV     ?V0 + 0,R2
   \   000016   8B..         MOV     ?V0 + 1,R3
    177          
    178            deallocate = true;
    179          
    180            /* Use the first byte of the message as the command ID */
    181            switch ( msg->hdr.event )
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   14           DEC     A
   \   00001E   6011         JZ      ??MT_ProcessIncomingCommand_0
   \   000020   14           DEC     A
   \   000021   6013         JZ      ??MT_ProcessIncomingCommand_1
   \   000023   24FE         ADD     A,#-0x2
   \   000025   6018         JZ      ??MT_ProcessIncomingCommand_2
   \   000027   24FE         ADD     A,#-0x2
   \   000029   605D         JZ      ??MT_ProcessIncomingCommand_3
   \   00002B   24E2         ADD     A,#-0x1e
   \   00002D   6062         JZ      ??MT_ProcessIncomingCommand_4
   \   00002F   806E         SJMP    ??MT_ProcessIncomingCommand_5
    182            {
    183              case CMD_SERIAL_MSG:
    184                MT_ProcessIncoming(msg->msg);
   \                     ??MT_ProcessIncomingCommand_0:
   \   000031                ; Setup parameters for call to function MT_ProcessIncoming
   \   000031   12....       LCALL   ??MT_ProcessIncoming?relay
    185                break;
   \   000034   8069         SJMP    ??MT_ProcessIncomingCommand_5
    186          
    187              case CMD_DEBUG_MSG:
    188                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessIncomingCommand_1:
   \   000036                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??MT_ProcessDebugMsg?relay
    189                break;
   \   00003D   8060         SJMP    ??MT_ProcessIncomingCommand_5
    190          
    191              case CB_FUNC:
    192                /*
    193                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    194                  because we have copied data already in the allocated message
    195                */
    196          
    197                /* msg_ptr is the beginning of the intended SPI message */
    198                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_2:
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   2405         ADD     A,#0x5
   \   000049   F5..         MOV     ?V0 + 4,A
    199          
    200                /*
    201                  FCS goes to the last byte in the message and is calculated over all
    202                  the bytes except FCS and SOP
    203                */
    204                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (byte)(len-2));
   \   00004B                ; Setup parameters for call to function MT_UartCalcFCS
   \   00004B   74FE         MOV     A,#-0x2
   \   00004D   25..         ADD     A,?V0 + 4
   \   00004F   F9           MOV     R1,A
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   A3           INC     DPTR
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   12....       LCALL   ??MT_UartCalcFCS?relay
   \   00005C   E9           MOV     A,R1
   \   00005D   C0E0         PUSH    A
   \   00005F   85....       MOV     ?V0 + 2,?V0 + 4
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   25..         ADD     A,?V0 + 2
   \   000066   F8           MOV     R0,A
   \   000067   E5..         MOV     A,?V0 + 1
   \   000069   3400         ADDC    A,#0x0
   \   00006B   F9           MOV     R1,A
   \   00006C   E8           MOV     A,R0
   \   00006D   24FF         ADD     A,#-0x1
   \   00006F   F582         MOV     DPL,A
   \   000071   E9           MOV     A,R1
   \   000072   34FF         ADDC    A,#-0x1
   \   000074   F583         MOV     DPH,A
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
    205          
    206          #ifdef MT_UART_DEFAULT_PORT
    207                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   AC..         MOV     R4,?V0 + 2
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   AA..         MOV     R2,?V0 + 0
   \   00007F   AB..         MOV     R3,?V0 + 1
   \   000081   7900         MOV     R1,#0x0
   \   000083   12....       LCALL   ??HalUARTWrite?relay
    208          #endif
    209                break;
   \   000086   8017         SJMP    ??MT_ProcessIncomingCommand_5
    210          
    211              case CMD_DEBUG_STR:
    212                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessIncomingCommand_3:
   \   000088                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??MT_ProcessDebugStr?relay
    213                break;
   \   00008F   800E         SJMP    ??MT_ProcessIncomingCommand_5
    214          
    215          #if !defined ( NONWK )
    216              case MT_SYS_APP_RSP_MSG:
    217                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    218                MTProcessAppRspMsg( msg_ptr, len );
   \                     ??MT_ProcessIncomingCommand_4:
   \   000091                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000091   8A82         MOV     DPL,R2
   \   000093   8B83         MOV     DPH,R3
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   2405         ADD     A,#0x5
   \   00009B   F9           MOV     R1,A
   \   00009C   12....       LCALL   ??MTProcessAppRspMsg?relay
    219                break;
    220          #endif  // NONWK
    221          
    222          #if defined (MT_UTIL_FUNC)
    223          #if defined ZCL_KEY_ESTABLISH
    224              case ZCL_KEY_ESTABLISH_IND:
    225                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    226                break;
    227          #endif        
    228          #endif        
    229          #ifdef MT_ZDO_CB_FUNC
    230              case ZDO_STATE_CHANGE:
    231                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    232                break;
    233          #endif
    234          
    235              default:
    236                break;
    237            }
    238          
    239            if ( deallocate )
    240            {
    241              osal_msg_deallocate( (uint8 *)msg );
   \                     ??MT_ProcessIncomingCommand_5:
   \   00009F                ; Setup parameters for call to function osal_msg_deallocate
   \   00009F   EE           MOV     A,R6
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   ??osal_msg_deallocate?relay
    242            }
    243          }
   \   0000A6   7F05         MOV     R7,#0x5
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    244          
    245          #ifdef MT_TASK
    246          /***************************************************************************************************
    247           * @fn      MT_TransportAlloc
    248           *
    249           * @brief   Allocate memory for transport msg
    250           *
    251           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    252           *          uint8 len - length
    253           *
    254           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    255           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
   \                     MT_TransportAlloc:
    257          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    258            uint8 *p;
    259          
    260            (void)cmd0;  // Intentionally unreferenced parameter
    261            
    262            /* Allocate a buffer of data length + SOP+CMD+FCS (5bytes) */
    263            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
   \   000006                ; Setup parameters for call to function osal_msg_allocate
   \   000006   2405         ADD     A,#0x5
   \   000008   FA           MOV     R2,A
   \   000009   E4           CLR     A
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
    264          
    265            if (p)
   \   000014   E582         MOV     A,DPL
   \   000016   4583         ORL     A,DPH
   \   000018   6007         JZ      ??MT_TransportAlloc_0
    266            {
    267              p++; /* Save space for SOP_VALUE, msg structure */
    268              return p;
   \   00001A   A3           INC     DPTR
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   8004         SJMP    ??MT_TransportAlloc_1
    269            }
    270            else
    271            {
    272              return NULL;
   \                     ??MT_TransportAlloc_0:
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
    273            }
   \                     ??MT_TransportAlloc_1:
   \   000025                REQUIRE ?Subroutine0
   \   000025                ; // Fall through to label ?Subroutine0
    274          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    275          
    276          /***************************************************************************************************
    277           * @fn      MT_TransportSend
    278           *
    279           * @brief   Fill in SOP and FCS then send out the msg
    280           *
    281           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    282           *
    283           * @return  None
    284           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void MT_TransportSend(uint8 *pBuf)
   \                     MT_TransportSend:
    286          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    287            uint8 *msgPtr;
    288            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
    289          
    290            /* Move back to the SOP */
    291            msgPtr = pBuf-1;
   \   00000B   EA           MOV     A,R2
   \   00000C   24FF         ADD     A,#-0x1
   \   00000E   FE           MOV     R6,A
   \   00000F   EB           MOV     A,R3
   \   000010   34FF         ADDC    A,#-0x1
   \   000012   FF           MOV     R7,A
    292          
    293            /* Insert SOP */
    294            msgPtr[0] = MT_UART_SOF;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   74FE         MOV     A,#-0x2
   \   000019   F0           MOVX    @DPTR,A
    295          
    296            /* Insert FCS */
    297            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
   \   00001A   8982         MOV     DPL,R1
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F                ; Setup parameters for call to function MT_UartCalcFCS
   \   00001F   09           INC     R1
   \   000020   09           INC     R1
   \   000021   09           INC     R1
   \   000022   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000025   EE           MOV     A,R6
   \   000026   25..         ADD     A,?V0 + 0
   \   000028   F582         MOV     DPL,A
   \   00002A   EF           MOV     A,R7
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   F583         MOV     DPH,A
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   F0           MOVX    @DPTR,A
    298          
    299            /* Send to UART */
    300          #ifdef MT_UART_DEFAULT_PORT
    301            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
   \   000035                ; Setup parameters for call to function HalUARTWrite
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   2405         ADD     A,#0x5
   \   000039   FC           MOV     R4,A
   \   00003A   E4           CLR     A
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   FD           MOV     R5,A
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   7900         MOV     R1,#0x0
   \   000044   12....       LCALL   ??HalUARTWrite?relay
    302          #endif
    303          
    304            /* Deallocate */
    305            osal_msg_deallocate(msgPtr);
   \   000047                ; Setup parameters for call to function osal_msg_deallocate
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   ??osal_msg_deallocate?relay
    306          }
   \   00004E   80..         SJMP    ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessIncomingCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncomingCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TransportAlloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportAlloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TransportSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportSend
    307          #endif /* MT_TASK */
    308          /***************************************************************************************************
    309           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     MT_ProcessEvent                 1      0     16
       -> MT_ProcessIncoming         0      0     32
       -> osal_msg_deallocate        0      0     32
       -> osal_msg_receive           0      0     32
       -> MTProcessAppRspMsg         0      0     32
       -> MT_ProcessDebugStr         0      0     32
       -> MT_UartCalcFCS             0      0     32
       -> HalUARTWrite               0      0     32
       -> MT_ProcessDebugMsg         0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
     MT_ProcessIncomingCommand       1      0     13
       -> MT_ProcessIncoming         0      0     26
       -> MT_ProcessDebugMsg         0      0     26
       -> MT_UartCalcFCS             0      0     26
       -> HalUARTWrite               0      0     26
       -> MT_ProcessDebugStr         0      0     26
       -> MTProcessAppRspMsg         0      0     26
       -> osal_msg_deallocate        0      0     26
     MT_TaskInit                     0      0      9
       -> MT_UartInit                0      0     18
       -> MT_UartRegisterTaskID      0      0     18
       -> MT_Init                    0      0     18
     MT_TransportAlloc               0      0     10
       -> osal_msg_allocate          0      0     20
     MT_TransportSend                1      0     10
       -> MT_UartCalcFCS             0      0     20
       -> HalUARTWrite               0      0     20
       -> osal_msg_deallocate        0      0     20


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     MT_TaskInit                         25
     MT_ProcessEvent                    290
     MT_ProcessIncomingCommand          171
     MT_TransportAlloc                   37
     ?Subroutine0                         5
     MT_TransportSend                    80
     ??MT_TaskInit?relay                  6
     ??MT_ProcessEvent?relay              6
     ??MT_ProcessIncomingCommand?relay    6
     ??MT_TransportAlloc?relay            6
     ??MT_TransportSend?relay             6

 
 608 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
 638 bytes of CODE memory

Errors: none
Warnings: none
