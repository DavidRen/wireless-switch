###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\mt\MT_ZDO.c                                 #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\mt\MT_ZDO.c" -D ZIGBEEPRO -D ZTOOL_P1 -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\" -lA  #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\Obj\" -e --debug --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\MT_ZDO.lst                                  #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\MT_ZDO.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2009-12-29 11:40:43 -0800 (Tue, 29 Dec 2009) $
      4            Revision:       $Revision: 21414 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "APSMEDE.h"
     50          #include "ZDConfig.h"
     51          #include "ZDProfile.h"
     52          #include "ZDObject.h"
     53          #include "ZDApp.h"
     54          
     55          #if !defined( WIN32 )
     56            #include "OnBoard.h"
     57          #endif
     58          
     59          #if defined(ZDO_LINK_KEY_MANAGEMENT)
     60            #include "ZDSecMgr.h"
     61          #endif
     62          
     63          #include "nwk_util.h"
     64          
     65          /**************************************************************************************************
     66           * CONSTANTS
     67           **************************************************************************************************/
     68          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     69          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     70          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     71          
     72          #define MTZDO_RESPONSE_BUFFER_LEN   100
     73          
     74          #define MTZDO_MAX_MATCH_CLUSTERS    16
     75          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     76          
     77          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     78          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     79          
     80          /**************************************************************************************************
     81           * GLOBAL VARIABLES
     82           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     84          
     85          /**************************************************************************************************
     86           * LOCAL VARIABLES
     87           **************************************************************************************************/
     88          
     89          /**************************************************************************************************
     90           * LOCAL FUNCTIONS
     91           **************************************************************************************************/
     92          #if defined (MT_ZDO_FUNC)
     93          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
     94          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
     95          void MT_ZdoNodeDescRequest(uint8 *pBuf);
     96          void MT_ZdoPowerDescRequest(uint8 *pBuf);
     97          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
     98          void MT_ZdoActiveEpRequest(uint8 *pBuf);
     99          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    100          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    101          void MT_ZdoUserDescRequest(uint8 *pBuf);
    102          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    103          void MT_ZdoUserDescSet(uint8 *pBuf);
    104          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    105          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    106          void MT_ZdoBindRequest(uint8 *pBuf);
    107          void MT_ZdoUnbindRequest(uint8 *pBuf);
    108          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    109          void MT_ZdoSetLinkKey(uint8 *pBuf);
    110          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    111          void MT_ZdoGetLinkKey(uint8 *pBuf);
    112          #if defined (MT_ZDO_MGMT)
    113          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    114          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    115          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    116          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    117          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    118          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    119          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    120          #endif /* MT_ZDO_MGMT */
    121          void MT_ZdoStartupFromApp(uint8 *pBuf);
    122          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    123          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    124          #endif /* MT_ZDO_FUNC */
    125          
    126          #if defined (MT_ZDO_CB_FUNC)
    127          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    128          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    129          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    130          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    131          void* MT_ZdoSrcRtgCB( void *pStr );
    132          #endif /* MT_ZDO_CB_FUNC */
    133          
    134          #if defined (MT_ZDO_FUNC)
    135          /***************************************************************************************************
    136           * @fn      MT_ZdoInit
    137           *
    138           * @brief   MT ZDO initialization
    139           *
    140           * @param   none
    141           *
    142           * @return  none
    143           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    145          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    146          #ifdef MT_ZDO_CB_FUNC
    147            /* Register with ZDO for indication callbacks */
    148            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    149          #endif
    150          }
   \   000000   02....       LJMP    ?BRET
    151          
    152          /***************************************************************************************************
    153           * @fn      MT_ZdoCommandProcessing
    154           *
    155           * @brief
    156           *
    157           *   Process all the ZDO commands that are issued by test tool
    158           *
    159           * @param   pBuf - pointer to the msg buffer
    160           *
    161           *          | LEN  | CMD0  | CMD1  |  DATA  |
    162           *          |  1   |   1   |   1   |  0-255 |
    163           *
    164           * @return  status
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    167          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    168            uint8 status = MT_RPC_SUCCESS;
   \   00000A   7E00         MOV     R6,#0x0
    169          
    170            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   607E         JZ      ??MT_ZdoCommandProcessing_0
   \   000016   14           DEC     A
   \   000017   7003         JNZ     $+5
   \   000019   02....       LJMP    ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   00001C   14           DEC     A
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   000022   14           DEC     A
   \   000023   7003         JNZ     $+5
   \   000025   02....       LJMP    ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   000028   14           DEC     A
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   00002E   14           DEC     A
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   000034   14           DEC     A
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   00003A   14           DEC     A
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   000040   14           DEC     A
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   000046   24FE         ADD     A,#-0x2
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   00004D   14           DEC     A
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000053   14           DEC     A
   \   000054   7003         JNZ     $+5
   \   000056   02....       LJMP    ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   000059   24EC         ADD     A,#-0x14
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   000060   14           DEC     A
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   000066   14           DEC     A
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   00006C   14           DEC     A
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   000072   14           DEC     A
   \   000073   7003         JNZ     $+5
   \   000075   02....       LJMP    ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   000078   14           DEC     A
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   00007E   24E7         ADD     A,#-0x19
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   000085   14           DEC     A
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   00008B   14           DEC     A
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   000091   02....       LJMP    ??MT_ZdoCommandProcessing_21 & 0xFFFF
    171            {
    172          #if defined ( ZDO_NWKADDR_REQUEST )
    173              case MT_ZDO_NWK_ADDR_REQ:
    174                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   000094   88..         MOV     ?V0 + 14,R0
   \   000096   EA           MOV     A,R2
   \   000097   2403         ADD     A,#0x3
   \   000099   0A           INC     R2
   \   00009A   0A           INC     R2
   \   00009B   0A           INC     R2
   \   00009C   EB           MOV     A,R3
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   FB           MOV     R3,A
   \   0000A0   EA           MOV     A,R2
   \   0000A1   2408         ADD     A,#0x8
   \   0000A3   F582         MOV     DPL,A
   \   0000A5   EB           MOV     A,R3
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   F583         MOV     DPH,A
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   A3           INC     DPTR
   \   0000AD                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000AD   7D00         MOV     R5,#0x0
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FC           MOV     R4,A
   \   0000B1   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   0000B4   E9           MOV     A,R1
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000BC   AC82         MOV     R4,DPL
   \   0000BE   AD83         MOV     R5,DPH
   \   0000C0   7B01         MOV     R3,#0x1
   \   0000C2   AA..         MOV     R2,?V0 + 14
   \                     ??MT_ZdoCommandProcessing_22:
   \   0000C4   7965         MOV     R1,#0x65
   \   0000C6   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    175                break;
   \   0000C9   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    176          #endif
    177          
    178          #if defined ( ZDO_IEEEADDR_REQUEST )
    179              case MT_ZDO_IEEE_ADDR_REQ:
    180                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   0000CC   88..         MOV     ?V0 + 13,R0
   \   0000CE   EA           MOV     A,R2
   \   0000CF   2403         ADD     A,#0x3
   \   0000D1   F8           MOV     R0,A
   \   0000D2   EB           MOV     A,R3
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F9           MOV     R1,A
   \   0000D6   8882         MOV     DPL,R0
   \   0000D8   8983         MOV     DPH,R1
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FC           MOV     R4,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   FB           MOV     R3,A
   \   0000DF   EC           MOV     A,R4
   \   0000E0   FA           MOV     R2,A
   \   0000E1   E8           MOV     A,R0
   \   0000E2   2402         ADD     A,#0x2
   \   0000E4   08           INC     R0
   \   0000E5   08           INC     R0
   \   0000E6   E9           MOV     A,R1
   \   0000E7   3400         ADDC    A,#0x0
   \   0000E9   F9           MOV     R1,A
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   8983         MOV     DPH,R1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   FF           MOV     R7,A
   \   0000F0   A3           INC     DPTR
   \   0000F1                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   FC           MOV     R4,A
   \   0000F5   EF           MOV     A,R7
   \   0000F6   F9           MOV     R1,A
   \   0000F7   12....       LCALL   ??ZDP_IEEEAddrReq?relay
   \   0000FA   E9           MOV     A,R1
   \   0000FB   85..82       MOV     DPL,?XSP + 0
   \   0000FE   85..83       MOV     DPH,?XSP + 1
   \   000101   F0           MOVX    @DPTR,A
   \   000102                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000102   AC82         MOV     R4,DPL
   \   000104   AD83         MOV     R5,DPH
   \   000106   7B01         MOV     R3,#0x1
   \   000108   AA..         MOV     R2,?V0 + 13
   \   00010A   80B8         SJMP    ??MT_ZdoCommandProcessing_22
    181                break;
    182          #endif
    183          
    184          #if defined ( ZDO_NODEDESC_REQUEST )
    185              case MT_ZDO_NODE_DESC_REQ:
    186                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   00010C   88..         MOV     ?V0 + 12,R0
   \   00010E   EA           MOV     A,R2
   \   00010F   2403         ADD     A,#0x3
   \   000111   0A           INC     R2
   \   000112   0A           INC     R2
   \   000113   0A           INC     R2
   \   000114   EB           MOV     A,R3
   \   000115   3400         ADDC    A,#0x0
   \   000117   FB           MOV     R3,A
   \   000118   7409         MOV     A,#0x9
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   7402         MOV     A,#0x2
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   8A82         MOV     DPL,R2
   \   000122   8B83         MOV     DPH,R3
   \   000124   E0           MOVX    A,@DPTR
   \   000125   FC           MOV     R4,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   F9           MOV     R1,A
   \   000129   EC           MOV     A,R4
   \   00012A   F8           MOV     R0,A
   \   00012B   7401         MOV     A,#0x1
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E8           MOV     A,R0
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E9           MOV     A,R1
   \   000134   F0           MOVX    @DPTR,A
   \   000135   EA           MOV     A,R2
   \   000136   2402         ADD     A,#0x2
   \   000138   EB           MOV     A,R3
   \   000139   3400         ADDC    A,#0x0
   \   00013B   0A           INC     R2
   \   00013C   0A           INC     R2
   \   00013D   FB           MOV     R3,A
   \   00013E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00013E   8E..         MOV     ?V0 + 0,R6
   \   000140   78..         MOV     R0,#?V0 + 0
   \   000142   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000145   7902         MOV     R1,#0x2
   \   000147   8A82         MOV     DPL,R2
   \   000149   8B83         MOV     DPH,R3
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FC           MOV     R4,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   FB           MOV     R3,A
   \   000150   EC           MOV     A,R4
   \   000151   2400         ADD     A,#0x0
   \   000153   E4           CLR     A
   \   000154   3B           ADDC    A,R3
   \   000155   FD           MOV     R5,A
   \   000156   E9           MOV     A,R1
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   AA82         MOV     R2,DPL
   \   00015C   AB83         MOV     R3,DPH
   \   00015E   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   000161   7401         MOV     A,#0x1
   \   000163   12....       LCALL   ?DEALLOC_XSTACK8
   \   000166   E9           MOV     A,R1
   \   000167   85..82       MOV     DPL,?XSP + 0
   \   00016A   85..83       MOV     DPH,?XSP + 1
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016E   AC82         MOV     R4,DPL
   \   000170   AD83         MOV     R5,DPH
   \   000172   7B01         MOV     R3,#0x1
   \   000174   AA..         MOV     R2,?V0 + 12
   \   000176   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    187                break;
    188          #endif
    189          
    190          #if defined ( ZDO_POWERDESC_REQUEST )
    191              case MT_ZDO_POWER_DESC_REQ:
    192                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   000179   88..         MOV     ?V0 + 11,R0
   \   00017B   EA           MOV     A,R2
   \   00017C   2403         ADD     A,#0x3
   \   00017E   0A           INC     R2
   \   00017F   0A           INC     R2
   \   000180   0A           INC     R2
   \   000181   EB           MOV     A,R3
   \   000182   3400         ADDC    A,#0x0
   \   000184   FB           MOV     R3,A
   \   000185   7409         MOV     A,#0x9
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   7402         MOV     A,#0x2
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   8A82         MOV     DPL,R2
   \   00018F   8B83         MOV     DPH,R3
   \   000191   E0           MOVX    A,@DPTR
   \   000192   FC           MOV     R4,A
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \   000195   F9           MOV     R1,A
   \   000196   EC           MOV     A,R4
   \   000197   F8           MOV     R0,A
   \   000198   7401         MOV     A,#0x1
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   E8           MOV     A,R0
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   A3           INC     DPTR
   \   0001A0   E9           MOV     A,R1
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   EA           MOV     A,R2
   \   0001A3   2402         ADD     A,#0x2
   \   0001A5   EB           MOV     A,R3
   \   0001A6   3400         ADDC    A,#0x0
   \   0001A8   0A           INC     R2
   \   0001A9   0A           INC     R2
   \   0001AA   FB           MOV     R3,A
   \   0001AB                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   0001AB   8E..         MOV     ?V0 + 0,R6
   \   0001AD   78..         MOV     R0,#?V0 + 0
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B2   7903         MOV     R1,#0x3
   \   0001B4   8A82         MOV     DPL,R2
   \   0001B6   8B83         MOV     DPH,R3
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FC           MOV     R4,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FB           MOV     R3,A
   \   0001BD   EC           MOV     A,R4
   \   0001BE   2400         ADD     A,#0x0
   \   0001C0   E4           CLR     A
   \   0001C1   3B           ADDC    A,R3
   \   0001C2   FD           MOV     R5,A
   \   0001C3   7402         MOV     A,#0x2
   \   0001C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C8   AA82         MOV     R2,DPL
   \   0001CA   AB83         MOV     R3,DPH
   \   0001CC   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   0001CF   7401         MOV     A,#0x1
   \   0001D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D4   E9           MOV     A,R1
   \   0001D5   85..82       MOV     DPL,?XSP + 0
   \   0001D8   85..83       MOV     DPH,?XSP + 1
   \   0001DB   F0           MOVX    @DPTR,A
   \   0001DC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001DC   AC82         MOV     R4,DPL
   \   0001DE   AD83         MOV     R5,DPH
   \   0001E0   7B01         MOV     R3,#0x1
   \   0001E2   AA..         MOV     R2,?V0 + 11
   \   0001E4   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    193                break;
    194          #endif
    195          
    196          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    197              case MT_ZDO_SIMPLE_DESC_REQ:
    198                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   0001E7   88..         MOV     ?V0 + 10,R0
   \   0001E9   EA           MOV     A,R2
   \   0001EA   2403         ADD     A,#0x3
   \   0001EC   0A           INC     R2
   \   0001ED   0A           INC     R2
   \   0001EE   0A           INC     R2
   \   0001EF   EB           MOV     A,R3
   \   0001F0   3400         ADDC    A,#0x0
   \   0001F2   FB           MOV     R3,A
   \   0001F3   7409         MOV     A,#0x9
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   7402         MOV     A,#0x2
   \   0001FA   F0           MOVX    @DPTR,A
   \   0001FB   8A82         MOV     DPL,R2
   \   0001FD   8B83         MOV     DPH,R3
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   FC           MOV     R4,A
   \   000201   A3           INC     DPTR
   \   000202   E0           MOVX    A,@DPTR
   \   000203   F9           MOV     R1,A
   \   000204   EC           MOV     A,R4
   \   000205   F8           MOV     R0,A
   \   000206   7401         MOV     A,#0x1
   \   000208   12....       LCALL   ?XSTACK_DISP0_8
   \   00020B   E8           MOV     A,R0
   \   00020C   F0           MOVX    @DPTR,A
   \   00020D   A3           INC     DPTR
   \   00020E   E9           MOV     A,R1
   \   00020F   F0           MOVX    @DPTR,A
   \   000210   EA           MOV     A,R2
   \   000211   2402         ADD     A,#0x2
   \   000213   EB           MOV     A,R3
   \   000214   3400         ADDC    A,#0x0
   \   000216   0A           INC     R2
   \   000217   0A           INC     R2
   \   000218   FB           MOV     R3,A
   \   000219                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000219   8E..         MOV     ?V0 + 0,R6
   \   00021B   78..         MOV     R0,#?V0 + 0
   \   00021D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000220   8A82         MOV     DPL,R2
   \   000222   8B83         MOV     DPH,R3
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   F9           MOV     R1,A
   \   000228   8A82         MOV     DPL,R2
   \   00022A   8B83         MOV     DPH,R3
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   FC           MOV     R4,A
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   FB           MOV     R3,A
   \   000231   EC           MOV     A,R4
   \   000232   2400         ADD     A,#0x0
   \   000234   E4           CLR     A
   \   000235   3B           ADDC    A,R3
   \   000236   FD           MOV     R5,A
   \   000237   7402         MOV     A,#0x2
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   AA82         MOV     R2,DPL
   \   00023E   AB83         MOV     R3,DPH
   \   000240   12....       LCALL   ??ZDP_SimpleDescReq?relay
   \   000243   7401         MOV     A,#0x1
   \   000245   12....       LCALL   ?DEALLOC_XSTACK8
   \   000248   E9           MOV     A,R1
   \   000249   85..82       MOV     DPL,?XSP + 0
   \   00024C   85..83       MOV     DPH,?XSP + 1
   \   00024F   F0           MOVX    @DPTR,A
   \   000250                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000250   AC82         MOV     R4,DPL
   \   000252   AD83         MOV     R5,DPH
   \   000254   7B01         MOV     R3,#0x1
   \   000256   AA..         MOV     R2,?V0 + 10
   \   000258   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    199                break;
    200          #endif
    201          
    202          #if defined ( ZDO_ACTIVEEP_REQUEST )
    203              case MT_ZDO_ACTIVE_EP_REQ:
    204                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   00025B   88..         MOV     ?V0 + 9,R0
   \   00025D   EA           MOV     A,R2
   \   00025E   2403         ADD     A,#0x3
   \   000260   0A           INC     R2
   \   000261   0A           INC     R2
   \   000262   0A           INC     R2
   \   000263   EB           MOV     A,R3
   \   000264   3400         ADDC    A,#0x0
   \   000266   FB           MOV     R3,A
   \   000267   7409         MOV     A,#0x9
   \   000269   12....       LCALL   ?XSTACK_DISP0_8
   \   00026C   7402         MOV     A,#0x2
   \   00026E   F0           MOVX    @DPTR,A
   \   00026F   8A82         MOV     DPL,R2
   \   000271   8B83         MOV     DPH,R3
   \   000273   E0           MOVX    A,@DPTR
   \   000274   FC           MOV     R4,A
   \   000275   A3           INC     DPTR
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F9           MOV     R1,A
   \   000278   EC           MOV     A,R4
   \   000279   F8           MOV     R0,A
   \   00027A   7401         MOV     A,#0x1
   \   00027C   12....       LCALL   ?XSTACK_DISP0_8
   \   00027F   E8           MOV     A,R0
   \   000280   F0           MOVX    @DPTR,A
   \   000281   A3           INC     DPTR
   \   000282   E9           MOV     A,R1
   \   000283   F0           MOVX    @DPTR,A
   \   000284   EA           MOV     A,R2
   \   000285   2402         ADD     A,#0x2
   \   000287   EB           MOV     A,R3
   \   000288   3400         ADDC    A,#0x0
   \   00028A   0A           INC     R2
   \   00028B   0A           INC     R2
   \   00028C   FB           MOV     R3,A
   \   00028D                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00028D   8E..         MOV     ?V0 + 0,R6
   \   00028F   78..         MOV     R0,#?V0 + 0
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000294   7905         MOV     R1,#0x5
   \   000296   8A82         MOV     DPL,R2
   \   000298   8B83         MOV     DPH,R3
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   FC           MOV     R4,A
   \   00029C   A3           INC     DPTR
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   FB           MOV     R3,A
   \   00029F   EC           MOV     A,R4
   \   0002A0   2400         ADD     A,#0x0
   \   0002A2   E4           CLR     A
   \   0002A3   3B           ADDC    A,R3
   \   0002A4   FD           MOV     R5,A
   \   0002A5   7402         MOV     A,#0x2
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   AA82         MOV     R2,DPL
   \   0002AC   AB83         MOV     R3,DPH
   \   0002AE   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   0002B1   7401         MOV     A,#0x1
   \   0002B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B6   E9           MOV     A,R1
   \   0002B7   85..82       MOV     DPL,?XSP + 0
   \   0002BA   85..83       MOV     DPH,?XSP + 1
   \   0002BD   F0           MOVX    @DPTR,A
   \   0002BE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002BE   AC82         MOV     R4,DPL
   \   0002C0   AD83         MOV     R5,DPH
   \   0002C2   7B01         MOV     R3,#0x1
   \   0002C4   AA..         MOV     R2,?V0 + 9
   \   0002C6   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    205                break;
    206          #endif
    207          
    208          #if defined ( ZDO_MATCH_REQUEST )
    209              case MT_ZDO_MATCH_DESC_REQ:
    210                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   0002C9                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   0002C9   12....       LCALL   ??MT_ZdoMatchDescRequest?relay
    211                break;
   \   0002CC   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    212          #endif
    213          
    214          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    215              case MT_ZDO_COMPLEX_DESC_REQ:
    216                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   0002CF   88..         MOV     ?V0 + 7,R0
   \   0002D1   EA           MOV     A,R2
   \   0002D2   2403         ADD     A,#0x3
   \   0002D4   0A           INC     R2
   \   0002D5   0A           INC     R2
   \   0002D6   0A           INC     R2
   \   0002D7   EB           MOV     A,R3
   \   0002D8   3400         ADDC    A,#0x0
   \   0002DA   FB           MOV     R3,A
   \   0002DB   7409         MOV     A,#0x9
   \   0002DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E0   7402         MOV     A,#0x2
   \   0002E2   F0           MOVX    @DPTR,A
   \   0002E3   8A82         MOV     DPL,R2
   \   0002E5   8B83         MOV     DPH,R3
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   FC           MOV     R4,A
   \   0002E9   A3           INC     DPTR
   \   0002EA   E0           MOVX    A,@DPTR
   \   0002EB   F9           MOV     R1,A
   \   0002EC   EC           MOV     A,R4
   \   0002ED   F8           MOV     R0,A
   \   0002EE   7401         MOV     A,#0x1
   \   0002F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F3   E8           MOV     A,R0
   \   0002F4   F0           MOVX    @DPTR,A
   \   0002F5   A3           INC     DPTR
   \   0002F6   E9           MOV     A,R1
   \   0002F7   F0           MOVX    @DPTR,A
   \   0002F8   EA           MOV     A,R2
   \   0002F9   2402         ADD     A,#0x2
   \   0002FB   0A           INC     R2
   \   0002FC   0A           INC     R2
   \   0002FD   EB           MOV     A,R3
   \   0002FE   3400         ADDC    A,#0x0
   \   000300   FB           MOV     R3,A
   \   000301                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000301   8E..         MOV     ?V0 + 0,R6
   \   000303   78..         MOV     R0,#?V0 + 0
   \   000305   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000308   7910         MOV     R1,#0x10
   \   00030A   8A82         MOV     DPL,R2
   \   00030C   8B83         MOV     DPH,R3
   \   00030E   E0           MOVX    A,@DPTR
   \   00030F   FC           MOV     R4,A
   \   000310   A3           INC     DPTR
   \   000311   E0           MOVX    A,@DPTR
   \   000312   FB           MOV     R3,A
   \   000313   EC           MOV     A,R4
   \   000314   2400         ADD     A,#0x0
   \   000316   E4           CLR     A
   \   000317   3B           ADDC    A,R3
   \   000318   FD           MOV     R5,A
   \   000319   7402         MOV     A,#0x2
   \   00031B   12....       LCALL   ?XSTACK_DISP0_8
   \   00031E   AA82         MOV     R2,DPL
   \   000320   AB83         MOV     R3,DPH
   \   000322   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   000325   7401         MOV     A,#0x1
   \   000327   12....       LCALL   ?DEALLOC_XSTACK8
   \   00032A   E9           MOV     A,R1
   \   00032B   85..82       MOV     DPL,?XSP + 0
   \   00032E   85..83       MOV     DPH,?XSP + 1
   \   000331   F0           MOVX    @DPTR,A
   \   000332                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000332   AC82         MOV     R4,DPL
   \   000334   AD83         MOV     R5,DPH
   \   000336   7B01         MOV     R3,#0x1
   \   000338   AA..         MOV     R2,?V0 + 7
   \   00033A   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    217                break;
    218          #endif
    219          
    220          #if defined ( ZDO_USERDESC_REQUEST )
    221              case MT_ZDO_USER_DESC_REQ:
    222                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   00033D   88..         MOV     ?V0 + 5,R0
   \   00033F   EA           MOV     A,R2
   \   000340   2403         ADD     A,#0x3
   \   000342   0A           INC     R2
   \   000343   0A           INC     R2
   \   000344   0A           INC     R2
   \   000345   EB           MOV     A,R3
   \   000346   3400         ADDC    A,#0x0
   \   000348   FB           MOV     R3,A
   \   000349   7409         MOV     A,#0x9
   \   00034B   12....       LCALL   ?XSTACK_DISP0_8
   \   00034E   7402         MOV     A,#0x2
   \   000350   F0           MOVX    @DPTR,A
   \   000351   8A82         MOV     DPL,R2
   \   000353   8B83         MOV     DPH,R3
   \   000355   E0           MOVX    A,@DPTR
   \   000356   FC           MOV     R4,A
   \   000357   A3           INC     DPTR
   \   000358   E0           MOVX    A,@DPTR
   \   000359   F9           MOV     R1,A
   \   00035A   EC           MOV     A,R4
   \   00035B   F8           MOV     R0,A
   \   00035C   7401         MOV     A,#0x1
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   E8           MOV     A,R0
   \   000362   F0           MOVX    @DPTR,A
   \   000363   A3           INC     DPTR
   \   000364   E9           MOV     A,R1
   \   000365   F0           MOVX    @DPTR,A
   \   000366   EA           MOV     A,R2
   \   000367   2402         ADD     A,#0x2
   \   000369   0A           INC     R2
   \   00036A   0A           INC     R2
   \   00036B   EB           MOV     A,R3
   \   00036C   3400         ADDC    A,#0x0
   \   00036E   FB           MOV     R3,A
   \   00036F                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00036F   8E..         MOV     ?V0 + 0,R6
   \   000371   78..         MOV     R0,#?V0 + 0
   \   000373   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000376   7911         MOV     R1,#0x11
   \   000378   8A82         MOV     DPL,R2
   \   00037A   8B83         MOV     DPH,R3
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   FC           MOV     R4,A
   \   00037E   A3           INC     DPTR
   \   00037F   E0           MOVX    A,@DPTR
   \   000380   FB           MOV     R3,A
   \   000381   EC           MOV     A,R4
   \   000382   2400         ADD     A,#0x0
   \   000384   E4           CLR     A
   \   000385   3B           ADDC    A,R3
   \   000386   FD           MOV     R5,A
   \   000387   7402         MOV     A,#0x2
   \   000389   12....       LCALL   ?XSTACK_DISP0_8
   \   00038C   AA82         MOV     R2,DPL
   \   00038E   AB83         MOV     R3,DPH
   \   000390   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   000393   7401         MOV     A,#0x1
   \   000395   12....       LCALL   ?DEALLOC_XSTACK8
   \   000398   E9           MOV     A,R1
   \   000399   85..82       MOV     DPL,?XSP + 0
   \   00039C   85..83       MOV     DPH,?XSP + 1
   \   00039F   F0           MOVX    @DPTR,A
   \   0003A0                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003A0   AC82         MOV     R4,DPL
   \   0003A2   AD83         MOV     R5,DPH
   \   0003A4   7B01         MOV     R3,#0x1
   \   0003A6   AA..         MOV     R2,?V0 + 5
   \   0003A8   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    223                break;
    224          #endif
    225          
    226          #if defined ( ZDO_ENDDEVICE_ANNCE )
    227              case MT_ZDO_END_DEV_ANNCE:
    228                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   0003AB   88..         MOV     ?V0 + 4,R0
   \   0003AD   EA           MOV     A,R2
   \   0003AE   2403         ADD     A,#0x3
   \   0003B0   FC           MOV     R4,A
   \   0003B1   EB           MOV     A,R3
   \   0003B2   3400         ADDC    A,#0x0
   \   0003B4   FD           MOV     R5,A
   \   0003B5   8C82         MOV     DPL,R4
   \   0003B7   8D83         MOV     DPH,R5
   \   0003B9   E0           MOVX    A,@DPTR
   \   0003BA   F8           MOV     R0,A
   \   0003BB   A3           INC     DPTR
   \   0003BC   E0           MOVX    A,@DPTR
   \   0003BD   FB           MOV     R3,A
   \   0003BE   E8           MOV     A,R0
   \   0003BF   FA           MOV     R2,A
   \   0003C0   EC           MOV     A,R4
   \   0003C1   2402         ADD     A,#0x2
   \   0003C3   0C           INC     R4
   \   0003C4   0C           INC     R4
   \   0003C5   ED           MOV     A,R5
   \   0003C6   3400         ADDC    A,#0x0
   \   0003C8   FD           MOV     R5,A
   \   0003C9                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   0003C9   8E..         MOV     ?V0 + 0,R6
   \   0003CB   78..         MOV     R0,#?V0 + 0
   \   0003CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D0   8C82         MOV     DPL,R4
   \   0003D2   8D83         MOV     DPH,R5
   \   0003D4   A3           INC     DPTR
   \   0003D5   A3           INC     DPTR
   \   0003D6   A3           INC     DPTR
   \   0003D7   A3           INC     DPTR
   \   0003D8   A3           INC     DPTR
   \   0003D9   A3           INC     DPTR
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   E0           MOVX    A,@DPTR
   \   0003DD   F9           MOV     R1,A
   \   0003DE   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   0003E1   7401         MOV     A,#0x1
   \   0003E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003E6   E9           MOV     A,R1
   \   0003E7   85..82       MOV     DPL,?XSP + 0
   \   0003EA   85..83       MOV     DPH,?XSP + 1
   \   0003ED   F0           MOVX    @DPTR,A
   \   0003EE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003EE   AC82         MOV     R4,DPL
   \   0003F0   AD83         MOV     R5,DPH
   \   0003F2   7B01         MOV     R3,#0x1
   \   0003F4   AA..         MOV     R2,?V0 + 4
   \   0003F6   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    229                break;
    230          #endif      
    231          
    232          #if defined ( ZDO_USERDESCSET_REQUEST )
    233              case MT_ZDO_USER_DESC_SET:
    234                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   0003F9                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   0003F9   12....       LCALL   ??MT_ZdoUserDescSet?relay
    235                break;
   \   0003FC   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    236          #endif
    237          
    238          #if defined ( ZDO_SERVERDISC_REQUEST )
    239              case MT_ZDO_SERVICE_DISC_REQ:
    240                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   0003FF   88..         MOV     ?V0 + 3,R0
   \   000401   EA           MOV     A,R2
   \   000402   2403         ADD     A,#0x3
   \   000404   F582         MOV     DPL,A
   \   000406   EB           MOV     A,R3
   \   000407   3400         ADDC    A,#0x0
   \   000409   F583         MOV     DPH,A
   \   00040B                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   00040B   7900         MOV     R1,#0x0
   \   00040D   E0           MOVX    A,@DPTR
   \   00040E   FA           MOV     R2,A
   \   00040F   A3           INC     DPTR
   \   000410   E0           MOVX    A,@DPTR
   \   000411   FD           MOV     R5,A
   \   000412   EA           MOV     A,R2
   \   000413   2400         ADD     A,#0x0
   \   000415   E4           CLR     A
   \   000416   3D           ADDC    A,R5
   \   000417   FB           MOV     R3,A
   \   000418   12....       LCALL   ??ZDP_ServerDiscReq?relay
   \   00041B   E9           MOV     A,R1
   \   00041C   85..82       MOV     DPL,?XSP + 0
   \   00041F   85..83       MOV     DPH,?XSP + 1
   \   000422   F0           MOVX    @DPTR,A
   \   000423                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000423   AC82         MOV     R4,DPL
   \   000425   AD83         MOV     R5,DPH
   \   000427   7B01         MOV     R3,#0x1
   \   000429   AA..         MOV     R2,?V0 + 3
   \   00042B   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    241                break;
    242          #endif
    243          
    244          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    245              case MT_ZDO_END_DEV_BIND_REQ:
    246                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00042E                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   00042E   12....       LCALL   ??MT_ZdoEndDevBindRequest?relay
    247                break;
   \   000431   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    248          #endif
    249          
    250          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    251              case MT_ZDO_BIND_REQ:
    252                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000434                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000434   12....       LCALL   ??MT_ZdoBindRequest?relay
    253                break;
   \   000437   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    254          #endif
    255          
    256          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    257              case MT_ZDO_UNBIND_REQ:
    258                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   00043A                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   00043A   12....       LCALL   ??MT_ZdoUnbindRequest?relay
    259                break;
   \   00043D   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    260          #endif
    261                
    262          #if defined ( ZDO_LINK_KEY_MANAGEMENT )
    263              case MT_ZDO_SET_LINK_KEY:
    264                MT_ZdoSetLinkKey(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   000440   88..         MOV     ?V0 + 2,R0
   \   000442   EA           MOV     A,R2
   \   000443   2403         ADD     A,#0x3
   \   000445   FC           MOV     R4,A
   \   000446   EB           MOV     A,R3
   \   000447   3400         ADDC    A,#0x0
   \   000449   FD           MOV     R5,A
   \   00044A   8C82         MOV     DPL,R4
   \   00044C   8D83         MOV     DPH,R5
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   F8           MOV     R0,A
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   FB           MOV     R3,A
   \   000453   E8           MOV     A,R0
   \   000454   FA           MOV     R2,A
   \   000455   EC           MOV     A,R4
   \   000456   2402         ADD     A,#0x2
   \   000458   0C           INC     R4
   \   000459   0C           INC     R4
   \   00045A   ED           MOV     A,R5
   \   00045B   3400         ADDC    A,#0x0
   \   00045D   FD           MOV     R5,A
   \   00045E                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   00045E   EC           MOV     A,R4
   \   00045F   2408         ADD     A,#0x8
   \   000461   F5..         MOV     ?V0 + 0,A
   \   000463   ED           MOV     A,R5
   \   000464   3400         ADDC    A,#0x0
   \   000466   F5..         MOV     ?V0 + 1,A
   \   000468   78..         MOV     R0,#?V0 + 0
   \   00046A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00046D   12....       LCALL   ??ZDSecMgrAddLinkKey?relay
   \   000470   7402         MOV     A,#0x2
   \   000472   12....       LCALL   ?DEALLOC_XSTACK8
   \   000475   E9           MOV     A,R1
   \   000476   85..82       MOV     DPL,?XSP + 0
   \   000479   85..83       MOV     DPH,?XSP + 1
   \   00047C   F0           MOVX    @DPTR,A
   \   00047D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00047D   AC82         MOV     R4,DPL
   \   00047F   AD83         MOV     R5,DPH
   \   000481   7B01         MOV     R3,#0x1
   \   000483   AA..         MOV     R2,?V0 + 2
   \   000485   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    265                break;
    266          
    267              case MT_ZDO_REMOVE_LINK_KEY:
    268                MT_ZdoRemoveLinkKey(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   000488   E8           MOV     A,R0
   \   000489   FF           MOV     R7,A
   \   00048A                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   00048A   EA           MOV     A,R2
   \   00048B   2403         ADD     A,#0x3
   \   00048D   0A           INC     R2
   \   00048E   0A           INC     R2
   \   00048F   0A           INC     R2
   \   000490   EB           MOV     A,R3
   \   000491   3400         ADDC    A,#0x0
   \   000493   FB           MOV     R3,A
   \   000494   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
   \   000497   E9           MOV     A,R1
   \   000498   85..82       MOV     DPL,?XSP + 0
   \   00049B   85..83       MOV     DPH,?XSP + 1
   \   00049E   F0           MOVX    @DPTR,A
   \   00049F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00049F   AC82         MOV     R4,DPL
   \   0004A1   AD83         MOV     R5,DPH
   \   0004A3   7B01         MOV     R3,#0x1
   \   0004A5   EF           MOV     A,R7
   \   0004A6   FA           MOV     R2,A
   \   0004A7   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    269                break;
    270          
    271              case MT_ZDO_GET_LINK_KEY:
    272                MT_ZdoGetLinkKey(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0004AA                ; Setup parameters for call to function MT_ZdoGetLinkKey
   \   0004AA   12....       LCALL   ??MT_ZdoGetLinkKey?relay
    273                break;
   \   0004AD   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
    274          #endif      
    275          
    276          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    277              case MT_ZDO_MGMT_NWKDISC_REQ:
    278                MT_ZdoMgmtNwkDiscRequest(pBuf);
    279                break;
    280          #endif
    281          
    282          #if defined ( ZDO_MGMT_LQI_REQUEST )
    283              case MT_ZDO_MGMT_LQI_REQ:
    284                MT_ZdoMgmtLqiRequest(pBuf);
    285                break;
    286          #endif
    287          
    288          #if defined ( ZDO_MGMT_RTG_REQUEST )
    289              case MT_ZDO_MGMT_RTG_REQ:
    290                MT_ZdoMgmtRtgRequest(pBuf);
    291                break;
    292          #endif
    293          
    294          #if defined ( ZDO_MGMT_BIND_REQUEST )
    295              case MT_ZDO_MGMT_BIND_REQ:
    296                MT_ZdoMgmtBindRequest(pBuf);
    297                break;
    298          #endif
    299          
    300          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    301              case MT_ZDO_MGMT_LEAVE_REQ:
    302                MT_ZdoMgmtLeaveRequest(pBuf);
    303                break;
    304          #endif
    305          
    306          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    307              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    308                MT_ZdoMgmtDirectJoinRequest(pBuf);
    309                break;
    310          #endif
    311          
    312          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    313              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    314                MT_ZdoMgmtPermitJoinRequest(pBuf);
    315                break;
    316          #endif
    317          
    318          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    319              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    320                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    321                break;
    322          #endif 
    323          
    324          #if defined ( ZDO_NETWORKSTART_REQUEST )
    325              case MT_ZDO_STARTUP_FROM_APP:
    326                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   0004B0   8A82         MOV     DPL,R2
   \   0004B2   8B83         MOV     DPH,R3
   \   0004B4   A3           INC     DPTR
   \   0004B5   E0           MOVX    A,@DPTR
   \   0004B6   F5..         MOV     ?V0 + 1,A
   \   0004B8   88..         MOV     ?V0 + 0,R0
   \   0004BA                ; Setup parameters for call to function ZDOInitDevice
   \   0004BA   7A64         MOV     R2,#0x64
   \   0004BC   7B00         MOV     R3,#0x0
   \   0004BE   12....       LCALL   ??ZDOInitDevice?relay
   \   0004C1   E9           MOV     A,R1
   \   0004C2   85..82       MOV     DPL,?XSP + 0
   \   0004C5   85..83       MOV     DPH,?XSP + 1
   \   0004C8   F0           MOVX    @DPTR,A
   \   0004C9   74E0         MOV     A,#-0x20
   \   0004CB   55..         ANL     A,?V0 + 1
   \   0004CD   6420         XRL     A,#0x20
   \   0004CF   6003         JZ      $+5
   \   0004D1   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
   \   0004D4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0004D4   AC82         MOV     R4,DPL
   \   0004D6   AD83         MOV     R5,DPH
   \   0004D8   7B01         MOV     R3,#0x1
   \   0004DA   AA..         MOV     R2,?V0 + 0
   \   0004DC   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    327                break;
    328          #endif
    329          
    330              case MT_ZDO_MSG_CB_REGISTER:
    331                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_18:
   \   0004DF   8A82         MOV     DPL,R2
   \   0004E1   8B83         MOV     DPH,R3
   \   0004E3   A3           INC     DPTR
   \   0004E4   E0           MOVX    A,@DPTR
   \   0004E5   F5..         MOV     ?V0 + 6,A
   \   0004E7   88..         MOV     ?V0 + 1,R0
   \   0004E9   EA           MOV     A,R2
   \   0004EA   2403         ADD     A,#0x3
   \   0004EC   F582         MOV     DPL,A
   \   0004EE   EB           MOV     A,R3
   \   0004EF   3400         ADDC    A,#0x0
   \   0004F1   F583         MOV     DPH,A
   \   0004F3                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0004F3   E0           MOVX    A,@DPTR
   \   0004F4   F8           MOV     R0,A
   \   0004F5   A3           INC     DPTR
   \   0004F6   E0           MOVX    A,@DPTR
   \   0004F7   FB           MOV     R3,A
   \   0004F8   E8           MOV     A,R0
   \   0004F9   FA           MOV     R2,A
   \   0004FA   90....       MOV     DPTR,#MT_TaskID
   \   0004FD   E0           MOVX    A,@DPTR
   \   0004FE   F9           MOV     R1,A
   \   0004FF   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000502   E9           MOV     A,R1
   \   000503   85..82       MOV     DPL,?XSP + 0
   \   000506   85..83       MOV     DPH,?XSP + 1
   \   000509   F0           MOVX    @DPTR,A
   \   00050A   74E0         MOV     A,#-0x20
   \   00050C   55..         ANL     A,?V0 + 6
   \   00050E   6420         XRL     A,#0x20
   \   000510   704B         JNZ     ??MT_ZdoCommandProcessing_23
   \   000512                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000512   AC82         MOV     R4,DPL
   \   000514   AD83         MOV     R5,DPH
   \   000516   7B01         MOV     R3,#0x1
   \   000518   AA..         MOV     R2,?V0 + 1
   \   00051A   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    332                break;
    333          
    334              case MT_ZDO_MSG_CB_REMOVE:
    335                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   00051D   8A82         MOV     DPL,R2
   \   00051F   8B83         MOV     DPH,R3
   \   000521   A3           INC     DPTR
   \   000522   E0           MOVX    A,@DPTR
   \   000523   F5..         MOV     ?V0 + 8,A
   \   000525   88..         MOV     ?V0 + 6,R0
   \   000527   EA           MOV     A,R2
   \   000528   2403         ADD     A,#0x3
   \   00052A   F582         MOV     DPL,A
   \   00052C   EB           MOV     A,R3
   \   00052D   3400         ADDC    A,#0x0
   \   00052F   F583         MOV     DPH,A
   \   000531                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000531   E0           MOVX    A,@DPTR
   \   000532   F8           MOV     R0,A
   \   000533   A3           INC     DPTR
   \   000534   E0           MOVX    A,@DPTR
   \   000535   FB           MOV     R3,A
   \   000536   E8           MOV     A,R0
   \   000537   FA           MOV     R2,A
   \   000538   90....       MOV     DPTR,#MT_TaskID
   \   00053B   E0           MOVX    A,@DPTR
   \   00053C   F9           MOV     R1,A
   \   00053D   12....       LCALL   ??ZDO_RemoveRegisteredCB?relay
   \   000540   E9           MOV     A,R1
   \   000541   85..82       MOV     DPL,?XSP + 0
   \   000544   85..83       MOV     DPH,?XSP + 1
   \   000547   F0           MOVX    @DPTR,A
   \   000548   74E0         MOV     A,#-0x20
   \   00054A   55..         ANL     A,?V0 + 8
   \   00054C   6420         XRL     A,#0x20
   \   00054E   700D         JNZ     ??MT_ZdoCommandProcessing_23
   \   000550                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000550   AC82         MOV     R4,DPL
   \   000552   AD83         MOV     R5,DPH
   \   000554   7B01         MOV     R3,#0x1
   \   000556   AA..         MOV     R2,?V0 + 6
   \   000558   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    336                break;
    337          
    338              default:
    339                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_21:
   \   00055B   0E           INC     R6
   \   00055C   0E           INC     R6
    340                break;
    341            }
    342          
    343            return status;
   \                     ??MT_ZdoCommandProcessing_23:
   \   00055D   EE           MOV     A,R6
   \   00055E   F9           MOV     R1,A
   \   00055F   740A         MOV     A,#0xa
   \   000561   12....       LCALL   ?DEALLOC_XSTACK8
   \   000564   7F0F         MOV     R7,#0xf
   \   000566   02....       LJMP    ?BANKED_LEAVE_XDATA
    344          }
    345          
    346          /***************************************************************************************************
    347           * @fn      MT_ZdoNwkAddrReq
    348           *
    349           * @brief   Handle a nwk address request.
    350           *
    351           * @param   pData  - MT message data
    352           *
    353           * @return  void
    354           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    355          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    356          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    357            uint8 cmdId;
    358            uint8 retValue;
    359            uint8 reqType;
    360            uint8 startIndex;
    361            uint8 *pExtAddr;
    362          
    363            /* parse header */
    364            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    365            pBuf += MT_RPC_FRAME_HDR_SZ;
    366          
    367            /* parse parameters */
    368            pExtAddr = pBuf;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   FF           MOV     R7,A
    369            pBuf += Z_EXTADDR_LEN;
   \   00001B   EE           MOV     A,R6
   \   00001C   2408         ADD     A,#0x8
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   3400         ADDC    A,#0x0
   \   000022   FB           MOV     R3,A
    370          
    371            /* Request type */
    372            reqType = *pBuf++;
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   A3           INC     DPTR
    373          
    374            /* Start index */
    375            startIndex = *pBuf;
    376          
    377            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   00002A                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FC           MOV     R4,A
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   000035                REQUIRE ?Subroutine4
   \   000035                ; // Fall through to label ?Subroutine4
    378          
    379            /* Build and send back the response */
    380            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC82         MOV     R4,DPL
   \   00000A   AD83         MOV     R5,DPH
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   AA..         MOV     R2,?V0 + 0
   \   000010   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7965         MOV     R1,#0x65
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005                REQUIRE ??Subroutine6_0
   \   000005                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   80..         SJMP    ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F01         MOV     R7,#0x1
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    382          
    383          /***************************************************************************************************
    384           * @fn      MT_ZdoIEEEAddrRequest
    385           *
    386           * @brief   Handle a IEEE address request.
    387           *
    388           * @param   pData  - MT message data
    389           *
    390           * @return  void
    391           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    393          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    394            uint8 cmdId;
    395            uint8 retValue;
    396            uint16 shortAddr;
    397            uint8 reqType;
    398            uint8 startIndex;
    399          
    400            /* parse header */
    401            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    402            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   0A           INC     R2
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   FB           MOV     R3,A
    403          
    404            /* Dev address */
    405            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   EC           MOV     A,R4
   \   000027   2400         ADD     A,#0x0
   \   000029   FE           MOV     R6,A
   \   00002A   E4           CLR     A
   \   00002B   39           ADDC    A,R1
   \   00002C   FF           MOV     R7,A
    406            pBuf += 2;
   \   00002D   EA           MOV     A,R2
   \   00002E   2402         ADD     A,#0x2
   \   000030   0A           INC     R2
   \   000031   0A           INC     R2
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   FB           MOV     R3,A
    407          
    408            /* request type */
    409            reqType = *pBuf++;
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   A3           INC     DPTR
    410          
    411            /* start index */
    412            startIndex = *pBuf;
    413          
    414            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \   00003D                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   EE           MOV     A,R6
   \   000042   FA           MOV     R2,A
   \   000043   EF           MOV     A,R7
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   ??ZDP_IEEEAddrReq?relay
   \   000048   80..         SJMP    ?Subroutine4
    415          
    416            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    417          }
    418          
    419          /***************************************************************************************************
    420           * @fn      MT_ZdoNodeDescRequest
    421           *
    422           * @brief   Handle a Node Descriptor request.
    423           *
    424           * @param   pData  - MT message data
    425           *
    426           * @return  void
    427           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   12....       LCALL   ?XSTACK_DISP0_8
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   00000A                REQUIRE ??Subroutine8_0
   \   00000A                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   E9           MOV     A,R1
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000D   AC82         MOV     R4,DPL
   \   00000F   AD83         MOV     R5,DPH
   \   000011   7B01         MOV     R3,#0x1
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   7965         MOV     R1,#0x65
   \   000017   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   00001A   740A         MOV     A,#0xa
   \   00001C                REQUIRE ??Subroutine9_0
   \   00001C                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    429          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    430            uint8 cmdId;
    431            uint8 retValue;
    432            zAddrType_t destAddr;
    433            uint16 shortAddr;
    434          
    435            /* parse header */
    436            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    437            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    438          
    439            /* Destination address */
    440            destAddr.addrMode = Addr16Bit;
   \   00001C   7409         MOV     A,#0x9
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    441            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EC           MOV     A,R4
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    442            pBuf += 2;
   \   000039   EA           MOV     A,R2
   \   00003A   2402         ADD     A,#0x2
   \   00003C   0A           INC     R2
   \   00003D   0A           INC     R2
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
    443          
    444            /* Network address of interest */
    445            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    446            pBuf += 2;
    447          
    448            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \   000042                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000042   75..00       MOV     ?V0 + 0,#0x0
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   7902         MOV     R1,#0x2
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FC           MOV     R4,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FB           MOV     R3,A
   \   000055   EC           MOV     A,R4
   \   000056   2400         ADD     A,#0x0
   \   000058   E4           CLR     A
   \   000059   3B           ADDC    A,R3
   \   00005A   FD           MOV     R5,A
   \   00005B   E9           MOV     A,R1
   \   00005C   02....       LJMP    ??Subroutine7_0 & 0xFFFF
    449          
    450            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    451          }
    452          
    453          /***************************************************************************************************
    454           * @fn      MT_ZdoPowerDescRequest
    455           *
    456           * @brief   Handle a Power Descriptor request.
    457           *
    458           * @param   pData  - MT message data
    459           *
    460           * @return  void
    461           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   EC           MOV     A,R4
   \   00000A   2400         ADD     A,#0x0
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   FD           MOV     R5,A
   \   00000F   7402         MOV     A,#0x2
   \   000011                REQUIRE ??Subroutine7_0
   \   000011                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    463          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    464            uint8 cmdId;
    465            uint8 retValue;
    466            zAddrType_t destAddr;
    467            uint16 shortAddr;
    468          
    469            /* parse header */
    470            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    471            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    472          
    473            /* Dev address */
    474            destAddr.addrMode = Addr16Bit;
   \   00001C   7409         MOV     A,#0x9
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    475            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EC           MOV     A,R4
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    476            pBuf += 2;
   \   000039   EA           MOV     A,R2
   \   00003A   2402         ADD     A,#0x2
   \   00003C   0A           INC     R2
   \   00003D   0A           INC     R2
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
    477          
    478            /* Network address of interest */
    479            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    480            pBuf += 2;
    481          
    482            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \   000042                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000042   75..00       MOV     ?V0 + 0,#0x0
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   7903         MOV     R1,#0x3
   \   00004C   02....       LJMP    ?Subroutine0 & 0xFFFF
    483          
    484            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    485          }
    486          
    487          /***************************************************************************************************
    488           * @fn      MT_ZdoSimpleDescRequest
    489           *
    490           * @brief   Handle a Simple Descriptor request.
    491           *
    492           * @param   pBuf  - MT message data
    493           *
    494           * @return  void
    495           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    497          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    498            uint8 cmdId;
    499            uint8 retValue;
    500            uint8 epInt;
    501            zAddrType_t destAddr;
    502            uint16 shortAddr;
    503          
    504            /* parse header */
    505            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    506            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    507          
    508            /* Dev address */
    509            destAddr.addrMode = Addr16Bit;
   \   00001C   7409         MOV     A,#0x9
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    510            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EC           MOV     A,R4
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    511            pBuf += 2;
   \   000039   EA           MOV     A,R2
   \   00003A   2402         ADD     A,#0x2
   \   00003C   0A           INC     R2
   \   00003D   0A           INC     R2
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
    512          
    513            /* Network address of interest */
    514            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    515            pBuf += 2;
    516          
    517            /* endpoint/interface */
    518            epInt = *pBuf++;
    519          
    520            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \   000042                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000042   75..00       MOV     ?V0 + 0,#0x0
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FC           MOV     R4,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FB           MOV     R3,A
   \   00005B   EC           MOV     A,R4
   \   00005C   2400         ADD     A,#0x0
   \   00005E   E4           CLR     A
   \   00005F   3B           ADDC    A,R3
   \   000060   FD           MOV     R5,A
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??ZDP_SimpleDescReq?relay
   \   00006D   02....       LJMP    ??Subroutine8_0 & 0xFFFF
    521          
    522            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    523          }
    524          
    525          /***************************************************************************************************
    526           * @fn      MT_ZdoActiveEpRequest
    527           *
    528           * @brief   Handle a Active EP request.
    529           *
    530           * @param   pBuf  - MT message data
    531           *
    532           * @return  void
    533           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    535          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    536            uint8 cmdId;
    537            uint8 retValue;
    538            zAddrType_t destAddr;
    539            uint16 shortAddr;
    540          
    541            /* parse header */
    542            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    543            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    544          
    545            /* Dev address */
    546            destAddr.addrMode = Addr16Bit;
   \   00001C   7409         MOV     A,#0x9
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    547            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EC           MOV     A,R4
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    548            pBuf += 2;
   \   000039   EA           MOV     A,R2
   \   00003A   2402         ADD     A,#0x2
   \   00003C   0A           INC     R2
   \   00003D   0A           INC     R2
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
    549          
    550            /* Network address of interest */
    551            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    552            pBuf += 2;
    553          
    554            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \   000042                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000042   75..00       MOV     ?V0 + 0,#0x0
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   7905         MOV     R1,#0x5
   \   00004C   02....       LJMP    ?Subroutine0 & 0xFFFF
    555          
    556            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    557          }
    558          
    559          /***************************************************************************************************
    560           * @fn      MT_ZdoMatchDescRequest
    561           *
    562           * @brief   Handle a Match Descriptor request.
    563           *
    564           * @param   pBuf  - MT message data
    565           *
    566           * @return  void
    567           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    568          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    569          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    570            uint8 cmdId;
    571            uint8 retValue = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
    572            uint8 i, numInClusters, numOutClusters;
    573            uint16 profileId;
    574            zAddrType_t destAddr;
    575            uint16 shortAddr;
    576            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    577          
    578            /* parse header */
    579            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 0,A
    580            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   EA           MOV     A,R2
   \   00001C   2403         ADD     A,#0x3
   \   00001E   0A           INC     R2
   \   00001F   0A           INC     R2
   \   000020   0A           INC     R2
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   FB           MOV     R3,A
    581          
    582            /* Dev address */
    583            destAddr.addrMode = Addr16Bit;
   \   000025   7409         MOV     A,#0x9
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   7402         MOV     A,#0x2
   \   00002C   F0           MOVX    @DPTR,A
    584            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FC           MOV     R4,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   EC           MOV     A,R4
   \   000037   F8           MOV     R0,A
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E9           MOV     A,R1
   \   000041   F0           MOVX    @DPTR,A
    585            pBuf += 2;
   \   000042   EA           MOV     A,R2
   \   000043   2402         ADD     A,#0x2
   \   000045   0A           INC     R2
   \   000046   0A           INC     R2
   \   000047   EB           MOV     A,R3
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FB           MOV     R3,A
    586          
    587            /* Network address of interest */
    588            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FC           MOV     R4,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   EC           MOV     A,R4
   \   000055   2400         ADD     A,#0x0
   \   000057   FE           MOV     R6,A
   \   000058   E4           CLR     A
   \   000059   39           ADDC    A,R1
   \   00005A   FF           MOV     R7,A
    589            pBuf += 2;
   \   00005B   EA           MOV     A,R2
   \   00005C   2402         ADD     A,#0x2
   \   00005E   0A           INC     R2
   \   00005F   0A           INC     R2
   \   000060   EB           MOV     A,R3
   \   000061   3400         ADDC    A,#0x0
   \   000063   FB           MOV     R3,A
    590          
    591            /* Profile ID */
    592            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FC           MOV     R4,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   EC           MOV     A,R4
   \   00006E   2400         ADD     A,#0x0
   \   000070   E4           CLR     A
   \   000071   39           ADDC    A,R1
   \   000072   FD           MOV     R5,A
    593            pBuf += 2;
   \   000073   EA           MOV     A,R2
   \   000074   2402         ADD     A,#0x2
   \   000076   0A           INC     R2
   \   000077   0A           INC     R2
   \   000078   EB           MOV     A,R3
   \   000079   3400         ADDC    A,#0x0
   \   00007B   FB           MOV     R3,A
    594          
    595            /* NumInClusters */
    596            numInClusters = *pBuf++;
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 3,A
   \   000083   A3           INC     DPTR
   \   000084   AA82         MOV     R2,DPL
   \   000086   AB83         MOV     R3,DPH
    597            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000088   C3           CLR     C
   \   000089   9411         SUBB    A,#0x11
   \   00008B   5040         JNC     ??MT_ZdoMatchDescRequest_0
    598            {
    599              /* IN clusters */
    600              for ( i = 0; i < numInClusters; i++ )
   \   00008D   E5..         MOV     A,?V0 + 3
   \   00008F   6045         JZ      ??MT_ZdoMatchDescRequest_1
   \   000091   742A         MOV     A,#0x2a
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   A882         MOV     R0,DPL
   \   000098   A983         MOV     R1,DPH
   \   00009A   85....       MOV     ?V0 + 1,?V0 + 3
    601              {
    602                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00009D   8A82         MOV     DPL,R2
   \   00009F   8B83         MOV     DPH,R3
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F5..         MOV     ?V0 + 6,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F5..         MOV     ?V0 + 5,A
   \   0000A8   E5..         MOV     A,?V0 + 6
   \   0000AA   8882         MOV     DPL,R0
   \   0000AC   8983         MOV     DPH,R1
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E5..         MOV     A,?V0 + 5
   \   0000B2   F0           MOVX    @DPTR,A
    603                pBuf += 2;
   \   0000B3   EA           MOV     A,R2
   \   0000B4   2402         ADD     A,#0x2
   \   0000B6   0A           INC     R2
   \   0000B7   0A           INC     R2
   \   0000B8   EB           MOV     A,R3
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   FB           MOV     R3,A
    604              }
   \   0000BC   E8           MOV     A,R0
   \   0000BD   2402         ADD     A,#0x2
   \   0000BF   08           INC     R0
   \   0000C0   08           INC     R0
   \   0000C1   E9           MOV     A,R1
   \   0000C2   3400         ADDC    A,#0x0
   \   0000C4   F9           MOV     R1,A
   \   0000C5   15..         DEC     ?V0 + 1
   \   0000C7   E5..         MOV     A,?V0 + 1
   \   0000C9   600B         JZ      ??MT_ZdoMatchDescRequest_1
   \   0000CB   80D0         SJMP    ??MT_ZdoMatchDescRequest_2
    605            }
    606            else
    607            {
    608              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   7480         MOV     A,#-0x80
   \   0000D5   F0           MOVX    @DPTR,A
    609            }
    610          
    611            /* NumOutClusters */
    612            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_1:
   \   0000D6   8A82         MOV     DPL,R2
   \   0000D8   8B83         MOV     DPH,R3
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F5..         MOV     ?V0 + 8,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   AA82         MOV     R2,DPL
   \   0000E0   AB83         MOV     R3,DPH
    613            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   0000E2   C3           CLR     C
   \   0000E3   9411         SUBB    A,#0x11
   \   0000E5   4003         JC      $+5
   \   0000E7   02....       LJMP    ??MT_ZdoMatchDescRequest_3 & 0xFFFF
    614            {
    615              /* OUT Clusters */
    616              for ( i = 0; i < numOutClusters; i++ )
   \   0000EA   E5..         MOV     A,?V0 + 8
   \   0000EC   603A         JZ      ??MT_ZdoMatchDescRequest_4
   \   0000EE   740A         MOV     A,#0xa
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   A882         MOV     R0,DPL
   \   0000F5   A983         MOV     R1,DPH
   \   0000F7   85....       MOV     ?V0 + 2,?V0 + 8
    617              {
    618                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??MT_ZdoMatchDescRequest_5:
   \   0000FA   8A82         MOV     DPL,R2
   \   0000FC   8B83         MOV     DPH,R3
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F5..         MOV     ?V0 + 6,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F5..         MOV     ?V0 + 5,A
   \   000105   E5..         MOV     A,?V0 + 6
   \   000107   8882         MOV     DPL,R0
   \   000109   8983         MOV     DPH,R1
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   E5..         MOV     A,?V0 + 5
   \   00010F   F0           MOVX    @DPTR,A
    619                pBuf += 2;
   \   000110   EA           MOV     A,R2
   \   000111   2402         ADD     A,#0x2
   \   000113   0A           INC     R2
   \   000114   0A           INC     R2
   \   000115   EB           MOV     A,R3
   \   000116   3400         ADDC    A,#0x0
   \   000118   FB           MOV     R3,A
    620              }
   \   000119   E8           MOV     A,R0
   \   00011A   2402         ADD     A,#0x2
   \   00011C   08           INC     R0
   \   00011D   08           INC     R0
   \   00011E   E9           MOV     A,R1
   \   00011F   3400         ADDC    A,#0x0
   \   000121   F9           MOV     R1,A
   \   000122   15..         DEC     ?V0 + 2
   \   000124   E5..         MOV     A,?V0 + 2
   \   000126   70D2         JNZ     ??MT_ZdoMatchDescRequest_5
    621            }
    622            else
    623            {
    624              retValue = ZDP_INVALID_REQTYPE;
    625            }
    626          
    627            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_4:
   \   000128   85..82       MOV     DPL,?XSP + 0
   \   00012B   85..83       MOV     DPH,?XSP + 1
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   7059         JNZ     ??MT_ZdoMatchDescRequest_6
    628            {
    629              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    630                                                 inClusters, numOutClusters, outClusters, 0);
   \   000131                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000131   75..00       MOV     ?V0 + 4,#0x0
   \   000134   78..         MOV     R0,#?V0 + 4
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000139   740B         MOV     A,#0xb
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   8582..       MOV     ?V0 + 4,DPL
   \   000141   8583..       MOV     ?V0 + 5,DPH
   \   000144   78..         MOV     R0,#?V0 + 4
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   E5..         MOV     A,?V0 + 8
   \   00014B   F5..         MOV     ?V0 + 4,A
   \   00014D   78..         MOV     R0,#?V0 + 4
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000152   742E         MOV     A,#0x2e
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   8582..       MOV     ?V0 + 4,DPL
   \   00015A   8583..       MOV     ?V0 + 5,DPH
   \   00015D   78..         MOV     R0,#?V0 + 4
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   8C..         MOV     ?V0 + 4,R4
   \   000164   8D..         MOV     ?V0 + 5,R5
   \   000166   78..         MOV     R0,#?V0 + 4
   \   000168   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016B   A9..         MOV     R1,?V0 + 3
   \   00016D   EE           MOV     A,R6
   \   00016E   FC           MOV     R4,A
   \   00016F   EF           MOV     A,R7
   \   000170   FD           MOV     R5,A
   \   000171   7409         MOV     A,#0x9
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   AA82         MOV     R2,DPL
   \   000178   AB83         MOV     R3,DPH
   \   00017A   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   00017D   7408         MOV     A,#0x8
   \   00017F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000182   E9           MOV     A,R1
   \   000183   85..82       MOV     DPL,?XSP + 0
   \   000186   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_7:
   \   000189   F0           MOVX    @DPTR,A
    631            }
    632          
    633            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_6:
   \   00018A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00018A   AC82         MOV     R4,DPL
   \   00018C   AD83         MOV     R5,DPH
   \   00018E   7B01         MOV     R3,#0x1
   \   000190   AA..         MOV     R2,?V0 + 0
   \   000192   7965         MOV     R1,#0x65
   \   000194   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    634          }
   \   000197   744A         MOV     A,#0x4a
   \   000199   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019C   7F09         MOV     R7,#0x9
   \   00019E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_ZdoMatchDescRequest_3:
   \   0001A1   85..82       MOV     DPL,?XSP + 0
   \   0001A4   85..83       MOV     DPH,?XSP + 1
   \   0001A7   7480         MOV     A,#-0x80
   \   0001A9   80DE         SJMP    ??MT_ZdoMatchDescRequest_7
    635          
    636          /***************************************************************************************************
    637           * @fn      MT_ZdoComplexDescRequest
    638           *
    639           * @brief   Handle a Complex Descriptor request.
    640           *
    641           * @param   pBuf  - MT message data
    642           *
    643           * @return  void
    644           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    646          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    647            uint8 cmdId;
    648            uint8 retValue;
    649            zAddrType_t destAddr;
    650            uint16 shortAddr;
    651          
    652            /* parse header */
    653            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    654            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    655          
    656            /* Dev address */
    657            destAddr.addrMode = Addr16Bit;
   \   00001C   7409         MOV     A,#0x9
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    658            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EC           MOV     A,R4
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    659            pBuf += 2;
   \   000039   EA           MOV     A,R2
   \   00003A   2402         ADD     A,#0x2
   \   00003C   0A           INC     R2
   \   00003D   0A           INC     R2
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
    660          
    661            /* Network address of interest */
    662            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    663            pBuf += 2;
    664          
    665            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \   000042                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000042   75..00       MOV     ?V0 + 0,#0x0
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   7910         MOV     R1,#0x10
   \   00004C   02....       LJMP    ?Subroutine0 & 0xFFFF
    666          
    667            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    668          }
    669          
    670          /***************************************************************************************************
    671           * @fn      MT_ZdoUserDescRequest
    672           *
    673           * @brief   Handle a User Descriptor request.
    674           *
    675           * @param   pBuf  - MT message data
    676           *
    677           * @return  void
    678           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    679          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    680          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    681            uint8 cmdId;
    682            uint8 retValue;
    683            zAddrType_t destAddr;
    684            uint16 shortAddr;
    685          
    686            /* parse header */
    687            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    688            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    689          
    690            /* Dev address */
    691            destAddr.addrMode = Addr16Bit;
   \   00001C   7409         MOV     A,#0x9
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    692            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EC           MOV     A,R4
   \   00002E   F8           MOV     R0,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
    693            pBuf += 2;
   \   000039   EA           MOV     A,R2
   \   00003A   2402         ADD     A,#0x2
   \   00003C   0A           INC     R2
   \   00003D   0A           INC     R2
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
    694          
    695            /* Network address of interest */
    696            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    697            pBuf += 2;
    698          
    699            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \   000042                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000042   75..00       MOV     ?V0 + 0,#0x0
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   7911         MOV     R1,#0x11
   \   00004C   02....       LJMP    ?Subroutine0 & 0xFFFF
    700          
    701            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    702          }
    703          
    704          /***************************************************************************************************
    705           * @fn      MT_ZdoEndDevAnnce
    706           *
    707           * @brief   Handle a End Device Announce Descriptor request.
    708           *
    709           * @param   pBuf  - MT message data
    710           *
    711           * @return  void
    712           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC82         MOV     R4,DPL
   \   00000A   AD83         MOV     R5,DPH
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010                REQUIRE ??Subroutine5_0
   \   000010                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    713          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    714          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
    715            uint8 cmdId;
    716            uint8 retValue;
    717            uint16 shortAddr;
    718            uint8 *pIEEEAddr;
    719          
    720            /* parse header */
    721            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
    722            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   EC           MOV     A,R4
   \   000017   2403         ADD     A,#0x3
   \   000019   0C           INC     R4
   \   00001A   0C           INC     R4
   \   00001B   0C           INC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FD           MOV     R5,A
    723          
    724            /* network address */
    725            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   E4           CLR     A
   \   00002A   C8           XCH     A,R0
   \   00002B   F9           MOV     R1,A
   \   00002C   EA           MOV     A,R2
   \   00002D   2400         ADD     A,#0x0
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FB           MOV     R3,A
    726            pBuf += 2;
   \   000032   EC           MOV     A,R4
   \   000033   2402         ADD     A,#0x2
   \   000035   0C           INC     R4
   \   000036   0C           INC     R4
   \   000037   ED           MOV     A,R5
   \   000038   3400         ADDC    A,#0x0
   \   00003A   FD           MOV     R5,A
    727          
    728            /* extended address */
    729            pIEEEAddr = pBuf;
    730            pBuf += Z_EXTADDR_LEN;
    731          
    732            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \   00003B                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00003B   88..         MOV     ?V0 + 0,R0
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   02....       LJMP    ?Subroutine3 & 0xFFFF
    733          
    734            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    735          }
    736          
    737          /***************************************************************************************************
    738           * @fn      MT_ZdoUserDescSet
    739           *
    740           * @brief   Handle a User Descriptor Set.
    741           *
    742           * @param   pBuf  - MT message data
    743           *
    744           * @return  void
    745           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    746          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    747          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    748            uint8 cmdId;
    749            uint8 retValue;
    750            zAddrType_t destAddr;
    751            uint16 shortAddr;
    752            UserDescriptorFormat_t userDesc;
    753          
    754            /* parse header */
    755            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 3,A
    756            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   0A           INC     R2
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   FB           MOV     R3,A
    757          
    758            /* Dev address */
    759            destAddr.addrMode = Addr16Bit;
   \   00001D   7409         MOV     A,#0x9
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
    760            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FC           MOV     R4,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   EC           MOV     A,R4
   \   00002F   F8           MOV     R0,A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E8           MOV     A,R0
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E9           MOV     A,R1
   \   000039   F0           MOVX    @DPTR,A
    761            pBuf += 2;
   \   00003A   EA           MOV     A,R2
   \   00003B   2402         ADD     A,#0x2
   \   00003D   0A           INC     R2
   \   00003E   0A           INC     R2
   \   00003F   EB           MOV     A,R3
   \   000040   3400         ADDC    A,#0x0
   \   000042   FB           MOV     R3,A
    762          
    763            /* Network address of interest */
    764            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FC           MOV     R4,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   E4           CLR     A
   \   00004D   C8           XCH     A,R0
   \   00004E   F9           MOV     R1,A
   \   00004F   EC           MOV     A,R4
   \   000050   2400         ADD     A,#0x0
   \   000052   FE           MOV     R6,A
   \   000053   E4           CLR     A
   \   000054   39           ADDC    A,R1
   \   000055   FF           MOV     R7,A
    765            pBuf += 2;
   \   000056   EA           MOV     A,R2
   \   000057   2402         ADD     A,#0x2
   \   000059   0A           INC     R2
   \   00005A   0A           INC     R2
   \   00005B   EB           MOV     A,R3
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   FB           MOV     R3,A
    766          
    767            /* User descriptor */
    768            userDesc.len = *pBuf++;
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C0E0         PUSH    A
   \   000066   740A         MOV     A,#0xa
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   A3           INC     DPTR
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
    769            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   8A..         MOV     ?V0 + 0,R2
   \   000079   8B..         MOV     ?V0 + 1,R3
   \   00007B   88..         MOV     ?V0 + 2,R0
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000082   740D         MOV     A,#0xd
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FC           MOV     R4,A
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   740E         MOV     A,#0xe
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AA82         MOV     R2,DPL
   \   000092   AB83         MOV     R3,DPH
   \   000094   12....       LCALL   ??osal_memcpy?relay
   \   000097   7403         MOV     A,#0x3
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
    770            pBuf += 16;
    771          
    772            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   00009C                ; Setup parameters for call to function ZDP_UserDescSet
   \   00009C   740A         MOV     A,#0xa
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   8582..       MOV     ?V0 + 0,DPL
   \   0000A4   8583..       MOV     ?V0 + 1,DPH
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   EE           MOV     A,R6
   \   0000AF   FC           MOV     R4,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   FD           MOV     R5,A
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   AA82         MOV     R2,DPL
   \   0000B9   AB83         MOV     R3,DPH
   \   0000BB   12....       LCALL   ??ZDP_UserDescSet?relay
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C3   E9           MOV     A,R1
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   F0           MOVX    @DPTR,A
    773          
    774            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   0000CB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000CB   AC82         MOV     R4,DPL
   \   0000CD   AD83         MOV     R5,DPH
   \   0000CF   7B01         MOV     R3,#0x1
   \   0000D1   AA..         MOV     R2,?V0 + 3
   \   0000D3   7965         MOV     R1,#0x65
   \   0000D5   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    775          }
   \   0000D8   741B         MOV     A,#0x1b
   \   0000DA                REQUIRE ?Subroutine1
   \   0000DA                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    776          
    777          /***************************************************************************************************
    778           * @fn      MT_ZdoServiceDiscRequest
    779           *
    780           * @brief   Handle a Server Discovery request.
    781           *
    782           * @param   pBuf  - MT message data
    783           *
    784           * @return  void
    785           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    787          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    788            uint8 cmdId;
    789            uint8 retValue;
    790            uint16 serviceMask;
    791          
    792            /* parse header */
    793            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    794            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
    795          
    796            /* Service Mask */
    797            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    798            pBuf += 2;
    799          
    800            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \   00001C                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   EC           MOV     A,R4
   \   000028   FA           MOV     R2,A
   \   000029   12....       LCALL   ??ZDP_ServerDiscReq?relay
   \   00002C   02....       LJMP    ?Subroutine3 & 0xFFFF
    801          
    802            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    803          }
    804          
    805          /***************************************************************************************************
    806           * @fn      MT_ZdoEndDevBindRequest
    807           *
    808           * @brief   Handle a End Device Bind request.
    809           *
    810           * @param   pBuf  - MT message data
    811           *
    812           * @return  void
    813           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    814          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
    815          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    816            uint8 cmdId;
    817            uint8 retValue = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
    818            uint8 i, epInt, numInClusters, numOutClusters;
    819            zAddrType_t destAddr;
    820            uint16 shortAddr;
    821            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    822          
    823            /* parse header */
    824            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 0,A
    825            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   EA           MOV     A,R2
   \   00001C   2403         ADD     A,#0x3
   \   00001E   0A           INC     R2
   \   00001F   0A           INC     R2
   \   000020   0A           INC     R2
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   FB           MOV     R3,A
    826          
    827            /* Dev address */
    828            destAddr.addrMode = Addr16Bit;
   \   000025   7409         MOV     A,#0x9
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   7402         MOV     A,#0x2
   \   00002C   F0           MOVX    @DPTR,A
    829            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FC           MOV     R4,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   EC           MOV     A,R4
   \   000037   F8           MOV     R0,A
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E9           MOV     A,R1
   \   000041   F0           MOVX    @DPTR,A
    830            pBuf += 2;
   \   000042   EA           MOV     A,R2
   \   000043   2402         ADD     A,#0x2
   \   000045   0A           INC     R2
   \   000046   0A           INC     R2
   \   000047   EB           MOV     A,R3
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FB           MOV     R3,A
    831          
    832            /* Local coordinator of the binding */
    833            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FC           MOV     R4,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   EC           MOV     A,R4
   \   000055   2400         ADD     A,#0x0
   \   000057   FE           MOV     R6,A
   \   000058   E4           CLR     A
   \   000059   39           ADDC    A,R1
   \   00005A   FF           MOV     R7,A
    834            pBuf += 2;
    835            
    836            /* For now, skip past the extended address */
    837            pBuf += Z_EXTADDR_LEN;
   \   00005B   EA           MOV     A,R2
   \   00005C   240A         ADD     A,#0xa
   \   00005E   FA           MOV     R2,A
   \   00005F   EB           MOV     A,R3
   \   000060   3400         ADDC    A,#0x0
   \   000062   FB           MOV     R3,A
    838          
    839            /* Endpoint */
    840            epInt = *pBuf++;
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F5..         MOV     ?V0 + 3,A
   \   00006A   A3           INC     DPTR
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
    841          
    842            /* Profile ID */
    843            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FC           MOV     R4,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   EC           MOV     A,R4
   \   000075   2400         ADD     A,#0x0
   \   000077   E4           CLR     A
   \   000078   39           ADDC    A,R1
   \   000079   FD           MOV     R5,A
    844            pBuf += 2;
   \   00007A   EA           MOV     A,R2
   \   00007B   2402         ADD     A,#0x2
   \   00007D   0A           INC     R2
   \   00007E   0A           INC     R2
   \   00007F   EB           MOV     A,R3
   \   000080   3400         ADDC    A,#0x0
   \   000082   FB           MOV     R3,A
    845          
    846            /* NumInClusters */
    847            numInClusters = *pBuf++;
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F5..         MOV     ?V0 + 4,A
   \   00008A   A3           INC     DPTR
   \   00008B   0A           INC     R2
   \   00008C   AB83         MOV     R3,DPH
    848            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   00008E   C3           CLR     C
   \   00008F   9410         SUBB    A,#0x10
   \   000091   5040         JNC     ??MT_ZdoEndDevBindRequest_0
    849            {
    850              for ( i = 0; i < numInClusters; i++ )
   \   000093   E5..         MOV     A,?V0 + 4
   \   000095   6045         JZ      ??MT_ZdoEndDevBindRequest_1
   \   000097   7428         MOV     A,#0x28
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   A882         MOV     R0,DPL
   \   00009E   A983         MOV     R1,DPH
   \   0000A0   85....       MOV     ?V0 + 1,?V0 + 4
    851              {
    852                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   0000A3   8A82         MOV     DPL,R2
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5..         MOV     ?V0 + 8,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F5..         MOV     ?V0 + 7,A
   \   0000AE   E5..         MOV     A,?V0 + 8
   \   0000B0   8882         MOV     DPL,R0
   \   0000B2   8983         MOV     DPH,R1
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E5..         MOV     A,?V0 + 7
   \   0000B8   F0           MOVX    @DPTR,A
    853                pBuf += 2;
   \   0000B9   EA           MOV     A,R2
   \   0000BA   2402         ADD     A,#0x2
   \   0000BC   0A           INC     R2
   \   0000BD   0A           INC     R2
   \   0000BE   EB           MOV     A,R3
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   FB           MOV     R3,A
    854              }
   \   0000C2   E8           MOV     A,R0
   \   0000C3   2402         ADD     A,#0x2
   \   0000C5   08           INC     R0
   \   0000C6   08           INC     R0
   \   0000C7   E9           MOV     A,R1
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F9           MOV     R1,A
   \   0000CB   15..         DEC     ?V0 + 1
   \   0000CD   E5..         MOV     A,?V0 + 1
   \   0000CF   600B         JZ      ??MT_ZdoEndDevBindRequest_1
   \   0000D1   80D0         SJMP    ??MT_ZdoEndDevBindRequest_2
    855            }
    856            else
    857              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \   0000D9   7480         MOV     A,#-0x80
   \   0000DB   F0           MOVX    @DPTR,A
    858          
    859            /* NumOutClusters */
    860            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   0000DC   8A82         MOV     DPL,R2
   \   0000DE   8B83         MOV     DPH,R3
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F5..         MOV     ?V0 + 5,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   AA82         MOV     R2,DPL
   \   0000E6   AB83         MOV     R3,DPH
    861            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   0000E8   C3           CLR     C
   \   0000E9   9410         SUBB    A,#0x10
   \   0000EB   4003         JC      $+5
   \   0000ED   02....       LJMP    ??MT_ZdoEndDevBindRequest_3 & 0xFFFF
    862            {
    863              for ( i = 0; i < numOutClusters; i++ )
   \   0000F0   E5..         MOV     A,?V0 + 5
   \   0000F2   603A         JZ      ??MT_ZdoEndDevBindRequest_4
   \   0000F4   740A         MOV     A,#0xa
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   A882         MOV     R0,DPL
   \   0000FB   A983         MOV     R1,DPH
   \   0000FD   85....       MOV     ?V0 + 2,?V0 + 5
    864              {
    865                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   000100   8A82         MOV     DPL,R2
   \   000102   8B83         MOV     DPH,R3
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F5..         MOV     ?V0 + 8,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F5..         MOV     ?V0 + 7,A
   \   00010B   E5..         MOV     A,?V0 + 8
   \   00010D   8882         MOV     DPL,R0
   \   00010F   8983         MOV     DPH,R1
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   E5..         MOV     A,?V0 + 7
   \   000115   F0           MOVX    @DPTR,A
    866                pBuf += 2;
   \   000116   EA           MOV     A,R2
   \   000117   2402         ADD     A,#0x2
   \   000119   0A           INC     R2
   \   00011A   0A           INC     R2
   \   00011B   EB           MOV     A,R3
   \   00011C   3400         ADDC    A,#0x0
   \   00011E   FB           MOV     R3,A
    867              }
   \   00011F   E8           MOV     A,R0
   \   000120   2402         ADD     A,#0x2
   \   000122   08           INC     R0
   \   000123   08           INC     R0
   \   000124   E9           MOV     A,R1
   \   000125   3400         ADDC    A,#0x0
   \   000127   F9           MOV     R1,A
   \   000128   15..         DEC     ?V0 + 2
   \   00012A   E5..         MOV     A,?V0 + 2
   \   00012C   70D2         JNZ     ??MT_ZdoEndDevBindRequest_5
    868            }
    869            else
    870              retValue = ZDP_INVALID_REQTYPE;
    871            
    872            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   E0           MOVX    A,@DPTR
   \   000135   705A         JNZ     ??MT_ZdoEndDevBindRequest_6
    873            {
    874              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
    875                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   000137                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000137   75..00       MOV     ?V0 + 6,#0x0
   \   00013A   78..         MOV     R0,#?V0 + 6
   \   00013C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013F   740B         MOV     A,#0xb
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   8582..       MOV     ?V0 + 6,DPL
   \   000147   8583..       MOV     ?V0 + 7,DPH
   \   00014A   78..         MOV     R0,#?V0 + 6
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014F   78..         MOV     R0,#?V0 + 5
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000154   742C         MOV     A,#0x2c
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   8582..       MOV     ?V0 + 6,DPL
   \   00015C   8583..       MOV     ?V0 + 7,DPH
   \   00015F   78..         MOV     R0,#?V0 + 6
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   78..         MOV     R0,#?V0 + 4
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000169   8C..         MOV     ?V0 + 4,R4
   \   00016B   8D..         MOV     ?V0 + 5,R5
   \   00016D   78..         MOV     R0,#?V0 + 4
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000172   A9..         MOV     R1,?V0 + 3
   \   000174   EE           MOV     A,R6
   \   000175   FC           MOV     R4,A
   \   000176   EF           MOV     A,R7
   \   000177   FD           MOV     R5,A
   \   000178   740A         MOV     A,#0xa
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   AA82         MOV     R2,DPL
   \   00017F   AB83         MOV     R3,DPH
   \   000181   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000184   7409         MOV     A,#0x9
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
   \   000189   E9           MOV     A,R1
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   000190   F0           MOVX    @DPTR,A
    876            }
    877          
    878            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   000191                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000191   AC82         MOV     R4,DPL
   \   000193   AD83         MOV     R5,DPH
   \   000195   7B01         MOV     R3,#0x1
   \   000197   AA..         MOV     R2,?V0 + 0
   \   000199   7965         MOV     R1,#0x65
   \   00019B   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    879          }
   \   00019E   7446         MOV     A,#0x46
   \   0001A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A3   7F0A         MOV     R7,#0xa
   \   0001A5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   0001A8   85..82       MOV     DPL,?XSP + 0
   \   0001AB   85..83       MOV     DPH,?XSP + 1
   \   0001AE   7480         MOV     A,#-0x80
   \   0001B0   80DE         SJMP    ??MT_ZdoEndDevBindRequest_7
    880          
    881          /***************************************************************************************************
    882           * @fn      MT_ZdoBindRequest
    883           *
    884           * @brief   Handle a Bind request.
    885           *
    886           * @param   pBuf  - MT message data
    887           *
    888           * @return  void
    889           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
    891          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    892            uint8 cmdId;
    893            uint8 retValue;
    894            zAddrType_t destAddr, devAddr;
    895            uint8 *pSrcAddr, *ptr;
    896            uint8 srcEPInt, dstEPInt;
    897            uint16 clusterID;
    898          
    899            /* parse header */
    900            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
    901            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   0E           INC     R6
   \   00001B   0E           INC     R6
   \   00001C   0E           INC     R6
   \   00001D   EF           MOV     A,R7
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FF           MOV     R7,A
    902          
    903            /* Dev address */
    904            destAddr.addrMode = Addr16Bit;
   \   000021   7412         MOV     A,#0x12
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   7402         MOV     A,#0x2
   \   000028   F0           MOVX    @DPTR,A
    905            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   F8           MOV     R0,A
   \   000034   740A         MOV     A,#0xa
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
    906            pBuf += 2;
    907          
    908            /* SrcAddress */
    909            pSrcAddr = pBuf;
   \   00003E   EE           MOV     A,R6
   \   00003F   2402         ADD     A,#0x2
   \   000041   F5..         MOV     ?V0 + 2,A
   \   000043   EF           MOV     A,R7
   \   000044   3400         ADDC    A,#0x0
   \   000046   F5..         MOV     ?V0 + 3,A
    910            pBuf += Z_EXTADDR_LEN;
   \   000048   E5..         MOV     A,?V0 + 2
   \   00004A   2408         ADD     A,#0x8
   \   00004C   FE           MOV     R6,A
   \   00004D   E5..         MOV     A,?V0 + 3
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FF           MOV     R7,A
    911          
    912            /* SrcEPInt */
    913            srcEPInt = *pBuf++;
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 1,A
   \   000059   A3           INC     DPTR
   \   00005A   AE82         MOV     R6,DPL
   \   00005C   AF83         MOV     R7,DPH
    914          
    915            /* ClusterID */
    916            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   EA           MOV     A,R2
   \   000064   2400         ADD     A,#0x0
   \   000066   F5..         MOV     ?V0 + 6,A
   \   000068   E4           CLR     A
   \   000069   39           ADDC    A,R1
   \   00006A   F5..         MOV     ?V0 + 7,A
    917            pBuf += 2;
   \   00006C   EE           MOV     A,R6
   \   00006D   2402         ADD     A,#0x2
   \   00006F   0E           INC     R6
   \   000070   0E           INC     R6
   \   000071   EF           MOV     A,R7
   \   000072   3400         ADDC    A,#0x0
   \   000074   FF           MOV     R7,A
    918          
    919            /* Destination Address mode */
    920            devAddr.addrMode = *pBuf++;
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   7409         MOV     A,#0x9
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E8           MOV     A,R0
   \   000081   F0           MOVX    @DPTR,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   0E           INC     R6
   \   000088   AF83         MOV     R7,DPH
    921          
    922            /* Destination Address */
    923            if ( devAddr.addrMode == Addr64Bit )
   \   00008A   7403         MOV     A,#0x3
   \   00008C   68           XRL     A,R0
   \   00008D   7012         JNZ     ??MT_ZdoBindRequest_0
    924            {
    925              ptr = pBuf;
    926              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   EE           MOV     A,R6
   \   000090   FC           MOV     R4,A
   \   000091   EF           MOV     A,R7
   \   000092   FD           MOV     R5,A
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   AA82         MOV     R2,DPL
   \   00009A   AB83         MOV     R3,DPH
   \   00009C   12....       LCALL   ??sAddrExtCpy?relay
   \   00009F   8011         SJMP    ??MT_ZdoBindRequest_1
    927            }
    928            else
    929            {
    930              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_0:
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   EA           MOV     A,R2
   \   0000A7   F8           MOV     R0,A
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E8           MOV     A,R0
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E9           MOV     A,R1
   \   0000B1   F0           MOVX    @DPTR,A
    931            }
    932            /* The short address occupies LSB two bytes */
    933            pBuf += Z_EXTADDR_LEN;
    934          
    935            /* DstEPInt */
    936            dstEPInt = *pBuf;
    937          
    938            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoBindRequest_1:
   \   0000B2                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   0000B2   75..00       MOV     ?V0 + 4,#0x0
   \   0000B5   78..         MOV     R0,#?V0 + 4
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V0 + 4,A
   \   0000C9   78..         MOV     R0,#?V0 + 4
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   8582..       MOV     ?V0 + 4,DPL
   \   0000D6   8583..       MOV     ?V0 + 5,DPH
   \   0000D9   78..         MOV     R0,#?V0 + 4
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   78..         MOV     R0,#?V0 + 6
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   78..         MOV     R0,#?V0 + 2
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   A9..         MOV     R1,?V0 + 1
   \   0000EA   7412         MOV     A,#0x12
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   AC82         MOV     R4,DPL
   \   0000F1   AD83         MOV     R5,DPH
   \   0000F3   7A21         MOV     R2,#0x21
   \   0000F5                REQUIRE ?Subroutine2
   \   0000F5                ; // Fall through to label ?Subroutine2
    939          
    940            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    941          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   000005   7408         MOV     A,#0x8
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7B01         MOV     R3,#0x1
   \   000018   AA..         MOV     R2,?V0 + 0
   \   00001A   7965         MOV     R1,#0x65
   \   00001C   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   00001F   7413         MOV     A,#0x13
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   7F08         MOV     R7,#0x8
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    942          
    943          /***************************************************************************************************
    944           * @fn      MT_ZdoUnbindRequest
    945           *
    946           * @brief   Handle a Unbind request.
    947           *
    948           * @param   pBuf  - MT message data
    949           *
    950           * @return  void
    951           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    952          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
    953          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    954            uint8 cmdId;
    955            uint8 retValue;
    956            zAddrType_t destAddr, devAddr;
    957            uint8 *pSrcAddr, *ptr;
    958            uint8 srcEPInt, dstEPInt;
    959            uint16 clusterID;
    960          
    961            /* parse header */
    962            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
    963            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   0E           INC     R6
   \   00001B   0E           INC     R6
   \   00001C   0E           INC     R6
   \   00001D   EF           MOV     A,R7
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FF           MOV     R7,A
    964          
    965            /* dev address */
    966            destAddr.addrMode = Addr16Bit;
   \   000021   7412         MOV     A,#0x12
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   7402         MOV     A,#0x2
   \   000028   F0           MOVX    @DPTR,A
    967            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   F8           MOV     R0,A
   \   000034   740A         MOV     A,#0xa
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
    968            pBuf += 2;
    969          
    970            /* SrcAddress */
    971            pSrcAddr = pBuf;
   \   00003E   EE           MOV     A,R6
   \   00003F   2402         ADD     A,#0x2
   \   000041   F5..         MOV     ?V0 + 2,A
   \   000043   EF           MOV     A,R7
   \   000044   3400         ADDC    A,#0x0
   \   000046   F5..         MOV     ?V0 + 3,A
    972            pBuf += Z_EXTADDR_LEN;
   \   000048   E5..         MOV     A,?V0 + 2
   \   00004A   2408         ADD     A,#0x8
   \   00004C   FE           MOV     R6,A
   \   00004D   E5..         MOV     A,?V0 + 3
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FF           MOV     R7,A
    973          
    974            /* SrcEPInt */
    975            srcEPInt = *pBuf++;
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 1,A
   \   000059   A3           INC     DPTR
   \   00005A   AE82         MOV     R6,DPL
   \   00005C   AF83         MOV     R7,DPH
    976          
    977            /* ClusterID */
    978            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   EA           MOV     A,R2
   \   000064   2400         ADD     A,#0x0
   \   000066   F5..         MOV     ?V0 + 6,A
   \   000068   E4           CLR     A
   \   000069   39           ADDC    A,R1
   \   00006A   F5..         MOV     ?V0 + 7,A
    979            pBuf += 2;
   \   00006C   EE           MOV     A,R6
   \   00006D   2402         ADD     A,#0x2
   \   00006F   0E           INC     R6
   \   000070   0E           INC     R6
   \   000071   EF           MOV     A,R7
   \   000072   3400         ADDC    A,#0x0
   \   000074   FF           MOV     R7,A
    980          
    981            /* Destination Address mode */
    982            devAddr.addrMode = *pBuf++;
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   7409         MOV     A,#0x9
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E8           MOV     A,R0
   \   000081   F0           MOVX    @DPTR,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   0E           INC     R6
   \   000088   AF83         MOV     R7,DPH
    983          
    984            /* Destination Address */
    985            if ( devAddr.addrMode == Addr64Bit )
   \   00008A   7403         MOV     A,#0x3
   \   00008C   68           XRL     A,R0
   \   00008D   7012         JNZ     ??MT_ZdoUnbindRequest_0
    986            {
    987              ptr = pBuf;
    988              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   EE           MOV     A,R6
   \   000090   FC           MOV     R4,A
   \   000091   EF           MOV     A,R7
   \   000092   FD           MOV     R5,A
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   AA82         MOV     R2,DPL
   \   00009A   AB83         MOV     R3,DPH
   \   00009C   12....       LCALL   ??sAddrExtCpy?relay
   \   00009F   8011         SJMP    ??MT_ZdoUnbindRequest_1
    989            }
    990            else
    991            {
    992              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_0:
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   EA           MOV     A,R2
   \   0000A7   F8           MOV     R0,A
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E8           MOV     A,R0
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E9           MOV     A,R1
   \   0000B1   F0           MOVX    @DPTR,A
    993            }
    994            /* The short address occupies LSB two bytes */
    995            pBuf += Z_EXTADDR_LEN;
    996          
    997            /* dstEPInt */
    998            dstEPInt = *pBuf;
    999          
   1000            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoUnbindRequest_1:
   \   0000B2                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   0000B2   75..00       MOV     ?V0 + 4,#0x0
   \   0000B5   78..         MOV     R0,#?V0 + 4
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V0 + 4,A
   \   0000C9   78..         MOV     R0,#?V0 + 4
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   8582..       MOV     ?V0 + 4,DPL
   \   0000D6   8583..       MOV     ?V0 + 5,DPH
   \   0000D9   78..         MOV     R0,#?V0 + 4
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   78..         MOV     R0,#?V0 + 6
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   78..         MOV     R0,#?V0 + 2
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   A9..         MOV     R1,?V0 + 1
   \   0000EA   7412         MOV     A,#0x12
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   AC82         MOV     R4,DPL
   \   0000F1   AD83         MOV     R5,DPH
   \   0000F3   7A22         MOV     R2,#0x22
   \   0000F5   02....       LJMP    ?Subroutine2 & 0xFFFF
   1001          
   1002            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1003          }
   1004          
   1005          /***************************************************************************************************
   1006           * @fn      MT_ZdoSetLinkKey
   1007           *
   1008           * @brief   Set an application or trust center link key.
   1009           *
   1010           * @param   pBuf  - MT message data
   1011           *
   1012           * @return  void
   1013           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1014          void MT_ZdoSetLinkKey(uint8 *pBuf)
   \                     MT_ZdoSetLinkKey:
   1015          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1016            uint8 cmdId;
   1017            uint8 retValue;
   1018            uint8 *pExtAddr;
   1019            uint8 *pKey;
   1020            uint16 shortAddr;
   1021            
   1022            /* parse header */
   1023            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
   1024            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   0A           INC     R2
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   FB           MOV     R3,A
   1025          
   1026            /* ShortAddr */
   1027            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   EC           MOV     A,R4
   \   000027   2400         ADD     A,#0x0
   \   000029   FE           MOV     R6,A
   \   00002A   E4           CLR     A
   \   00002B   39           ADDC    A,R1
   \   00002C   FF           MOV     R7,A
   1028            pBuf += 2;
   \   00002D   EA           MOV     A,R2
   \   00002E   2402         ADD     A,#0x2
   \   000030   0A           INC     R2
   \   000031   0A           INC     R2
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   FB           MOV     R3,A
   1029            
   1030            /* Extended Addr */
   1031            pExtAddr = pBuf;
   1032            pBuf += Z_EXTADDR_LEN;
   1033            
   1034            /* Key data */
   1035            pKey = pBuf;
   1036          
   1037            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   \   000036                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   000036   EA           MOV     A,R2
   \   000037   2408         ADD     A,#0x8
   \   000039   F5..         MOV     ?V0 + 2,A
   \   00003B   EB           MOV     A,R3
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F5..         MOV     ?V0 + 3,A
   \   000040   78..         MOV     R0,#?V0 + 2
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   EA           MOV     A,R2
   \   000046   FC           MOV     R4,A
   \   000047   EB           MOV     A,R3
   \   000048   FD           MOV     R5,A
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   ??ZDSecMgrAddLinkKey?relay
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   F0           MOVX    @DPTR,A
   1038          
   1039            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   00005D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00005D   AC82         MOV     R4,DPL
   \   00005F   AD83         MOV     R5,DPH
   \   000061   7B01         MOV     R3,#0x1
   \   000063   AA..         MOV     R2,?V0 + 0
   \   000065   7965         MOV     R1,#0x65
   \   000067   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1040          }
   \   00006A   7401         MOV     A,#0x1
   \   00006C   02....       LJMP    ?Subroutine1 & 0xFFFF
   1041          
   1042          /***************************************************************************************************
   1043           * @fn      MT_ZdoRemoveLinkKey
   1044           *
   1045           * @brief   Remove an application or trust center link key.
   1046           *
   1047           * @param   pBuf  - MT message data
   1048           *
   1049           * @return  void
   1050           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   \                     MT_ZdoRemoveLinkKey:
   1052          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1053            uint8 cmdId;
   1054            uint8 retValue;
   1055            uint8 *pExtAddr;
   1056              
   1057            /* parse header */
   1058            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   1059            pBuf += MT_RPC_FRAME_HDR_SZ;
   1060            
   1061            /* ShortAddr */
   1062            pExtAddr = pBuf;
   1063          
   1064            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   EB           MOV     A,R3
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
   \   00001F   02....       LJMP    ?Subroutine3 & 0xFFFF
   1065          
   1066            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1067          }
   1068          
   1069          /***************************************************************************************************
   1070           * @fn      MT_ZdoGetLinkKey
   1071           *
   1072           * @brief   Get the application or trust center link key.
   1073           *
   1074           * @param   pBuf  - MT message data
   1075           *
   1076           * @return  void
   1077           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void MT_ZdoGetLinkKey(uint8 *pBuf)
   \                     MT_ZdoGetLinkKey:
   1079          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1080            uint8 cmdId;
   1081            uint8 retValue;
   1082            uint8 *pExtAddr;
   1083            uint8 *retBuf;
   1084            uint8 len;
   1085            APSME_LinkKeyData_t *pLinkKey;
   1086              
   1087            /* parse header */
   1088            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 2,A
   1089            pBuf += MT_RPC_FRAME_HDR_SZ;
   1090            
   1091            /* Extended Address */
   1092            pExtAddr = pBuf;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   FF           MOV     R7,A
   1093          
   1094            /* Fetch the key data */
   1095            retValue = APSME_LinkKeyDataGet( pExtAddr, &pLinkKey );
   \   00001B                ; Setup parameters for call to function APSME_LinkKeyDataGet
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   AC82         MOV     R4,DPL
   \   000023   AD83         MOV     R5,DPH
   \   000025   0A           INC     R2
   \   000026   0A           INC     R2
   \   000027   0A           INC     R2
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??APSME_LinkKeyDataGet?relay
   \   00002C   E9           MOV     A,R1
   \   00002D   F5..         MOV     ?V0 + 3,A
   1096            
   1097            /* Construct the response message */
   1098            len = 1 + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1099            if ( ( retBuf = osal_mem_alloc( len ) ) == NULL )
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   7A19         MOV     R2,#0x19
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??osal_mem_alloc?relay
   \   000036   8A..         MOV     ?V0 + 0,R2
   \   000038   8B..         MOV     ?V0 + 1,R3
   \   00003A   EA           MOV     A,R2
   \   00003B   45..         ORL     A,?V0 + 1
   \   00003D   7035         JNZ     ??MT_ZdoGetLinkKey_0
   1100            {
   1101              retValue = ZMemError;
   \   00003F   75..10       MOV     ?V0 + 3,#0x10
   1102            }
   1103            else
   1104            {  
   1105              if( retValue == ZSuccess )
   1106              {
   1107                /* Extended Address */
   1108                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1109                
   1110                /* Key data */
   1111                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pLinkKey->key, SEC_KEY_LEN );      
   1112              }
   1113            }
   1114              
   1115            if( retValue != ZSuccess )
   1116            {
   1117              /* Failed case - set the rest fields to all FF */
   1118              osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );   
   \                     ??MT_ZdoGetLinkKey_1:
   \   000042                ; Setup parameters for call to function osal_memset
   \   000042   7C18         MOV     R4,#0x18
   \   000044   7D00         MOV     R5,#0x0
   \   000046   79FF         MOV     R1,#-0x1
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   A3           INC     DPTR
   \   00004D   AA82         MOV     R2,DPL
   \   00004F   AB83         MOV     R3,DPH
   \   000051   12....       LCALL   ??osal_memset?relay
   1119            }    
   1120            
   1121            retBuf[0] = retValue;  /* Status */
   \                     ??MT_ZdoGetLinkKey_2:
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   85..83       MOV     DPH,?V0 + 1
   \   00005A   E5..         MOV     A,?V0 + 3
   \   00005C   F0           MOVX    @DPTR,A
   1122            
   1123            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   \   00005D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00005D   AC..         MOV     R4,?V0 + 0
   \   00005F   AD..         MOV     R5,?V0 + 1
   \   000061   7B19         MOV     R3,#0x19
   \   000063   AA..         MOV     R2,?V0 + 2
   \   000065   7965         MOV     R1,#0x65
   \   000067   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1124            
   1125            return;
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   7F07         MOV     R7,#0x7
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_ZdoGetLinkKey_0:
   \   000074   E5..         MOV     A,?V0 + 3
   \   000076   70CA         JNZ     ??MT_ZdoGetLinkKey_1
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   8E..         MOV     ?V0 + 4,R6
   \   00007A   8F..         MOV     ?V0 + 5,R7
   \   00007C   75..00       MOV     ?V0 + 6,#0x0
   \   00007F   78..         MOV     R0,#?V0 + 4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   7C08         MOV     R4,#0x8
   \   000086   7D00         MOV     R5,#0x0
   \   000088   8A82         MOV     DPL,R2
   \   00008A   8B83         MOV     DPH,R3
   \   00008C   A3           INC     DPTR
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   ??osal_memcpy?relay
   \   000094   7403         MOV     A,#0x3
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099                ; Setup parameters for call to function osal_memcpy
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F8           MOV     R0,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F583         MOV     DPH,A
   \   0000A5   8882         MOV     DPL,R0
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5..         MOV     ?V0 + 4,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F5..         MOV     ?V0 + 5,A
   \   0000AE   78..         MOV     R0,#?V0 + 4
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   7C10         MOV     R4,#0x10
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   E5..         MOV     A,?V0 + 0
   \   0000B9   2409         ADD     A,#0x9
   \   0000BB   FA           MOV     R2,A
   \   0000BC   E5..         MOV     A,?V0 + 1
   \   0000BE   3400         ADDC    A,#0x0
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   ??osal_memcpy?relay
   \   0000C4   7403         MOV     A,#0x3
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   8089         SJMP    ??MT_ZdoGetLinkKey_2
   1126          }
   1127          
   1128          #if defined (MT_ZDO_MGMT)
   1129          /***************************************************************************************************
   1130           * @fn      MT_ZdoMgmtNwkDiscRequest
   1131           *
   1132           * @brief   Handle a Mgmt Nwk Discovery request.
   1133           *
   1134           * @param   pBuf  - MT message data
   1135           *
   1136           * @return  void
   1137           ***************************************************************************************************/
   1138          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1139          {
   1140            uint8 cmdId;
   1141            uint8 retValue;
   1142            zAddrType_t destAddr;
   1143            uint32 scanChannels;
   1144            uint8 scanDuration, startIndex;
   1145          
   1146            /* parse header */
   1147            cmdId = pBuf[MT_RPC_POS_CMD1];
   1148            pBuf += MT_RPC_FRAME_HDR_SZ;
   1149          
   1150            /* Dev address */
   1151            destAddr.addrMode = Addr16Bit;
   1152            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1153            pBuf += 2;
   1154          
   1155            /* Scan Channels */
   1156            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1157            pBuf += 4;
   1158          
   1159            /* Scan Duration */
   1160            scanDuration = *pBuf++;
   1161          
   1162            /* Start Index */
   1163            startIndex = *pBuf;
   1164          
   1165            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1166          
   1167            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1168          }
   1169          
   1170          /***************************************************************************************************
   1171           * @fn      MT_ZdoMgmtLqiRequest
   1172           *
   1173           * @brief   Handle a Mgmt Lqi request.
   1174           *
   1175           * @param   pBuf  - MT message data
   1176           *
   1177           * @return  void
   1178           ***************************************************************************************************/
   1179          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1180          {
   1181            uint8 cmdId;
   1182            uint8 retValue;
   1183            zAddrType_t destAddr;
   1184            uint8 startIndex;
   1185          
   1186            /* parse header */
   1187            cmdId = pBuf[MT_RPC_POS_CMD1];
   1188            pBuf += MT_RPC_FRAME_HDR_SZ;
   1189          
   1190            /* Dev address */
   1191            destAddr.addrMode = Addr16Bit;
   1192            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1193            pBuf += 2;
   1194          
   1195            /* Start Index */
   1196            startIndex = *pBuf;
   1197          
   1198            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1199          
   1200            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1201          }
   1202          
   1203          /***************************************************************************************************
   1204           * @fn      MT_ZdoMgmtRtgRequest
   1205           *
   1206           * @brief   Handle a Mgmt Rtg request.
   1207           *
   1208           * @param   pBuf  - MT message data
   1209           *
   1210           * @return  void
   1211           ***************************************************************************************************/
   1212          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1213          {
   1214            uint8 cmdId;
   1215            uint8 retValue;
   1216            zAddrType_t destAddr;
   1217            uint8 startIndex;
   1218          
   1219            /* parse header */
   1220            cmdId = pBuf[MT_RPC_POS_CMD1];
   1221            pBuf += MT_RPC_FRAME_HDR_SZ;
   1222          
   1223            /* Dev Address */
   1224            destAddr.addrMode = Addr16Bit;
   1225            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   1226            pBuf += 2;
   1227          
   1228            /* Start Index */
   1229            startIndex = *pBuf;
   1230          
   1231            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1232          
   1233            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1234          }
   1235          
   1236          /***************************************************************************************************
   1237           * @fn      MT_ZdoMgmtBindRequest
   1238           *
   1239           * @brief   Handle a Mgmt Bind request.
   1240           *
   1241           * @param   pBuf  - MT message data
   1242           *
   1243           * @return  void
   1244           ***************************************************************************************************/
   1245          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1246          {
   1247            uint8 cmdId;
   1248            uint8 retValue;
   1249            zAddrType_t destAddr;
   1250            uint8 startIndex;
   1251          
   1252            /* parse header */
   1253            cmdId = pBuf[MT_RPC_POS_CMD1];
   1254            pBuf += MT_RPC_FRAME_HDR_SZ;
   1255          
   1256            /* Dev Address */
   1257            destAddr.addrMode = Addr16Bit;
   1258            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1259            pBuf += 2;
   1260          
   1261            /* Start Index */
   1262            startIndex = *pBuf;
   1263          
   1264            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1265          
   1266            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1267          }
   1268          
   1269          /***************************************************************************************************
   1270           * @fn      MT_ZdoMgmtLeaveRequest
   1271           *
   1272           * @brief   Handle a Mgmt Leave request.
   1273           *
   1274           * @param   pBuf  - MT message data
   1275           *
   1276           * @return  void
   1277           ***************************************************************************************************/
   1278          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1279          {
   1280            uint8 cmdId;
   1281            uint8 retValue;
   1282            zAddrType_t destAddr;
   1283            uint8 *pIEEEAddr;
   1284            uint8 removeChildren, rejoin;
   1285          
   1286            /* parse header */
   1287            cmdId = pBuf[MT_RPC_POS_CMD1];
   1288            pBuf += MT_RPC_FRAME_HDR_SZ;
   1289          
   1290            /* Destination Address */
   1291            destAddr.addrMode = Addr16Bit;
   1292            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1293            pBuf += 2;
   1294          
   1295            /* IEEE address */
   1296            pIEEEAddr = pBuf;
   1297            pBuf += Z_EXTADDR_LEN;
   1298          
   1299            /* Remove Children */
   1300            removeChildren = *pBuf++;
   1301          
   1302            /* Rejoin */
   1303            rejoin = *pBuf;
   1304          
   1305            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1306          
   1307            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1308          }
   1309          
   1310          
   1311          /***************************************************************************************************
   1312           * @fn      MT_ZdoMgmtDirectJoinRequest
   1313           *
   1314           * @brief   Handle a Mgmt Direct Join request.
   1315           *
   1316           * @param   pBuf  - MT message data
   1317           *
   1318           * @return  void
   1319           ***************************************************************************************************/
   1320          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1321          {
   1322            uint8 cmdId;
   1323            uint8 retValue;
   1324            zAddrType_t destAddr;
   1325            uint8 *deviceAddr;
   1326            uint8 capInfo;
   1327          
   1328            /* parse header */
   1329            cmdId = pBuf[MT_RPC_POS_CMD1];
   1330            pBuf += MT_RPC_FRAME_HDR_SZ;
   1331          
   1332            /* Destination Address */
   1333            destAddr.addrMode = Addr16Bit;
   1334            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1335            pBuf += 2;
   1336          
   1337            /* Device Address */
   1338            deviceAddr = pBuf;
   1339            pBuf += Z_EXTADDR_LEN;
   1340          
   1341            /* Capability information */
   1342            capInfo = *pBuf;
   1343          
   1344            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1345          
   1346            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1347          }
   1348          
   1349          /***************************************************************************************************
   1350           * @fn      MT_ZdoMgmtPermitJoinRequest
   1351           *
   1352           * @brief   Handle a Mgmt Permit Join request.
   1353           *
   1354           * @param   pBuf  - MT message data
   1355           *
   1356           * @return  void
   1357           ***************************************************************************************************/
   1358          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1359          {
   1360            uint8 cmdId;
   1361            uint8 retValue;
   1362            zAddrType_t destAddr;
   1363            uint8 duration, tcSignificance;
   1364          
   1365            /* parse header */
   1366            cmdId = pBuf[MT_RPC_POS_CMD1];
   1367            pBuf += MT_RPC_FRAME_HDR_SZ;
   1368          
   1369            /* Destination Address */
   1370            destAddr.addrMode = Addr16Bit;
   1371            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1372            pBuf += 2;
   1373          
   1374            /* Duration */
   1375            duration = *pBuf++;
   1376          
   1377            /* Trust center significance */
   1378            tcSignificance = *pBuf;
   1379          
   1380            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1381          
   1382            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1383          }
   1384          
   1385          /***************************************************************************************************
   1386           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1387           *
   1388           * @brief   Handle a Mgmt Nwk Update request.
   1389           *
   1390           * @param   pBuf  - MT message data
   1391           *
   1392           * @return  void
   1393           ***************************************************************************************************/
   1394          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1395          {
   1396            uint8 cmdId;
   1397            uint8 retValue;
   1398            zAddrType_t destAddr;
   1399            uint32 channelMask;
   1400            uint8 scanDuration, scanCount;
   1401            uint16 nwkManagerAddr;
   1402          
   1403              /* parse header */
   1404            cmdId = pBuf[MT_RPC_POS_CMD1];
   1405            pBuf += MT_RPC_FRAME_HDR_SZ;
   1406          
   1407            /* Destination address */
   1408            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1409            pBuf += 2;
   1410          
   1411            /* Destination address mode */
   1412            destAddr.addrMode = *pBuf++;
   1413          
   1414            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   1415            pBuf += 4;
   1416          
   1417            /* Scan duration */
   1418            scanDuration = *pBuf++;
   1419          
   1420            /* Scan count */
   1421            scanCount = *pBuf++;
   1422          
   1423            /* NWK manager address */
   1424            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1425          
   1426            /* Send the Management Network Update request */
   1427            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1428                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1429          
   1430            /*
   1431              Since we don't recevied our own broadcast messages, we should
   1432              send a unicast copy of the message to ourself.
   1433            */
   1434            if ( destAddr.addrMode == AddrBroadcast )
   1435            {
   1436              destAddr.addrMode = Addr16Bit;
   1437              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1438              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1439                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1440            }
   1441          
   1442            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1443          }
   1444          #endif /* MT_ZDO_MGMT */
   1445          
   1446          /***************************************************************************************************
   1447           * @fn      MT_ZdoStartupFromApp
   1448           *
   1449           * @brief   Handle a Startup from App request.
   1450           *
   1451           * @param   pBuf  - MT message data
   1452           *
   1453           * @return  void
   1454           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1455          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1456          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1457            uint8 cmd0, cmd1, retValue;
   1458          
   1459            /* parse header */
   1460            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1461            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1462            pBuf += MT_RPC_FRAME_HDR_SZ;
   1463          
   1464            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV     R2,#0x64
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??ZDOInitDevice?relay
   \   000020   E9           MOV     A,R1
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   F0           MOVX    @DPTR,A
   1465          
   1466            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   000028   74E0         MOV     A,#-0x20
   \   00002A   5F           ANL     A,R7
   \   00002B   6420         XRL     A,#0x20
   \   00002D   700D         JNZ     ??MT_ZdoStartupFromApp_0
   1467            {
   1468              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   00002F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002F   AC82         MOV     R4,DPL
   \   000031   AD83         MOV     R5,DPH
   \   000033   7B01         MOV     R3,#0x1
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   7965         MOV     R1,#0x65
   \   000039   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1469            }
   1470          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   00003C   02....       LJMP    ??Subroutine6_0 & 0xFFFF
   1471          
   1472          /*************************************************************************************************
   1473           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1474           *
   1475           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1476           *
   1477           * @param   pBuf  - MT message data
   1478           *
   1479           * @return  void
   1480           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1481          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   1482          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1483            uint8 cmd0, cmd1, tmp;
   1484            uint16 cId;
   1485          
   1486            /* parse header */
   1487            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1488            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1489            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EA           MOV     A,R2
   \   00001A   2403         ADD     A,#0x3
   \   00001C   0A           INC     R2
   \   00001D   0A           INC     R2
   \   00001E   0A           INC     R2
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   FB           MOV     R3,A
   1490          
   1491            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1492            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \   000023                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FC           MOV     R4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   EC           MOV     A,R4
   \   00002D   2400         ADD     A,#0x0
   \   00002F   FA           MOV     R2,A
   \   000030   E4           CLR     A
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
   \   000033   90....       MOV     DPTR,#MT_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   F0           MOVX    @DPTR,A
   1493          
   1494            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   000043   74E0         MOV     A,#-0x20
   \   000045   5F           ANL     A,R7
   \   000046   6420         XRL     A,#0x20
   \   000048   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_0
   1495            {
   1496              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00004A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004A   AC82         MOV     R4,DPL
   \   00004C   AD83         MOV     R5,DPH
   \   00004E   7B01         MOV     R3,#0x1
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   7965         MOV     R1,#0x65
   \   000054   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1497            }
   1498          }
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000057   02....       LJMP    ??Subroutine6_0 & 0xFFFF
   1499          
   1500          /*************************************************************************************************
   1501           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   1502           *
   1503           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   1504           *
   1505           * @param   pBuf  - MT message data
   1506           *
   1507           * @return  void
   1508           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1509          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   1510          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1511            uint8 cmd0, cmd1, tmp;
   1512            uint16 cId;
   1513          
   1514            /* parse header */
   1515            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1516            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1517            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EA           MOV     A,R2
   \   00001A   2403         ADD     A,#0x3
   \   00001C   0A           INC     R2
   \   00001D   0A           INC     R2
   \   00001E   0A           INC     R2
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   FB           MOV     R3,A
   1518          
   1519            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1520            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \   000023                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FC           MOV     R4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   EC           MOV     A,R4
   \   00002D   2400         ADD     A,#0x0
   \   00002F   FA           MOV     R2,A
   \   000030   E4           CLR     A
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
   \   000033   90....       MOV     DPTR,#MT_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??ZDO_RemoveRegisteredCB?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   F0           MOVX    @DPTR,A
   1521          
   1522            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \   000043   74E0         MOV     A,#-0x20
   \   000045   5F           ANL     A,R7
   \   000046   6420         XRL     A,#0x20
   \   000048   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_0
   1523            {
   1524              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   00004A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004A   AC82         MOV     R4,DPL
   \   00004C   AD83         MOV     R5,DPH
   \   00004E   7B01         MOV     R3,#0x1
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   7965         MOV     R1,#0x65
   \   000054   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1525            }
   1526          }
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000057   02....       LJMP    ??Subroutine6_0 & 0xFFFF
   1527          
   1528          #endif /* MT_ZDO_FUNC */
   1529          
   1530          
   1531          /***************************************************************************************************
   1532           * Callback handling function
   1533           ***************************************************************************************************/
   1534          
   1535          #if defined (MT_ZDO_CB_FUNC)
   1536          
   1537          /***************************************************************************************************
   1538           * @fn      MT_ZdoStateChangeCB
   1539           *
   1540           * @brief   Handle state change OSAL message from ZDO.
   1541           *
   1542           * @param   pMsg  - Message data
   1543           *
   1544           * @return  void
   1545           */
   1546          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   1547          {
   1548            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1549                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   1550          }
   1551          
   1552          /***************************************************************************************************
   1553           * @fn     MT_ZdoDirectCB()
   1554           *
   1555           * @brief  ZDO direct callback.  Build an MT message directly from the
   1556           *         over-the-air ZDO message.
   1557           *
   1558           * @param  pData - Incoming AF frame.
   1559           *
   1560           * @return  none
   1561           ***************************************************************************************************/
   1562          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
   1563          {
   1564            uint8 len, *pBuf;
   1565            
   1566            // Is the message an exception or not a response?
   1567            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (pData->clusterId & ZDO_RESPONSE_BIT) == 0 ) )
   1568            {
   1569              return;  // Handled somewhere else or not needed.
   1570            }
   1571          
   1572            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   1573             * two bytes for srcAddr.
   1574             */
   1575            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   1576          
   1577            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1578            {
   1579              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   1580          
   1581              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   1582              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   1583          
   1584              /* copy ZDO data, skipping one-byte sequence number */
   1585              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   1586          
   1587              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1588              osal_mem_free(pBuf);
   1589            }
   1590          }
   1591          
   1592          /***************************************************************************************************
   1593           * @fn     MT_ZdoHandleExceptions()
   1594           *
   1595           * @brief  Handles all messages that are an expection to the generic MT ZDO Response.
   1596           *
   1597           * @param  pData - Incoming AF frame.
   1598           *
   1599           * @return  TRUE if handled by this function, FALSE if not
   1600           ***************************************************************************************************/
   1601          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   1602          {
   1603            uint8 ret = TRUE;
   1604            ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
   1605            ZDO_DeviceAnnce_t devAnnce;
   1606            uint8 doDefault = FALSE;
   1607            
   1608            switch ( inMsg->clusterID )
   1609            {
   1610              case NWK_addr_rsp:
   1611              case IEEE_addr_rsp:
   1612                nwkRsp = ZDO_ParseAddrRsp( inMsg );
   1613                MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   1614                if ( nwkRsp )
   1615                  osal_mem_free( nwkRsp );
   1616                break;
   1617                
   1618              case Device_annce:
   1619                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   1620                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   1621                break;
   1622                
   1623              case Simple_Desc_rsp:
   1624                if ( pData->cmd.DataLength > 5 )
   1625                  ret = FALSE;
   1626                else
   1627                  doDefault = TRUE;        
   1628                break;  
   1629                
   1630              default:
   1631                ret = FALSE;
   1632                break;
   1633            }
   1634            
   1635            if ( doDefault )
   1636            {
   1637              ret = FALSE;
   1638              pData->clusterId = MtZdoDef_rsp;
   1639              pData->cmd.DataLength = 2;
   1640            }
   1641          
   1642            return ( ret );
   1643          }
   1644          
   1645          /***************************************************************************************************
   1646           * @fn      MT_ZdoAddrRspCB
   1647           *
   1648           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   1649           *
   1650           * @param   pMsg  - Message data
   1651           *
   1652           * @return  void
   1653           */
   1654          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   1655          {
   1656            uint8   listLen, len, *pBuf;
   1657          
   1658            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   1659          
   1660            /* get length, sanity check length */
   1661            listLen = pMsg->numAssocDevs;
   1662            
   1663            /* calculate msg length */
   1664            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   1665          
   1666            /* get buffer */
   1667            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1668            {
   1669              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   1670              uint8 *pTmp = pBuf;
   1671          
   1672              *pTmp++ = pMsg->status;
   1673          
   1674              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1675              pTmp += Z_EXTADDR_LEN;
   1676          
   1677              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1678              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1679          
   1680              *pTmp++ = pMsg->startIndex;
   1681              *pTmp++ = listLen;
   1682          
   1683              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   1684          
   1685              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   1686              osal_mem_free(pBuf);
   1687            }
   1688          }
   1689          
   1690          /***************************************************************************************************
   1691           * @fn      MT_ZdoEndDevAnnceCB
   1692           *
   1693           * @brief   Handle end device announce OSAL message from ZDO.
   1694           *
   1695           * @param   pMsg  - Message data
   1696           *
   1697           * @return  void
   1698           */
   1699          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   1700          {
   1701            uint8 *pBuf;
   1702          
   1703            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   1704            {
   1705              uint8 *pTmp = pBuf;
   1706          
   1707              *pTmp++ = LO_UINT16(srcAddr);
   1708              *pTmp++ = HI_UINT16(srcAddr);
   1709          
   1710              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   1711              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   1712          
   1713              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   1714              pTmp += Z_EXTADDR_LEN;
   1715          
   1716              *pTmp = pMsg->capabilities;
   1717          
   1718              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
   1719                                                   MT_ZDO_END_DEVICE_ANNCE_IND, 
   1720                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   1721              osal_mem_free(pBuf);
   1722            }
   1723          }
   1724          
   1725          /***************************************************************************************************
   1726           * @fn      MT_ZdoSrcRtgCB
   1727           *
   1728           * @brief   Handle Src Route from ZDO.
   1729           *
   1730           * @param   pStr  - pointer to the data structure for the src route
   1731           *
   1732           * @return  void* 
   1733           */
   1734          void* MT_ZdoSrcRtgCB( void *pStr )
   1735          {
   1736            uint8 len, *pBuf;
   1737            zdoSrcRtg_t *pSrcRtg = pStr;
   1738            
   1739            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   1740            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   1741          
   1742            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   1743            {
   1744              uint8 idx, *pTmp = pBuf;
   1745              uint16 *pRelay;
   1746          
   1747              // Packet payload
   1748              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   1749              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   1750              *pTmp++ = pSrcRtg->relayCnt;
   1751              
   1752              // Relay List
   1753              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   1754              {
   1755                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   1756                {
   1757                  *pTmp++ = LO_UINT16(*pRelay);
   1758                  *pTmp++ = HI_UINT16(*pRelay);
   1759                  pRelay++;
   1760                }
   1761              }
   1762              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1763                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   1764              osal_mem_free(pBuf);
   1765            }
   1766            
   1767            return NULL;
   1768          }
   1769          #endif // MT_ZDO_CB_FUNC
   1770          
   1771          /***************************************************************************************************
   1772           * @fn      MT_ZdoSendMsgCB
   1773           *
   1774           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   1775           *
   1776           * @param   pMsg  - Message data
   1777           *
   1778           * @return  void
   1779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1780          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   1781          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1782            uint8 len = pMsg->asduLen + 9;
   \   000009   EE           MOV     A,R6
   \   00000A   2410         ADD     A,#0x10
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 2,R0
   \   000013   89..         MOV     ?V0 + 3,R1
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   2409         ADD     A,#0x9
   \   00001C   F5..         MOV     ?V0 + 4,A
   1783            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   FA           MOV     R2,A
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   ??osal_mem_alloc?relay
   \   000024   8A..         MOV     ?V0 + 0,R2
   \   000026   8B..         MOV     ?V0 + 1,R3
   1784          
   1785            if (pBuf != NULL)
   \   000028   EA           MOV     A,R2
   \   000029   45..         ORL     A,?V0 + 1
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??MT_ZdoSendMsgCB_0 & 0xFFFF
   1786            {
   1787              uint8 *pTmp = pBuf;
   1788          
   1789              // Assuming exclusive use of network short addresses.
   1790              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000030   EE           MOV     A,R6
   \   000031   2402         ADD     A,#0x2
   \   000033   F8           MOV     R0,A
   \   000034   EF           MOV     A,R7
   \   000035   3400         ADDC    A,#0x0
   \   000037   F9           MOV     R1,A
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   AA82         MOV     R2,DPL
   \   000045   AB83         MOV     R3,DPH
   1791              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   0A           INC     R2
   \   000054   AB83         MOV     R3,DPH
   1792              *pTmp++ = pMsg->wasBroadcast;
   \   000056   EE           MOV     A,R6
   \   000057   240B         ADD     A,#0xb
   \   000059   F582         MOV     DPL,A
   \   00005B   EF           MOV     A,R7
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   0A           INC     R2
   \   000068   AB83         MOV     R3,DPH
   1793              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \   00006A   EE           MOV     A,R6
   \   00006B   240C         ADD     A,#0xc
   \   00006D   F8           MOV     R0,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F9           MOV     R1,A
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   0A           INC     R2
   \   00007E   AB83         MOV     R3,DPH
   1794              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   0A           INC     R2
   \   00008D   AB83         MOV     R3,DPH
   1795              *pTmp++ = pMsg->SecurityUse;
   \   00008F   EE           MOV     A,R6
   \   000090   240E         ADD     A,#0xe
   \   000092   F582         MOV     DPL,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   F583         MOV     DPH,A
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   0A           INC     R2
   \   0000A1   AB83         MOV     R3,DPH
   1796              *pTmp++ = pMsg->TransSeq;
   \   0000A3   EE           MOV     A,R6
   \   0000A4   240F         ADD     A,#0xf
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   3400         ADDC    A,#0x0
   \   0000AB   F583         MOV     DPH,A
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   0A           INC     R2
   \   0000B5   AB83         MOV     R3,DPH
   1797              // Skipping asduLen since it can be deduced from the RPC packet length.
   1798              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \   0000B7   EE           MOV     A,R6
   \   0000B8   2411         ADD     A,#0x11
   \   0000BA   F8           MOV     R0,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   3400         ADDC    A,#0x0
   \   0000BE   F9           MOV     R1,A
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   8A82         MOV     DPL,R2
   \   0000C6   8B83         MOV     DPH,R3
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   0A           INC     R2
   \   0000CB   AB83         MOV     R3,DPH
   1799              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   8983         MOV     DPH,R1
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   8A82         MOV     DPL,R2
   \   0000D5   8B83         MOV     DPH,R3
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   0A           INC     R2
   \   0000DA   AB83         MOV     R3,DPH
   1800              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \   0000DC                ; Setup parameters for call to function osal_memcpy
   \   0000DC   EE           MOV     A,R6
   \   0000DD   2413         ADD     A,#0x13
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   3400         ADDC    A,#0x0
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F5..         MOV     ?V0 + 8,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F5..         MOV     ?V0 + 9,A
   \   0000ED   75..00       MOV     ?V0 + 10,#0x0
   \   0000F0   78..         MOV     R0,#?V0 + 8
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F5   85..82       MOV     DPL,?V0 + 2
   \   0000F8   85..83       MOV     DPH,?V0 + 3
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   FC           MOV     R4,A
   \   0000FD   7D00         MOV     R5,#0x0
   \   0000FF   12....       LCALL   ??osal_memcpy?relay
   \   000102   7403         MOV     A,#0x3
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   1801          
   1802              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1803                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   000107                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000107   AC..         MOV     R4,?V0 + 0
   \   000109   AD..         MOV     R5,?V0 + 1
   \   00010B   AB..         MOV     R3,?V0 + 4
   \   00010D   7AFF         MOV     R2,#-0x1
   \   00010F   7945         MOV     R1,#0x45
   \   000111   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1804            }
   1805          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   000114   7F0B         MOV     R7,#0xb
   \   000116   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNWKAddressRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoIEEEAddrRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNodeDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoPowerDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSimpleDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoActiveEpRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMatchDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoComplexDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUserDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoServiceDiscRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUnbindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSetLinkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSetLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRemoveLinkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoGetLinkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoGetLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoStartupFromApp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSendMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   1806          
   1807          #endif   /*ZDO Command Processing in MT*/
   1808          /***************************************************************************************************
   1809          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_ZdoActiveEpRequest              1      0     20
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoBindRequest                  1      0     76
       -> sAddrExtCpy                   0      0     70
       -> ZDP_BindUnbindReq             0      0     86
       -> MT_BuildAndSendZToolResponse
                                        0      0     70
     MT_ZdoCommandProcessing            1      0     35
       -> ZDP_NwkAddrReq                0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_IEEEAddrReq               0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_NWKAddrOfInterestReq      0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_NWKAddrOfInterestReq      0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_SimpleDescReq             0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_NWKAddrOfInterestReq      0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> MT_ZdoMatchDescRequest        0      0     66
       -> ZDP_NWKAddrOfInterestReq      0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_NWKAddrOfInterestReq      0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDP_DeviceAnnce               0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> MT_ZdoUserDescSet             0      0     66
       -> ZDP_ServerDiscReq             0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> MT_ZdoEndDevBindRequest       0      0     66
       -> MT_ZdoBindRequest             0      0     66
       -> MT_ZdoUnbindRequest           0      0     66
       -> ZDSecMgrAddLinkKey            0      0     70
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDSecMgrDeviceRemoveByExtAddr
                                        0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> MT_ZdoGetLinkKey              0      0     66
       -> ZDOInitDevice                 0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDO_RegisterForZDOMsg         0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
       -> ZDO_RemoveRegisteredCB        0      0     66
       -> MT_BuildAndSendZToolResponse
                                        0      0     66
     MT_ZdoComplexDescRequest           1      0     20
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoEndDevAnnce                  1      0     11
       -> ZDP_DeviceAnnce               0      0     22
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoEndDevBindRequest            1      0    130
       -> ZDP_EndDeviceBindReq          0      0    194
       -> MT_BuildAndSendZToolResponse
                                        0      0    176
     MT_ZdoGetLinkKey                   1      0     53
       -> APSME_LinkKeyDataGet          0      0     34
       -> osal_mem_alloc                0      0     34
       -> osal_memset                   0      0     34
       -> MT_BuildAndSendZToolResponse
                                        0      0     34
       -> osal_memcpy                   0      0     40
       -> osal_memcpy                   0      0     40
     MT_ZdoIEEEAddrRequest              1      0     10
       -> ZDP_IEEEAddrReq               0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoInit                         0      0      0
     MT_ZdoMatchDescRequest             1      0    132
       -> ZDP_MatchDescReq              0      0    198
       -> MT_BuildAndSendZToolResponse
                                        0      0    182
     MT_ZdoNWKAddressRequest            1      0     10
       -> ZDP_NwkAddrReq                0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoNodeDescRequest              1      0     20
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoPowerDescRequest             1      0     20
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoRegisterForZDOMsg            1      0     10
       -> ZDO_RegisterForZDOMsg         0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoRemoveLinkKey                1      0     10
       -> ZDSecMgrDeviceRemoveByExtAddr
                                        0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoRemoveRegisteredCB           1      0     10
       -> ZDO_RemoveRegisteredCB        0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoSendMsgCB                    1      0     22
       -> osal_mem_alloc                0      0     38
       -> osal_memcpy                   0      0     44
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoServiceDiscRequest           1      0     10
       -> ZDP_ServerDiscReq             0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoSetLinkKey                   1      0     15
       -> ZDSecMgrAddLinkKey            0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     26
     MT_ZdoSimpleDescRequest            1      0     20
       -> ZDP_SimpleDescReq             0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoStartupFromApp               1      0     10
       -> ZDOInitDevice                 0      0     20
       -> MT_BuildAndSendZToolResponse
                                        0      0     20
     MT_ZdoUnbindRequest                1      0     76
       -> sAddrExtCpy                   0      0     70
       -> ZDP_BindUnbindReq             0      0     86
       -> MT_BuildAndSendZToolResponse
                                        0      0     70
     MT_ZdoUserDescRequest              1      0     20
       -> ZDP_NWKAddrOfInterestReq      0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     38
     MT_ZdoUserDescSet                  1      0     75
       -> osal_memcpy                   0      0     84
       -> ZDP_UserDescSet               0      0     82
       -> MT_BuildAndSendZToolResponse
                                        0      0     78


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     _zdoCallbackSub                     4
     MT_ZdoInit                          3
     MT_ZdoCommandProcessing          1385
     MT_ZdoNWKAddressRequest            53
     ?Subroutine4                       18
     ??Subroutine5_0                     5
     ??Subroutine6_0                     4
     ??Subroutine9_0                     8
     MT_ZdoIEEEAddrRequest              74
     ??Subroutine7_0                    10
     ??Subroutine8_0                    28
     MT_ZdoNodeDescRequest              95
     ?Subroutine0                       17
     MT_ZdoPowerDescRequest             79
     MT_ZdoSimpleDescRequest           112
     MT_ZdoActiveEpRequest              79
     MT_ZdoMatchDescRequest            427
     MT_ZdoComplexDescRequest           79
     MT_ZdoUserDescRequest              79
     ?Subroutine3                       16
     MT_ZdoEndDevAnnce                  91
     MT_ZdoUserDescSet                 218
     ?Subroutine1                        8
     MT_ZdoServiceDiscRequest           47
     MT_ZdoEndDevBindRequest           434
     MT_ZdoBindRequest                 245
     ?Subroutine2                       41
     MT_ZdoUnbindRequest               248
     MT_ZdoSetLinkKey                  111
     MT_ZdoRemoveLinkKey                34
     MT_ZdoGetLinkKey                  203
     MT_ZdoStartupFromApp               63
     MT_ZdoRegisterForZDOMsg            90
     MT_ZdoRemoveRegisteredCB           90
     MT_ZdoSendMsgCB                   281
     ??MT_ZdoInit?relay                  6
     ??MT_ZdoCommandProcessing?relay     6
     ??MT_ZdoNWKAddressRequest?relay     6
     ??MT_ZdoIEEEAddrRequest?relay       6
     ??MT_ZdoNodeDescRequest?relay       6
     ??MT_ZdoPowerDescRequest?relay      6
     ??MT_ZdoSimpleDescRequest?relay     6
     ??MT_ZdoActiveEpRequest?relay       6
     ??MT_ZdoMatchDescRequest?relay      6
     ??MT_ZdoComplexDescRequest?relay    6
     ??MT_ZdoUserDescRequest?relay       6
     ??MT_ZdoEndDevAnnce?relay           6
     ??MT_ZdoUserDescSet?relay           6
     ??MT_ZdoServiceDiscRequest?relay    6
     ??MT_ZdoEndDevBindRequest?relay     6
     ??MT_ZdoBindRequest?relay           6
     ??MT_ZdoUnbindRequest?relay         6
     ??MT_ZdoSetLinkKey?relay            6
     ??MT_ZdoRemoveLinkKey?relay         6
     ??MT_ZdoGetLinkKey?relay            6
     ??MT_ZdoStartupFromApp?relay        6
     ??MT_ZdoRegisterForZDOMsg?relay     6
     ??MT_ZdoRemoveRegisteredCB?relay    6
     ??MT_ZdoSendMsgCB?relay             6

 
 4 775 bytes in segment BANKED_CODE
   144 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
 4 919 bytes of CODE  memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
