###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:56 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\ZMain\TI2530DB\ZMain.c                 #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\ZMain\TI2530DB\ZMain.c" -D ZIGBEEPRO  #
#                          -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" -lA "D:\zigbee\4.                        #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\"      #
#                          --diag_suppress Pe001,Pa010 -o "D:\zigbee\4.       #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\Obj\" -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\ZMain.lst                                   #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\ZMain.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2009-09-17 20:35:33 -0700 (Thu, 17 Sep 2009) $
      4            Revision:       $Revision: 20782 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "ZMAC.h"
     50          
     51          #ifndef NONWK
     52            #include "AF.h"
     53          #endif
     54          
     55          /* Hal */
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_adc.h"
     59          #include "hal_drivers.h"
     60          #include "hal_assert.h"
     61          #include "hal_flash.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximun number of Vdd samples checked before go on
     72          #define MAX_VDD_SAMPLES  3
     73          #define ZMAIN_VDD_LIMIT  HAL_ADC_VDD_LIMIT_4
     74          
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          extern bool HalAdcCheckVdd (uint8 limit);
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void zmain_dev_info( void );
    102          static void zmain_ext_addr( void );
    103          static void zmain_vdd_check( void );
    104          
    105          #ifdef LCD_SUPPORTED
    106          static void zmain_lcd_init( void );
    107          #endif
    108          
    109          /*********************************************************************
    110           * @fn      main
    111           * @brief   First function called after startup.
    112           * @return  don't care
    113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          int main( void )
   \                     main:
    115          {
   \   000000                ; Auto size: 0
    116            // Turn off interrupts
    117            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
    118          
    119            // Initialization for board related stuff such as LEDs
    120            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   43FE01       ORL     0xfe,#0x1
   \   000033   43FE02       ORL     0xfe,#0x2
   \   000036   43FE10       ORL     0xfe,#0x10
   \   000039   438F01       ORL     0x8f,#0x1
    121          
    122            // Make sure supply voltage is high enough to run
    123            zmain_vdd_check();
   \   00003C                ; Setup parameters for call to function zmain_vdd_check
   \   00003C   12....       LCALL   ??zmain_vdd_check?relay
    124          
    125            // Initialize board I/O
    126            InitBoard( OB_COLD );
   \   00003F                ; Setup parameters for call to function InitBoard
   \   00003F   7900         MOV     R1,#0x0
   \   000041   12....       LCALL   ??InitBoard?relay
    127          
    128            // Initialze HAL drivers
    129            HalDriverInit();
   \   000044                ; Setup parameters for call to function HalDriverInit
   \   000044   12....       LCALL   ??HalDriverInit?relay
    130          
    131            // Initialize NV System
    132            osal_nv_init( NULL );
   \   000047                ; Setup parameters for call to function osal_nv_init
   \   000047   7A00         MOV     R2,#0x0
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   12....       LCALL   ??osal_nv_init?relay
    133          
    134            // Initialize the MAC
    135            ZMacInit();
   \   00004E                ; Setup parameters for call to function ZMacInit
   \   00004E   12....       LCALL   ??ZMacInit?relay
    136          
    137            // Determine the extended address
    138            zmain_ext_addr();
   \   000051                ; Setup parameters for call to function zmain_ext_addr
   \   000051   12....       LCALL   ??zmain_ext_addr?relay
    139          
    140            // Initialize basic NV items
    141            zgInit();
   \   000054                ; Setup parameters for call to function zgInit
   \   000054   12....       LCALL   ??zgInit?relay
    142          
    143          #ifndef NONWK
    144            // Since the AF isn't a task, call it's initialization routine
    145            afInit();
   \   000057                ; Setup parameters for call to function afInit
   \   000057   12....       LCALL   ??afInit?relay
    146          #endif
    147          
    148            // Initialize the operating system
    149            osal_init_system();
   \   00005A                ; Setup parameters for call to function osal_init_system
   \   00005A   12....       LCALL   ??osal_init_system?relay
    150          
    151            // Allow interrupts
    152            osal_int_enable( INTS_ALL );
   \   00005D                ; Setup parameters for call to function osal_int_enable
   \   00005D   79FF         MOV     R1,#-0x1
   \   00005F   12....       LCALL   ??osal_int_enable?relay
    153          
    154            // Final board initialization
    155            InitBoard( OB_READY );
   \   000062                ; Setup parameters for call to function InitBoard
   \   000062   7902         MOV     R1,#0x2
   \   000064   12....       LCALL   ??InitBoard?relay
    156          
    157            // Display information about this device
    158            zmain_dev_info();
   \   000067                ; Setup parameters for call to function zmain_dev_info
   \   000067   12....       LCALL   ??zmain_dev_info?relay
    159          
    160            /* Display the device info on the LCD */
    161          #ifdef LCD_SUPPORTED
    162            zmain_lcd_init();
    163          #endif
    164          
    165          #ifdef WDT_IN_PM1
    166            /* If WDT is used, this is a good place to enable it. */
    167            WatchDogEnable( WDTIMX );
    168          #endif
    169          
    170            osal_start_system(); // No Return from here
   \   00006A                ; Setup parameters for call to function osal_start_system
   \   00006A   12....       LCALL   ??osal_start_system?relay
    171          
    172            return 0;  // Shouldn't get here.
   \   00006D   7A00         MOV     R2,#0x0
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   02....       LJMP    ?BRET
   \   000074                REQUIRE SLEEPCMD
   \   000074                REQUIRE SLEEPSTA
   \   000074                REQUIRE CLKCONCMD
   \   000074                REQUIRE CLKCONSTA
   \   000074                REQUIRE P1DIR
   \   000074                REQUIRE P0INP
    173          } // main()
    174          
    175          /*********************************************************************
    176           * @fn      zmain_vdd_check
    177           * @brief   Check if the Vdd is OK to run the processor.
    178           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    179           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    181          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    182            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV     R6,#0x0
    183            bool toggle = 0;
   \   000007   7F00         MOV     R7,#0x0
    184          
    185            // Repeat getting the sample until number of failures or successes hits MAX
    186            // then based on the count value, determine if the device is ready or not
    187            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    188            {
    189              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
   \                     ??zmain_vdd_check_0:
   \   000009                ; Setup parameters for call to function HalAdcCheckVdd
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000E   E9           MOV     A,R1
   \   00000F   6017         JZ      ??zmain_vdd_check_1
    190              {
    191                vdd_passed_count++;    // Keep track # times Vdd passes in a row
   \   000011   0E           INC     R6
    192                MicroWait (10000);     // Wait 10ms to try again
   \   000012                ; Setup parameters for call to function Onboard_wait
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B27         MOV     R3,#0x27
   \   000016   12....       LCALL   ??Onboard_wait?relay
    193              }
    194              else
    195              {
    196                vdd_passed_count = 0;  // Reset passed counter
    197                MicroWait (50000);     // Wait 50ms
    198                MicroWait (50000);     // Wait another 50ms to try again
    199              }
    200          
    201              /* toggle LED1 and LED2 */
    202              if (vdd_passed_count == 0)
   \   000019   EE           MOV     A,R6
   \   00001A   601C         JZ      ??zmain_vdd_check_2
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   40E8         JC      ??zmain_vdd_check_0
    203              {
    204                if ((toggle = !(toggle)))
    205                  HAL_TOGGLE_LED1();
    206                else
    207                  HAL_TOGGLE_LED2();
    208              }
    209            }
    210          
    211            /* turn off LED1 */
    212            HAL_TURN_OFF_LED1();
   \   000021   C290         CLR     0x90.0
    213            HAL_TURN_OFF_LED2();
   \   000023   C291         CLR     0x90.1
    214          }
   \   000025   02....       LJMP    ?Subroutine0 & 0xFFFF
   \                     ??zmain_vdd_check_1:
   \   000028   7E00         MOV     R6,#0x0
   \   00002A                ; Setup parameters for call to function Onboard_wait
   \   00002A   7A50         MOV     R2,#0x50
   \   00002C   7BC3         MOV     R3,#-0x3d
   \   00002E   12....       LCALL   ??Onboard_wait?relay
   \   000031                ; Setup parameters for call to function Onboard_wait
   \   000031   7A50         MOV     R2,#0x50
   \   000033   7BC3         MOV     R3,#-0x3d
   \   000035   12....       LCALL   ??Onboard_wait?relay
   \                     ??zmain_vdd_check_2:
   \   000038   EF           MOV     A,R7
   \   000039   700A         JNZ     ??zmain_vdd_check_3
   \   00003B   7F01         MOV     R7,#0x1
   \   00003D   A290         MOV     C,0x90.0
   \   00003F   400E         JC      ??zmain_vdd_check_4
   \   000041   D290         SETB    0x90.0
   \   000043   80C4         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_3:
   \   000045   7F00         MOV     R7,#0x0
   \   000047   A291         MOV     C,0x90.1
   \   000049   4008         JC      ??zmain_vdd_check_5
   \   00004B   D291         SETB    0x90.1
   \   00004D   80BA         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   00004F   C290         CLR     0x90.0
   \   000051   80B6         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000053   C291         CLR     0x90.1
   \   000055   80B2         SJMP    ??zmain_vdd_check_0
   \   000057                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    215          
    216          /**************************************************************************************************
    217           * @fn          zmain_ext_addr
    218           *
    219           * @brief       Execute a prioritized search for a valid extended address and write the results
    220           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    221           *
    222           * input parameters
    223           *
    224           * None.
    225           *
    226           * output parameters
    227           *
    228           * None.
    229           *
    230           * @return      None.
    231           **************************************************************************************************
    232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    233          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    234          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    235            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    236            uint8 writeNV = TRUE;
    237          
    238            // First check whether a non-erased extended address exists in the OSAL NV.
    239            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    240                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    241                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_nv_item_init?relay
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   7057         JNZ     ??zmain_ext_addr_0
   \   00003B                ; Setup parameters for call to function osal_nv_read
   \   00003B   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..08       MOV     ?V0 + 0,#0x8
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A01         MOV     R2,#0x1
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   702E         JNZ     ??zmain_ext_addr_0
   \   000064                ; Setup parameters for call to function osal_memcmp
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   A982         MOV     R1,DPL
   \   00006C   AA83         MOV     R2,DPH
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   8A..         MOV     ?V0 + 1,R2
   \   000072   75..00       MOV     ?V0 + 2,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000080   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??osal_memcmp?relay
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    242            {
    243              // Attempt to read the extended address from the location on the lock bits page
    244              // where the programming tools know to reserve it.
    245              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000092                ; Setup parameters for call to function HalFlashRead
   \   000092   75..08       MOV     ?V0 + 0,#0x8
   \   000095   75..00       MOV     ?V0 + 1,#0x0
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   00009F   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A1   7AE8         MOV     R2,#-0x18
   \   0000A3   7B07         MOV     R3,#0x7
   \   0000A5   797F         MOV     R1,#0x7f
   \   0000A7   12....       LCALL   ??HalFlashRead?relay
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    246          
    247              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   A982         MOV     R1,DPL
   \   0000B7   AA83         MOV     R2,DPH
   \   0000B9   89..         MOV     ?V0 + 0,R1
   \   0000BB   8A..         MOV     ?V0 + 1,R2
   \   0000BD   75..00       MOV     ?V0 + 2,#0x0
   \   0000C0                ; Setup parameters for call to function osal_memcmp
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C08         MOV     R4,#0x8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000CB   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ??osal_memcmp?relay
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   6035         JZ      ??zmain_ext_addr_2
    248              {
    249                // Attempt to read the extended address from the designated location in the Info Page.
    250                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000DA                ; Setup parameters for call to function osal_memcmp
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   790C         MOV     R1,#0xc
   \   0000E5   7A78         MOV     R2,#0x78
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   12....       LCALL   ??osal_memcmp?relay
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV     A,R1
   \   0000F2   7054         JNZ     ??zmain_ext_addr_3
    251                {
    252                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   75..0C       MOV     ?V0 + 0,#0xc
   \   0000F7   75..78       MOV     ?V0 + 1,#0x78
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000105   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000107   12....       LCALL   ??osal_memcpy?relay
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    253                }
    254                else  // No valid extended address was found.
    255                {
    256                  uint8 idx;
    257                  
    258          #if !defined ( NV_RESTORE )
    259                  writeNV = FALSE;  // Make this a temporary IEEE address
    260          #endif
    261          
    262                  /* Attempt to create a sufficiently random extended address for expediency.
    263                   * Note: this is only valid/legal in a test environment and
    264                   *       must never be used for a commercial product.
    265                   */
    266                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    267                  {
    268                    uint16 randy = osal_rand();
    269                    aExtendedAddress[idx++] = LO_UINT16(randy);
    270                    aExtendedAddress[idx++] = HI_UINT16(randy);
    271                  }
    272                  // Next-to-MSB identifies ZigBee devicetype.
    273          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    274                  aExtendedAddress[idx++] = 0x10;
    275          #elif ZG_BUILD_RTRONLY_TYPE
    276                  aExtendedAddress[idx++] = 0x20;
    277          #else
    278                  aExtendedAddress[idx++] = 0x30;
    279          #endif
    280                  // MSB has historical signficance.
    281                  aExtendedAddress[idx] = 0xF8;
    282                }
    283              }
    284          
    285              if (writeNV)
    286              {
    287                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00010F                ; Setup parameters for call to function osal_nv_write
   \   00010F   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000112   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000115   78..         MOV     R0,#?V0 + 0
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   75..08       MOV     ?V0 + 0,#0x8
   \   00011D   75..00       MOV     ?V0 + 1,#0x0
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   7C00         MOV     R4,#0x0
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7A01         MOV     R2,#0x1
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   12....       LCALL   ??osal_nv_write?relay
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    288              }
    289            }
    290          
    291            // Set the MAC PIB extended address according to results from above.
    292            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000135                ; Setup parameters for call to function ZMacSetReq
   \   000135   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000137   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000139   79E2         MOV     R1,#-0x1e
   \   00013B   12....       LCALL   ??ZMacSetReq?relay
    293          }
   \   00013E   7408         MOV     A,#0x8
   \   000140   12....       LCALL   ?DEALLOC_XSTACK8
   \   000143   7F03         MOV     R7,#0x3
   \   000145   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000148   7E..         MOV     R6,#aExtendedAddress & 0xff
   \   00014A   7F..         MOV     R7,#(aExtendedAddress >> 8) & 0xff
   \                     ??zmain_ext_addr_4:
   \   00014C                ; Setup parameters for call to function osal_rand
   \   00014C   12....       LCALL   ??osal_rand?relay
   \   00014F   EA           MOV     A,R2
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   F0           MOVX    @DPTR,A
   \   000155   A3           INC     DPTR
   \   000156   EB           MOV     A,R3
   \   000157   F0           MOVX    @DPTR,A
   \   000158   05..         INC     ?V0 + 2
   \   00015A   05..         INC     ?V0 + 2
   \   00015C   EE           MOV     A,R6
   \   00015D   2402         ADD     A,#0x2
   \   00015F   EF           MOV     A,R7
   \   000160   3400         ADDC    A,#0x0
   \   000162   0E           INC     R6
   \   000163   0E           INC     R6
   \   000164   FF           MOV     R7,A
   \   000165   E5..         MOV     A,?V0 + 2
   \   000167   C3           CLR     C
   \   000168   9406         SUBB    A,#0x6
   \   00016A   40E0         JC      ??zmain_ext_addr_4
   \   00016C   85....       MOV     ?V0 + 0,?V0 + 2
   \   00016F   74..         MOV     A,#aExtendedAddress & 0xff
   \   000171   25..         ADD     A,?V0 + 0
   \   000173   F582         MOV     DPL,A
   \   000175   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000177   3400         ADDC    A,#0x0
   \   000179   F583         MOV     DPH,A
   \   00017B   7420         MOV     A,#0x20
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   7401         MOV     A,#0x1
   \   000180   25..         ADD     A,?V0 + 2
   \   000182   F8           MOV     R0,A
   \   000183   74..         MOV     A,#aExtendedAddress & 0xff
   \   000185   28           ADD     A,R0
   \   000186   F582         MOV     DPL,A
   \   000188   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00018A   3400         ADDC    A,#0x0
   \   00018C   F583         MOV     DPH,A
   \   00018E   74F8         MOV     A,#-0x8
   \   000190   F0           MOVX    @DPTR,A
   \   000191   80A2         SJMP    ??zmain_ext_addr_1
    294          
    295          /**************************************************************************************************
    296           * @fn          zmain_dev_info
    297           *
    298           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    299           *
    300           * input parameters
    301           *
    302           * None.
    303           *
    304           * output parameters
    305           *
    306           * None.
    307           *
    308           * @return      None.
    309           **************************************************************************************************
    310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    312          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    313          #ifdef LCD_SUPPORTED
    314            uint8 i;
    315            uint8 *xad;
    316            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    317          
    318            // Display the extended address.
    319            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \   00000A   7A..         MOV     R2,#(aExtendedAddress + 7) & 0xff
   \   00000C   7B..         MOV     R3,#((aExtendedAddress + 7) >> 8) & 0xff
    320          
    321            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7E00         MOV     R6,#0x0
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   A882         MOV     R0,DPL
   \   000018   A983         MOV     R1,DPH
    322            {
    323              uint8 ch;
    324              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C4           SWAP    A
   \   000020   540F         ANL     A,#0xf
   \   000022   FF           MOV     R7,A
    325              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000023   0E           INC     R6
   \   000024   C3           CLR     C
   \   000025   940A         SUBB    A,#0xa
   \   000027   5004         JNC     ??zmain_dev_info_1
   \   000029   7C30         MOV     R4,#0x30
   \   00002B   8002         SJMP    ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   00002D   7C37         MOV     R4,#0x37
   \                     ??zmain_dev_info_2:
   \   00002F   EC           MOV     A,R4
   \   000030   2F           ADD     A,R7
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   F0           MOVX    @DPTR,A
    326              ch = *xad & 0x0F;
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   540F         ANL     A,#0xf
   \   00003D   FF           MOV     R7,A
    327              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00003E   0E           INC     R6
   \   00003F   C3           CLR     C
   \   000040   940A         SUBB    A,#0xa
   \   000042   5004         JNC     ??zmain_dev_info_3
   \   000044   7C30         MOV     R4,#0x30
   \   000046   8002         SJMP    ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   000048   7C37         MOV     R4,#0x37
   \                     ??zmain_dev_info_4:
   \   00004A   EC           MOV     A,R4
   \   00004B   2F           ADD     A,R7
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
    328            }
   \   000052   EA           MOV     A,R2
   \   000053   24FF         ADD     A,#-0x1
   \   000055   1A           DEC     R2
   \   000056   EB           MOV     A,R3
   \   000057   34FF         ADDC    A,#-0x1
   \   000059   FB           MOV     R3,A
   \   00005A   E8           MOV     A,R0
   \   00005B   2402         ADD     A,#0x2
   \   00005D   08           INC     R0
   \   00005E   08           INC     R0
   \   00005F   E9           MOV     A,R1
   \   000060   3400         ADDC    A,#0x0
   \   000062   F9           MOV     R1,A
   \   000063   EE           MOV     A,R6
   \   000064   C3           CLR     C
   \   000065   9410         SUBB    A,#0x10
   \   000067   40B1         JC      ??zmain_dev_info_0
    329            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000069   7410         MOV     A,#0x10
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    330            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
   \   000070                ; Setup parameters for call to function HalLcdWriteString
   \   000070   7901         MOV     R1,#0x1
   \   000072   7A..         MOV     R2,#`?<Constant "IEEE: ">` & 0xff
   \   000074   7B..         MOV     R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000076   12....       LCALL   ??HalLcdWriteString?relay
    331            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   \   000079                ; Setup parameters for call to function HalLcdWriteString
   \   000079   7902         MOV     R1,#0x2
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??HalLcdWriteString?relay
    332          #endif
    333          }
   \   000088   7411         MOV     A,#0x11
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D                REQUIRE ?Subroutine0
   \   00008D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_vdd_check?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_dev_info?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  
    334          
    335          #ifdef LCD_SUPPORTED
    336          /*********************************************************************
    337           * @fn      zmain_lcd_init
    338           * @brief   Initialize LCD at start up.
    339           * @return  none
    340           *********************************************************************/
    341          static void zmain_lcd_init ( void )
    342          {
    343          #ifdef SERIAL_DEBUG_SUPPORTED
    344            {
    345              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    346          
    347          #if defined( MT_MAC_FUNC )
    348          #if defined( ZDO_COORDINATOR )
    349                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    350          #else
    351                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    352          #endif // ZDO
    353          #elif defined( MT_NWK_FUNC )
    354          #if defined( ZDO_COORDINATOR )
    355                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    356          #else
    357                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    358          #endif // ZDO
    359          #endif // MT_FUNC
    360            }
    361          #endif // SERIAL_DEBUG_SUPPORTED
    362          }
    363          #endif
    364          
    365          /*********************************************************************
    366          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       0      0      0
       -> osal_int_disable      0      0      0
       -> zmain_vdd_check       0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> zgInit                0      0      0
       -> afInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> zmain_dev_info        0      0      0
       -> osal_start_system     0      0      0
     zmain_dev_info             1      0     26
       -> HalLcdWriteString     0      0     52
       -> HalLcdWriteString     0      0     52
     zmain_ext_addr             2      0     23
       -> osal_nv_item_init     0      0     42
       -> osal_nv_read          0      0     46
       -> osal_memcmp           0      0     44
       -> HalFlashRead          0      0     42
       -> osal_memcmp           0      0     44
       -> osal_memcmp           0      0     44
       -> osal_memcpy           0      0     44
       -> osal_nv_write         0      0     46
       -> ZMacSetReq            0      0     38
       -> osal_rand             0      0     38
     zmain_vdd_check            0      0      9
       -> HalAdcCheckVdd        0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0INP                                             1
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            116
     zmain_vdd_check                                  87
     ?Subroutine0                                      5
     zmain_ext_addr                                  403
     zmain_dev_info                                  141
     ??main?relay                                      6
     ??zmain_vdd_check?relay                           6
     ??zmain_ext_addr?relay                            6
     ??zmain_dev_info?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8
     ?<Constant "IEEE: ">                              7

 
 752 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
  15 bytes in segment XDATA_ROM_C
 
 776 bytes of CODE  memory
  15 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
