###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/May/2015  19:32:51 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Comp #
#                          onents\osal\common\OSAL_Timers.c                   #
#    Command line       =  -f "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "D:\zigbee\4.         #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Com #
#                          ponents\osal\common\OSAL_Timers.c" -D ZIGBEEPRO    #
#                          -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P #
#                          ro\List\" -lA "D:\zigbee\4.                        #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\"      #
#                          --diag_suppress Pe001,Pa010 -o "D:\zigbee\4.       #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\Obj\" -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé #
#                          \2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\" -I    #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ #
#                          " -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡Êµ #
#                          Ñé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\" -I "D:\zigbee\4.              #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\" -I "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú» #
#                          ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0 #
#                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I         #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2. #
#                          Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\zigbee\4.  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\" -I "D:\zigbee\4.                  #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\AF\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SEC\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SAPI\" -I "D:\zigbee\4.                    #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\SYS\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\ZDO\" -I "D:\zigbee\4.                     #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\F8W\" -I "D:\zigbee\4.                      #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\ZMAC\" -I "D:\zigbee\4.                          #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SADDR\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\SERVICES\SDATA\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\INCLUDE\" -I "D:\zigbee\4.                   #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\HIGH_LEVEL\" -I "D:\zigbee\4.                #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\" -I "D:\zigbee\4.           #
#                          Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù #
#                          ´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohs           #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\List\OSAL_Timers.lst                             #
#    Object file        =  D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð #
#                          ­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr #
#                          o\Obj\OSAL_Timers.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee\4. Ó¦ÓÃÓë×éÍø\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\2.Ð­ÒéÕ»ÖÐ´®¿Ú»ù´¡ÊµÑé\ZStack-CC2530-2.3.0-1.4.0\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2009-11-09 20:57:31 -0800 (Mon, 09 Nov 2009) $
      4            Revision:       $Revision: 21110 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef struct
     63          {
     64            void   *next;
     65            uint16 timeout;
     66            uint16 event_flag;
     67            uint8  task_id;
     68            uint16 reloadTimeout;
     69          } osalTimerRec_t;
     70          
     71          /*********************************************************************
     72           * GLOBAL VARIABLES
     73           */
     74          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     76          
     77          /*********************************************************************
     78           * EXTERNAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * EXTERNAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */
     88          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     90          
     91          /*********************************************************************
     92           * LOCAL FUNCTION PROTOTYPES
     93           */
     94          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout );
     95          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
     96          void osalDeleteTimer( osalTimerRec_t *rmTimer );
     97          
     98          /*********************************************************************
     99           * FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn      osalTimerInit
    104           *
    105           * @brief   Initialization for the OSAL Timer System.
    106           *
    107           * @param   none
    108           *
    109           * @return
    110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          void osalTimerInit( void )
   \                     osalTimerInit:
    112          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    113            osal_systemClock = 0;
   \   000004   90....       MOV     DPTR,#__Constant_0
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   90....       MOV     DPTR,#osal_systemClock
   \   00000D   12....       LCALL   ?XSTORE_R2345
    114          }
   \   000010   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    115          
    116          /*********************************************************************
    117           * @fn      osalAddTimer
    118           *
    119           * @brief   Add a timer to the timer list.
    120           *          Ints must be disabled.
    121           *
    122           * @param   task_id
    123           * @param   event_flag
    124           * @param   timeout
    125           *
    126           * @return  osalTimerRec_t * - pointer to newly created timer
    127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout )
   \                     osalAddTimer:
    129          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
    130            osalTimerRec_t *newTimer;
    131            osalTimerRec_t *srchTimer;
    132          
    133            // Look for an existing timer first
    134            newTimer = osalFindTimer( task_id, event_flag );
   \   00000F   90....       MOV     DPTR,#timerHead
   \   000012   8004         SJMP    ??osalAddTimer_0
   \                     ??osalAddTimer_1:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \                     ??osalAddTimer_0:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FA           MOV     R2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   4B           ORL     A,R3
   \   00001F   602D         JZ      ??osalAddTimer_2
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6E           XRL     A,R6
   \   00002B   7003         JNZ     ??osalAddTimer_3
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6F           XRL     A,R7
   \                     ??osalAddTimer_3:
   \   000030   70E2         JNZ     ??osalAddTimer_1
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V0 + 2
   \   00003F   70D3         JNZ     ??osalAddTimer_1
    135            if ( newTimer )
    136            {
    137              // Timer is found - update it.
    138              newTimer->timeout = timeout;
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   EC           MOV     A,R4
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   ED           MOV     A,R5
   \                     ??osalAddTimer_4:
   \   00004B   F0           MOVX    @DPTR,A
    139          
    140              return ( newTimer );
   \   00004C   807E         SJMP    ??osalAddTimer_5
    141            }
    142            else
    143            {
    144              // New Timer
    145              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_2:
   \   00004E                ; Setup parameters for call to function osal_mem_alloc
   \   00004E   7A09         MOV     R2,#0x9
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   ??osal_mem_alloc?relay
    146          
    147              if ( newTimer )
   \   000055   EA           MOV     A,R2
   \   000056   4B           ORL     A,R3
   \   000057   606F         JZ      ??osalAddTimer_6
    148              {
    149                // Fill in new timer
    150                newTimer->task_id = task_id;
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E5..         MOV     A,?V0 + 2
   \   000065   F0           MOVX    @DPTR,A
    151                newTimer->event_flag = event_flag;
   \   000066   8A82         MOV     DPL,R2
   \   000068   8B83         MOV     DPH,R3
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   EE           MOV     A,R6
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   EF           MOV     A,R7
   \   000072   F0           MOVX    @DPTR,A
    152                newTimer->timeout = timeout;
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E5..         MOV     A,?V0 + 1
   \   00007F   F0           MOVX    @DPTR,A
    153                newTimer->next = (void *)NULL;
   \   000080   8A82         MOV     DPL,R2
   \   000082   8B83         MOV     DPH,R3
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   F0           MOVX    @DPTR,A
    154                newTimer->reloadTimeout = 0;
   \   000088   8A82         MOV     DPL,R2
   \   00008A   8B83         MOV     DPH,R3
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   F0           MOVX    @DPTR,A
    155          
    156                // Does the timer list already exist
    157                if ( timerHead == NULL )
   \   000096   90....       MOV     DPTR,#timerHead
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F8           MOV     R0,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F9           MOV     R1,A
   \   00009E   E8           MOV     A,R0
   \   00009F   49           ORL     A,R1
   \   0000A0   90....       MOV     DPTR,#timerHead
   \   0000A3   7006         JNZ     ??osalAddTimer_7
    158                {
    159                  // Start task list
    160                  timerHead = newTimer;
   \                     ??osalAddTimer_8:
   \   0000A5   EA           MOV     A,R2
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   EB           MOV     A,R3
   \   0000A9   80A0         SJMP    ??osalAddTimer_4
    161                }
    162                else
    163                {
    164                  // Add it to the end of the timer list
    165                  srchTimer = timerHead;
   \                     ??osalAddTimer_7:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   FC           MOV     R4,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   8003         SJMP    ??osalAddTimer_9
    166          
    167                  // Stop at the last record
    168                  while ( srchTimer->next )
    169                    srchTimer = srchTimer->next;
   \                     ??osalAddTimer_10:
   \   0000B1   E8           MOV     A,R0
   \   0000B2   FC           MOV     R4,A
   \   0000B3   E9           MOV     A,R1
   \                     ??osalAddTimer_9:
   \   0000B4   FD           MOV     R5,A
   \   0000B5   8C82         MOV     DPL,R4
   \   0000B7   8D83         MOV     DPH,R5
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   E8           MOV     A,R0
   \   0000BF   49           ORL     A,R1
   \   0000C0   70EF         JNZ     ??osalAddTimer_10
    170          
    171                  // Add to the list
    172                  srchTimer->next = newTimer;
   \   0000C2   8C82         MOV     DPL,R4
   \   0000C4   8D83         MOV     DPH,R5
   \   0000C6   80DD         SJMP    ??osalAddTimer_8
    173                }
    174          
    175                return ( newTimer );
    176              }
    177              else
    178                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_6:
   \   0000C8   7A00         MOV     R2,#0x0
   \   0000CA   7B00         MOV     R3,#0x0
   \                     ??osalAddTimer_5:
   \   0000CC   7F06         MOV     R7,#0x6
   \   0000CE   02....       LJMP    ?BANKED_LEAVE_XDATA
    179            }
    180          }
    181          
    182          /*********************************************************************
    183           * @fn      osalFindTimer
    184           *
    185           * @brief   Find a timer in a timer list.
    186           *          Ints must be disabled.
    187           *
    188           * @param   task_id
    189           * @param   event_flag
    190           *
    191           * @return  osalTimerRec_t *
    192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    193          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
   \                     osalFindTimer:
    194          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    195            osalTimerRec_t *srchTimer;
    196          
    197            // Head of the timer list
    198            srchTimer = timerHead;
   \   000004   90....       MOV     DPTR,#timerHead
   \   000007   8004         SJMP    ??osalFindTimer_0
    199          
    200            // Stop when found or at the end
    201            while ( srchTimer )
    202            {
    203              if ( srchTimer->event_flag == event_flag &&
    204                   srchTimer->task_id == task_id )
    205                break;
    206          
    207              // Not this one, check another
    208              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1:
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \                     ??osalFindTimer_0:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FC           MOV     R4,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FD           MOV     R5,A
   \   000012   EC           MOV     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   601F         JZ      ??osalFindTimer_2
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6A           XRL     A,R2
   \   000020   7003         JNZ     ??osalFindTimer_3
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6B           XRL     A,R3
   \                     ??osalFindTimer_3:
   \   000025   70E2         JNZ     ??osalFindTimer_1
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   69           XRL     A,R1
   \   000033   70D4         JNZ     ??osalFindTimer_1
    209            }
    210          
    211            return ( srchTimer );
   \                     ??osalFindTimer_2:
   \   000035   EC           MOV     A,R4
   \   000036   FA           MOV     R2,A
   \   000037   ED           MOV     A,R5
   \   000038   FB           MOV     R3,A
   \   000039   80..         SJMP    ?Subroutine0
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      osalDeleteTimer
    216           *
    217           * @brief   Delete a timer from a timer list.
    218           *
    219           * @param   table
    220           * @param   rmTimer
    221           *
    222           * @return  none
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          void osalDeleteTimer( osalTimerRec_t *rmTimer )
   \                     osalDeleteTimer:
    225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    226            // Does the timer list really exist
    227            if ( rmTimer )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600C         JZ      ??osalDeleteTimer_0
    228            {
    229              // Clear the event flag and osalTimerUpdate() will delete 
    230              // the timer from the list.
    231              rmTimer->event_flag = 0;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    232            }
    233          }
   \                     ??osalDeleteTimer_0:
   \   000014                REQUIRE ?Subroutine0
   \   000014                ; // Fall through to label ?Subroutine0
    234          
    235          /*********************************************************************
    236           * @fn      osal_start_timerEx
    237           *
    238           * @brief
    239           *
    240           *   This function is called to start a timer to expire in n mSecs.
    241           *   When the timer expires, the calling task will get the specified event.
    242           *
    243           * @param   uint8 taskID - task id to set timer for
    244           * @param   uint16 event_id - event to be notified with
    245           * @param   UNINT16 timeout_value - in milliseconds.
    246           *
    247           * @return  SUCCESS, or NO_TIMER_AVAIL.
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )
   \                     osal_start_timerEx:
    250          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    251            halIntState_t intState;
    252            osalTimerRec_t *newTimer;
    253          
    254            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   E5A8         MOV     A,0xa8
   \   000007   FF           MOV     R7,A
   \   000008   C2AF         CLR     0xa8.7
    255          
    256            // Add timer
    257            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000A                ; Setup parameters for call to function osalAddTimer
   \   00000A   12....       LCALL   ??osalAddTimer?relay
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A9..         MOV     R1,?V0 + 1
    258          
    259            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000011   EF           MOV     A,R7
   \   000012   A2E7         MOV     C,0xE0 /* A   */.7
   \   000014   92AF         MOV     0xa8.7,C
    260          
    261            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000016   EA           MOV     A,R2
   \   000017   49           ORL     A,R1
   \   000018   6004         JZ      ??osal_start_timerEx_0
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   8002         SJMP    ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   00001E   7908         MOV     R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   000020   7F02         MOV     R7,#0x2
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000025                REQUIRE _A_IEN0
    262          }
    263          
    264          /*********************************************************************
    265           * @fn      osal_start_reload_timer
    266           *
    267           * @brief
    268           *
    269           *   This function is called to start a timer to expire in n mSecs.
    270           *   When the timer expires, the calling task will get the specified event
    271           *   and the timer will be reloaded with the timeout value.
    272           *
    273           * @param   uint8 taskID - task id to set timer for
    274           * @param   uint16 event_id - event to be notified with
    275           * @param   UNINT16 timeout_value - in milliseconds.
    276           *
    277           * @return  SUCCESS, or NO_TIMER_AVAIL.
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint16 timeout_value )
   \                     osal_start_reload_timer:
    280          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    281            halIntState_t intState;
    282            osalTimerRec_t *newTimer;
    283          
    284            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   F5..         MOV     ?V0 + 1,A
   \   00000F   C2AF         CLR     0xa8.7
    285          
    286            // Add timer
    287            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000011                ; Setup parameters for call to function osalAddTimer
   \   000011   12....       LCALL   ??osalAddTimer?relay
   \   000014   8A..         MOV     ?V0 + 2,R2
   \   000016   8B..         MOV     ?V0 + 3,R3
   \   000018   A8..         MOV     R0,?V0 + 2
   \   00001A   A9..         MOV     R1,?V0 + 3
    288            if ( newTimer )
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   6010         JZ      ??osal_start_reload_timer_0
    289            {
    290              // Load the reload timeout value
    291              newTimer->reloadTimeout = timeout_value;
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   F0           MOVX    @DPTR,A
    292            }
    293          
    294            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   000030   E5..         MOV     A,?V0 + 1
   \   000032   A2E0         MOV     C,0xE0 /* A   */.0
   \   000034   92AF         MOV     0xa8.7,C
    295          
    296            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000036   E8           MOV     A,R0
   \   000037   49           ORL     A,R1
   \   000038   6004         JZ      ??osal_start_reload_timer_1
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   00003E   7908         MOV     R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   000040   7F04         MOV     R7,#0x4
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000045                REQUIRE _A_IEN0
    297          }
    298          
    299          /*********************************************************************
    300           * @fn      osal_stop_timerEx
    301           *
    302           * @brief
    303           *
    304           *   This function is called to stop a timer that has already been started.
    305           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    306           *   associated with the timer from being set for the calling task.
    307           *
    308           * @param   uint8 task_id - task id of timer to stop
    309           * @param   uint16 event_id - identifier of the timer that is to be stopped
    310           *
    311           * @return  SUCCESS or INVALID_EVENT_ID
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
   \                     osal_stop_timerEx:
    314          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    315            halIntState_t intState;
    316            osalTimerRec_t *foundTimer;
    317          
    318            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FF           MOV     R7,A
   \   00000C   C2AF         CLR     0xa8.7
    319          
    320            // Find the timer to stop
    321            foundTimer = osalFindTimer( task_id, event_id );
   \   00000E   90....       MOV     DPTR,#timerHead
   \   000011   8004         SJMP    ??osal_stop_timerEx_0
   \                     ??osal_stop_timerEx_1:
   \   000013   8882         MOV     DPL,R0
   \   000015   8983         MOV     DPH,R1
   \                     ??osal_stop_timerEx_0:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   602B         JZ      ??osal_stop_timerEx_2
   \   000020   E8           MOV     A,R0
   \   000021   2404         ADD     A,#0x4
   \   000023   FC           MOV     R4,A
   \   000024   E9           MOV     A,R1
   \   000025   3400         ADDC    A,#0x0
   \   000027   FD           MOV     R5,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6A           XRL     A,R2
   \   00002E   7003         JNZ     ??osal_stop_timerEx_3
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6B           XRL     A,R3
   \                     ??osal_stop_timerEx_3:
   \   000033   70DE         JNZ     ??osal_stop_timerEx_1
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6E           XRL     A,R6
   \   000041   70D0         JNZ     ??osal_stop_timerEx_1
    322            if ( foundTimer )
    323            {
    324              osalDeleteTimer( foundTimer );
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   F0           MOVX    @DPTR,A
    325            }
    326          
    327            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_2:
   \   00004B   EF           MOV     A,R7
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   92AF         MOV     0xa8.7,C
    328          
    329            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \   000050   E8           MOV     A,R0
   \   000051   49           ORL     A,R1
   \   000052   6004         JZ      ??osal_stop_timerEx_4
   \   000054   7900         MOV     R1,#0x0
   \   000056   8002         SJMP    ??osal_stop_timerEx_5
   \                     ??osal_stop_timerEx_4:
   \   000058   7906         MOV     R1,#0x6
   \                     ??osal_stop_timerEx_5:
   \   00005A                REQUIRE ?Subroutine1
   \   00005A                REQUIRE _A_IEN0
   \   00005A                ; // Fall through to label ?Subroutine1
    330          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    331          
    332          /*********************************************************************
    333           * @fn      osal_get_timeoutEx
    334           *
    335           * @brief
    336           *
    337           * @param   uint8 task_id - task id of timer to check
    338           * @param   uint16 event_id - identifier of timer to be checked
    339           *
    340           * @return  Return the timer's tick count if found, zero otherwise.
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          uint16 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
   \                     osal_get_timeoutEx:
    343          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    344            halIntState_t intState;
    345            uint16 rtrn = 0;
   \   000005   7E00         MOV     R6,#0x0
   \   000007   7F00         MOV     R7,#0x0
    346            osalTimerRec_t *tmr;
    347          
    348            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   F8           MOV     R0,A
   \   00000E   C2AF         CLR     0xa8.7
    349          
    350            tmr = osalFindTimer( task_id, event_id );
   \   000010   90....       MOV     DPTR,#timerHead
   \   000013   8004         SJMP    ??osal_get_timeoutEx_0
   \                     ??osal_get_timeoutEx_1:
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \                     ??osal_get_timeoutEx_0:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FD           MOV     R5,A
   \   00001E   EC           MOV     A,R4
   \   00001F   4D           ORL     A,R5
   \   000020   602A         JZ      ??osal_get_timeoutEx_2
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6A           XRL     A,R2
   \   00002C   7003         JNZ     ??osal_get_timeoutEx_3
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6B           XRL     A,R3
   \                     ??osal_get_timeoutEx_3:
   \   000031   70E2         JNZ     ??osal_get_timeoutEx_1
   \   000033   8C82         MOV     DPL,R4
   \   000035   8D83         MOV     DPH,R5
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   69           XRL     A,R1
   \   00003F   70D4         JNZ     ??osal_get_timeoutEx_1
    351          
    352            if ( tmr )
    353            {
    354              rtrn = tmr->timeout;
   \   000041   8C82         MOV     DPL,R4
   \   000043   8D83         MOV     DPH,R5
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FE           MOV     R6,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FF           MOV     R7,A
    355            }
    356          
    357            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_2:
   \   00004C   E8           MOV     A,R0
   \   00004D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004F   92AF         MOV     0xa8.7,C
    358          
    359            return rtrn;
   \   000051   EE           MOV     A,R6
   \   000052   FA           MOV     R2,A
   \   000053   EF           MOV     A,R7
   \   000054   FB           MOV     R3,A
   \   000055   80..         SJMP    ?Subroutine1
   \   000057                REQUIRE _A_IEN0
    360          }
    361          
    362          /*********************************************************************
    363           * @fn      osal_timer_num_active
    364           *
    365           * @brief
    366           *
    367           *   This function counts the number of active timers.
    368           *
    369           * @return  uint8 - number of timers
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          uint8 osal_timer_num_active( void )
   \                     osal_timer_num_active:
    372          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    373            halIntState_t intState;
    374            uint8 num_timers = 0;
   \   000004   7900         MOV     R1,#0x0
    375            osalTimerRec_t *srchTimer;
    376          
    377            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV     C,0xa8.7
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F8           MOV     R0,A
   \   00000B   C2AF         CLR     0xa8.7
    378          
    379            // Head of the timer list
    380            srchTimer = timerHead;
   \   00000D   90....       MOV     DPTR,#timerHead
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
    381          
    382            // Count timers in the list
    383            while ( srchTimer != NULL )
   \   000019   E582         MOV     A,DPL
   \   00001B   4583         ORL     A,DPH
   \   00001D   6010         JZ      ??osal_timer_num_active_0
    384            {
    385              num_timers++;
   \                     ??osal_timer_num_active_1:
   \   00001F   09           INC     R1
    386              srchTimer = srchTimer->next;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FB           MOV     R3,A
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E582         MOV     A,DPL
   \   00002B   4583         ORL     A,DPH
   \   00002D   70F0         JNZ     ??osal_timer_num_active_1
    387            }
    388          
    389            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_timer_num_active_0:
   \   00002F   E8           MOV     A,R0
   \   000030   A2E0         MOV     C,0xE0 /* A   */.0
   \   000032   92AF         MOV     0xa8.7,C
    390          
    391            return num_timers;
   \   000034   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000037                REQUIRE _A_IEN0
    392          }
    393          
    394          /*********************************************************************
    395           * @fn      osalTimerUpdate
    396           *
    397           * @brief   Update the timer structures for a timer tick.
    398           *
    399           * @param   none
    400           *
    401           * @return  none
    402           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          void osalTimerUpdate( uint16 updateTime )
   \                     osalTimerUpdate:
    404          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
    405            halIntState_t intState;
    406            osalTimerRec_t *srchTimer;
    407            osalTimerRec_t *prevTimer;
    408          
    409            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000009   E5A8         MOV     A,0xa8
   \   00000B   F9           MOV     R1,A
   \   00000C   C2AF         CLR     0xa8.7
    410            // Update the system time
    411            osal_systemClock += updateTime;
   \   00000E   8A..         MOV     ?V0 + 0,R2
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   E4           CLR     A
   \   000013   F5..         MOV     ?V0 + 2,A
   \   000015   F5..         MOV     ?V0 + 3,A
   \   000017   90....       MOV     DPTR,#osal_systemClock
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_ADD_TO_X
    412            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00001F   E9           MOV     A,R1
   \   000020   A2E7         MOV     C,0xE0 /* A   */.7
   \   000022   92AF         MOV     0xa8.7,C
    413          
    414            // Look for open timer slot
    415            if ( timerHead != NULL )
   \   000024   90....       MOV     DPTR,#timerHead
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??osalTimerUpdate_0 & 0xFFFF
    416            {
    417              // Add it to the end of the timer list
    418              srchTimer = timerHead;
   \   000033   90....       MOV     DPTR,#timerHead
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 1,A
    419              prevTimer = (void *)NULL;
    420          
    421              // Look for open timer slot
    422              while ( srchTimer )
    423              {
    424                osalTimerRec_t *freeTimer = NULL;
   \                     ??osalTimerUpdate_1:
   \   00003D   7E00         MOV     R6,#0x0
   \   00003F   7F00         MOV     R7,#0x0
    425               
    426                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000041   A2AF         MOV     C,0xa8.7
   \   000043   E4           CLR     A
   \   000044   33           RLC     A
   \   000045   F5..         MOV     ?V0 + 10,A
   \   000047   C2AF         CLR     0xa8.7
    427                
    428                if (srchTimer->timeout <= updateTime)
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   2402         ADD     A,#0x2
   \   00004D   F5..         MOV     ?V0 + 4,A
   \   00004F   E5..         MOV     A,?V0 + 1
   \   000051   3400         ADDC    A,#0x0
   \   000053   F5..         MOV     ?V0 + 5,A
   \   000055   85..82       MOV     DPL,?V0 + 4
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   C3           CLR     C
   \   000060   E5..         MOV     A,?V0 + 6
   \   000062   98           SUBB    A,R0
   \   000063   E5..         MOV     A,?V0 + 7
   \   000065   99           SUBB    A,R1
   \   000066   85..82       MOV     DPL,?V0 + 4
   \   000069   85..83       MOV     DPH,?V0 + 5
   \   00006C   4006         JC      ??osalTimerUpdate_2
    429                {
    430                  srchTimer->timeout = 0;
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8019         SJMP    ??osalTimerUpdate_3
    431                }
    432                else
    433                {
    434                  srchTimer->timeout = srchTimer->timeout - updateTime;
   \                     ??osalTimerUpdate_2:
   \   000074   C3           CLR     C
   \   000075   E0           MOVX    A,@DPTR
   \   000076   95..         SUBB    A,?V0 + 6
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   95..         SUBB    A,?V0 + 7
   \   00007D   F0           MOVX    @DPTR,A
    435                }
    436                
    437                // Check for reloading
    438                if ( (srchTimer->timeout == 0) && (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
   \   00007E   85..82       MOV     DPL,?V0 + 4
   \   000081   85..83       MOV     DPH,?V0 + 5
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F8           MOV     R0,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   E8           MOV     A,R0
   \   00008A   49           ORL     A,R1
   \   00008B   7054         JNZ     ??osalTimerUpdate_4
   \                     ??osalTimerUpdate_3:
   \   00008D   E5..         MOV     A,?V0 + 0
   \   00008F   2407         ADD     A,#0x7
   \   000091   F5..         MOV     ?V0 + 8,A
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   3400         ADDC    A,#0x0
   \   000097   F5..         MOV     ?V0 + 9,A
   \   000099   85..82       MOV     DPL,?V0 + 8
   \   00009C   F583         MOV     DPH,A
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   E8           MOV     A,R0
   \   0000A4   49           ORL     A,R1
   \   0000A5   605C         JZ      ??osalTimerUpdate_5
   \   0000A7   85..82       MOV     DPL,?V0 + 0
   \   0000AA   85..83       MOV     DPH,?V0 + 1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   EA           MOV     A,R2
   \   0000B7   4B           ORL     A,R3
   \   0000B8   6049         JZ      ??osalTimerUpdate_5
    439                {
    440                  // Notify the task of a timeout
    441                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
   \   0000BA                ; Setup parameters for call to function osal_set_event
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F9           MOV     R1,A
   \   0000C8   12....       LCALL   ??osal_set_event?relay
    442                  
    443                  // Reload the timer timeout value
    444                  srchTimer->timeout = srchTimer->reloadTimeout;
   \   0000CB   85..82       MOV     DPL,?V0 + 8
   \   0000CE   85..83       MOV     DPH,?V0 + 9
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F8           MOV     R0,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F9           MOV     R1,A
   \   0000D6   85..82       MOV     DPL,?V0 + 4
   \   0000D9   85..83       MOV     DPH,?V0 + 5
   \   0000DC   E8           MOV     A,R0
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E9           MOV     A,R1
   \   0000E0   F0           MOVX    @DPTR,A
    445                }
    446                
    447                // When timeout or delete (event_flag == 0)
    448                if ( srchTimer->timeout == 0 || srchTimer->event_flag == 0 )
   \                     ??osalTimerUpdate_4:
   \   0000E1   85..82       MOV     DPL,?V0 + 4
   \   0000E4   85..83       MOV     DPH,?V0 + 5
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F8           MOV     R0,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   E8           MOV     A,R0
   \   0000ED   49           ORL     A,R1
   \   0000EE   6013         JZ      ??osalTimerUpdate_5
   \   0000F0   85..82       MOV     DPL,?V0 + 0
   \   0000F3   85..83       MOV     DPH,?V0 + 1
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F8           MOV     R0,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E8           MOV     A,R0
   \   000100   49           ORL     A,R1
   \   000101   702B         JNZ     ??osalTimerUpdate_6
    449                {
    450                  // Take out of list
    451                  if ( prevTimer == NULL )
   \                     ??osalTimerUpdate_5:
   \   000103   85..82       MOV     DPL,?V0 + 0
   \   000106   85..83       MOV     DPH,?V0 + 1
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F8           MOV     R0,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F9           MOV     R1,A
   \   00010E   E5..         MOV     A,?V0 + 2
   \   000110   45..         ORL     A,?V0 + 3
   \   000112   7005         JNZ     ??osalTimerUpdate_7
    452                    timerHead = srchTimer->next;
   \   000114   90....       MOV     DPTR,#timerHead
   \   000117   8006         SJMP    ??osalTimerUpdate_8
    453                  else
    454                    prevTimer->next = srchTimer->next;
   \                     ??osalTimerUpdate_7:
   \   000119   85..82       MOV     DPL,?V0 + 2
   \   00011C   85..83       MOV     DPH,?V0 + 3
   \                     ??osalTimerUpdate_8:
   \   00011F   E8           MOV     A,R0
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E9           MOV     A,R1
   \   000123   F0           MOVX    @DPTR,A
    455          
    456                  // Setup to free memory
    457                  freeTimer = srchTimer;
   \   000124   AE..         MOV     R6,?V0 + 0
   \   000126   AF..         MOV     R7,?V0 + 1
    458          
    459                  // Next
    460                  srchTimer = srchTimer->next;
   \   000128   8E82         MOV     DPL,R6
   \   00012A   8F83         MOV     DPH,R7
   \   00012C   800C         SJMP    ??osalTimerUpdate_9
    461                }
    462                else
    463                {
    464                  // Get next
    465                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_6:
   \   00012E   85....       MOV     ?V0 + 2,?V0 + 0
   \   000131   85....       MOV     ?V0 + 3,?V0 + 1
    466                  srchTimer = srchTimer->next;
   \   000134   85..82       MOV     DPL,?V0 + 0
   \   000137   85..83       MOV     DPH,?V0 + 1
   \                     ??osalTimerUpdate_9:
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F5..         MOV     ?V0 + 0,A
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F5..         MOV     ?V0 + 1,A
    467                }
    468                
    469                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000141   E5..         MOV     A,?V0 + 10
   \   000143   A2E0         MOV     C,0xE0 /* A   */.0
   \   000145   92AF         MOV     0xa8.7,C
    470                
    471                if ( freeTimer )
   \   000147   EE           MOV     A,R6
   \   000148   4F           ORL     A,R7
   \   000149   6032         JZ      ??osalTimerUpdate_10
    472                {
    473                  if ( freeTimer->timeout == 0 )
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F8           MOV     R0,A
   \   000153   A3           INC     DPTR
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F9           MOV     R1,A
   \   000156   E8           MOV     A,R0
   \   000157   49           ORL     A,R1
   \   000158   701C         JNZ     ??osalTimerUpdate_11
    474                  {
    475                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   00015A                ; Setup parameters for call to function osal_set_event
   \   00015A   8E82         MOV     DPL,R6
   \   00015C   8F83         MOV     DPH,R7
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FA           MOV     R2,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   FB           MOV     R3,A
   \   000167   8E82         MOV     DPL,R6
   \   000169   8F83         MOV     DPH,R7
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   12....       LCALL   ??osal_set_event?relay
    476                  }
    477                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_11:
   \   000176                ; Setup parameters for call to function osal_mem_free
   \   000176   EE           MOV     A,R6
   \   000177   FA           MOV     R2,A
   \   000178   EF           MOV     A,R7
   \   000179   FB           MOV     R3,A
   \   00017A   12....       LCALL   ??osal_mem_free?relay
    478                }
    479              }
   \                     ??osalTimerUpdate_10:
   \   00017D   E5..         MOV     A,?V0 + 0
   \   00017F   45..         ORL     A,?V0 + 1
   \   000181   6003         JZ      $+5
   \   000183   02....       LJMP    ??osalTimerUpdate_1 & 0xFFFF
    480            }
    481          }
   \                     ??osalTimerUpdate_0:
   \   000186   7F0B         MOV     R7,#0xb
   \   000188   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00018B                REQUIRE _A_IEN0
    482          
    483          #ifdef POWER_SAVING
    484          /*********************************************************************
    485           * @fn      osal_adjust_timers
    486           *
    487           * @brief   Update the timer structures for elapsed ticks.
    488           *
    489           * @param   none
    490           *
    491           * @return  none
    492           *********************************************************************/
    493          void osal_adjust_timers( void )
    494          {
    495            uint16 eTime;
    496          
    497            if ( timerHead != NULL )
    498            {
    499              // Compute elapsed time (msec)
    500              eTime = TimerElapsed() /  TICK_COUNT;
    501          
    502              if ( eTime )
    503                osalTimerUpdate( eTime );
    504            }
    505          }
    506          
    507          /*********************************************************************
    508           * @fn      osal_next_timeout
    509           *
    510           * @brief
    511           *
    512           *   Search timer table to return the lowest timeout value. If the
    513           *   timer list is empty, then the returned timeout will be zero.
    514           *
    515           * @param   none
    516           *
    517           * @return  none
    518           *********************************************************************/
    519          uint16 osal_next_timeout( void )
    520          {
    521            uint16 nextTimeout;
    522            osalTimerRec_t *srchTimer;
    523          
    524            if ( timerHead != NULL )
    525            {
    526              // Head of the timer list
    527              srchTimer = timerHead;
    528              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    529          
    530              // Look for the next timeout timer
    531              while ( srchTimer != NULL )
    532              {
    533                if (srchTimer->timeout < nextTimeout)
    534                {
    535                  nextTimeout = srchTimer->timeout;
    536                }
    537                // Check next timer
    538                srchTimer = srchTimer->next;
    539              }
    540            }
    541            else
    542            {
    543              // No timers
    544              nextTimeout = 0;
    545            }
    546          
    547            return ( nextTimeout );
    548          }
    549          #endif // POWER_SAVING
    550          
    551          /*********************************************************************
    552           * @fn      osal_GetSystemClock()
    553           *
    554           * @brief   Read the local system clock.
    555           *
    556           * @param   none
    557           *
    558           * @return  local clock in milliseconds
    559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          uint32 osal_GetSystemClock( void )
   \                     osal_GetSystemClock:
    561          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    562            return ( osal_systemClock );
   \   000004   90....       MOV     DPTR,#osal_systemClock
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   02....       LJMP    ?Subroutine0 & 0xFFFF
    563          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalTimerInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalAddTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalAddTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalFindTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalFindTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalDeleteTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalDeleteTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_timerEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_start_reload_timer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_reload_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_stop_timerEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_stop_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_get_timeoutEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_get_timeoutEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_timer_num_active?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_timer_num_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalTimerUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_GetSystemClock?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_GetSystemClock
    564          
    565          /*********************************************************************
    566          *********************************************************************/

   Maximum stack usage in bytes:

     Function                ISTACK PSTACK XSTACK
     --------                ------ ------ ------
     osalAddTimer                1      0     26
       -> osal_mem_alloc         0      0     28
     osalDeleteTimer             2      0      0
     osalFindTimer               2      0      0
     osalTimerInit               2      0      0
     osalTimerUpdate             0      0     19
       -> osal_set_event         0      0     38
       -> osal_set_event         0      0     38
       -> osal_mem_free          0      0     38
     osal_GetSystemClock         2      0      0
     osal_get_timeoutEx          0      0      9
     osal_start_reload_timer     0      0     12
       -> osalAddTimer           0      0     24
     osal_start_timerEx          0      0     10
       -> osalAddTimer           0      0     20
     osal_stop_timerEx           0      0      9
     osal_timer_num_active       2      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     _A_IEN0                            1
     timerHead                          2
     osal_systemClock                   4
     osalTimerInit                     19
     ?Subroutine0                       7
     osalAddTimer                     209
     osalFindTimer                     59
     osalDeleteTimer                   20
     osal_start_timerEx                37
     osal_start_reload_timer           69
     osal_stop_timerEx                 90
     ?Subroutine1                       5
     osal_get_timeoutEx                87
     osal_timer_num_active             55
     osalTimerUpdate                  395
     osal_GetSystemClock               13
     __Constant_0                       4
     ??osalTimerInit?relay              6
     ??osalAddTimer?relay               6
     ??osalFindTimer?relay              6
     ??osalDeleteTimer?relay            6
     ??osal_start_timerEx?relay         6
     ??osal_start_reload_timer?relay    6
     ??osal_stop_timerEx?relay          6
     ??osal_get_timeoutEx?relay         6
     ??osal_timer_num_active?relay      6
     ??osalTimerUpdate?relay            6
     ??osal_GetSystemClock?relay        6

 
 1 065 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
     6 bytes in segment XDATA_Z
 
 1 131 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
     6 bytes of XDATA memory

Errors: none
Warnings: none
